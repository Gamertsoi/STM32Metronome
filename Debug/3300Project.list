
3300Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800645c  0800645c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800645c  0800645c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800645c  0800645c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000074  080064d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080064d8  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb9b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f73  00000000  00000000  0002bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  0002dbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001ad93  00000000  00000000  0002e890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d7cd  00000000  00000000  00049623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009b49c  00000000  00000000  00056df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000f228c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000bd0  00000000  00000000  000f22e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004074  00000000  00000000  000f2eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	0800599c 	.word	0x0800599c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	0800599c 	.word	0x0800599c

08000224 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	e002      	b.n	8000234 <Delay+0x10>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <Delay+0xa>
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f829 	bl	80002a4 <LCD_BackLed_Control>
	LCD_Rst();
 8000252:	f000 f80f 	bl	8000274 <LCD_Rst>
	LCD_REG_Config();
 8000256:	f000 f85f 	bl	8000318 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800025a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000264:	22f0      	movs	r2, #240	; 0xf0
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f9e6 	bl	800063a <LCD_Clear>
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <LCD_Rst+0x28>)
 800027e:	f002 fc47 	bl	8002b10 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <LCD_Rst+0x2c>)
 8000284:	f7ff ffce 	bl	8000224 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <LCD_Rst+0x28>)
 800028e:	f002 fc3f 	bl	8002b10 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <LCD_Rst+0x2c>)
 8000294:	f7ff ffc6 	bl	8000224 <Delay>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011800 	.word	0x40011800
 80002a0:	0002bffc 	.word	0x0002bffc

080002a4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4807      	ldr	r0, [pc, #28]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002bc:	f002 fc28 	bl	8002b10 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80002c0:	e005      	b.n	80002ce <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002ca:	f002 fc21 	bl	8002b10 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40011400 	.word	0x40011400

080002dc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	8013      	strh	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <LCD_Write_Data+0x1c>)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	8013      	strh	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	60020000 	.word	0x60020000

08000318 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800031c:	20cf      	movs	r0, #207	; 0xcf
 800031e:	f7ff ffdd 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffe8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000328:	2081      	movs	r0, #129	; 0x81
 800032a:	f7ff ffe5 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800032e:	2030      	movs	r0, #48	; 0x30
 8000330:	f7ff ffe2 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000334:	20ed      	movs	r0, #237	; 0xed
 8000336:	f7ff ffd1 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f7ff ffdc 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000340:	2003      	movs	r0, #3
 8000342:	f7ff ffd9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000346:	2012      	movs	r0, #18
 8000348:	f7ff ffd6 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f7ff ffd3 	bl	80002f8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000352:	20e8      	movs	r0, #232	; 0xe8
 8000354:	f7ff ffc2 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000358:	2085      	movs	r0, #133	; 0x85
 800035a:	f7ff ffcd 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ffca 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000364:	2078      	movs	r0, #120	; 0x78
 8000366:	f7ff ffc7 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800036a:	20cb      	movs	r0, #203	; 0xcb
 800036c:	f7ff ffb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000370:	2039      	movs	r0, #57	; 0x39
 8000372:	f7ff ffc1 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000376:	202c      	movs	r0, #44	; 0x2c
 8000378:	f7ff ffbe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ffbb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000382:	2034      	movs	r0, #52	; 0x34
 8000384:	f7ff ffb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000388:	2002      	movs	r0, #2
 800038a:	f7ff ffb5 	bl	80002f8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800038e:	20f7      	movs	r0, #247	; 0xf7
 8000390:	f7ff ffa4 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000394:	2020      	movs	r0, #32
 8000396:	f7ff ffaf 	bl	80002f8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800039a:	20ea      	movs	r0, #234	; 0xea
 800039c:	f7ff ff9e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ffa9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffa6 	bl	80002f8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80003ac:	20b1      	movs	r0, #177	; 0xb1
 80003ae:	f7ff ff95 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ffa0 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80003b8:	201b      	movs	r0, #27
 80003ba:	f7ff ff9d 	bl	80002f8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80003be:	20b6      	movs	r0, #182	; 0xb6
 80003c0:	f7ff ff8c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80003c4:	200a      	movs	r0, #10
 80003c6:	f7ff ff97 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80003ca:	20a2      	movs	r0, #162	; 0xa2
 80003cc:	f7ff ff94 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80003d0:	20c0      	movs	r0, #192	; 0xc0
 80003d2:	f7ff ff83 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80003d6:	2035      	movs	r0, #53	; 0x35
 80003d8:	f7ff ff8e 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80003dc:	20c1      	movs	r0, #193	; 0xc1
 80003de:	f7ff ff7d 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80003e2:	2011      	movs	r0, #17
 80003e4:	f7ff ff88 	bl	80002f8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80003e8:	20c5      	movs	r0, #197	; 0xc5
 80003ea:	f7ff ff77 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80003ee:	2045      	movs	r0, #69	; 0x45
 80003f0:	f7ff ff82 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80003f4:	2045      	movs	r0, #69	; 0x45
 80003f6:	f7ff ff7f 	bl	80002f8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80003fa:	20c7      	movs	r0, #199	; 0xc7
 80003fc:	f7ff ff6e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000400:	20a2      	movs	r0, #162	; 0xa2
 8000402:	f7ff ff79 	bl	80002f8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000406:	20f2      	movs	r0, #242	; 0xf2
 8000408:	f7ff ff68 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff73 	bl	80002f8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000412:	2026      	movs	r0, #38	; 0x26
 8000414:	f7ff ff62 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff6d 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800041e:	20e0      	movs	r0, #224	; 0xe0
 8000420:	f7ff ff5c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000424:	200f      	movs	r0, #15
 8000426:	f7ff ff67 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800042a:	2026      	movs	r0, #38	; 0x26
 800042c:	f7ff ff64 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000430:	2024      	movs	r0, #36	; 0x24
 8000432:	f7ff ff61 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000436:	200b      	movs	r0, #11
 8000438:	f7ff ff5e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800043c:	200e      	movs	r0, #14
 800043e:	f7ff ff5b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000442:	2009      	movs	r0, #9
 8000444:	f7ff ff58 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000448:	2054      	movs	r0, #84	; 0x54
 800044a:	f7ff ff55 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800044e:	20a8      	movs	r0, #168	; 0xa8
 8000450:	f7ff ff52 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000454:	2046      	movs	r0, #70	; 0x46
 8000456:	f7ff ff4f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff4c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000460:	2017      	movs	r0, #23
 8000462:	f7ff ff49 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000466:	2009      	movs	r0, #9
 8000468:	f7ff ff46 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800046c:	200f      	movs	r0, #15
 800046e:	f7ff ff43 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000472:	2007      	movs	r0, #7
 8000474:	f7ff ff40 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff3d 	bl	80002f8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800047e:	20e1      	movs	r0, #225	; 0xe1
 8000480:	f7ff ff2c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff37 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800048a:	2019      	movs	r0, #25
 800048c:	f7ff ff34 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000490:	201b      	movs	r0, #27
 8000492:	f7ff ff31 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000496:	2004      	movs	r0, #4
 8000498:	f7ff ff2e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800049c:	2010      	movs	r0, #16
 800049e:	f7ff ff2b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80004a2:	2007      	movs	r0, #7
 80004a4:	f7ff ff28 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80004a8:	202a      	movs	r0, #42	; 0x2a
 80004aa:	f7ff ff25 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80004ae:	2047      	movs	r0, #71	; 0x47
 80004b0:	f7ff ff22 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80004b4:	2039      	movs	r0, #57	; 0x39
 80004b6:	f7ff ff1f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80004ba:	2003      	movs	r0, #3
 80004bc:	f7ff ff1c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c0:	2006      	movs	r0, #6
 80004c2:	f7ff ff19 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c6:	2006      	movs	r0, #6
 80004c8:	f7ff ff16 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80004cc:	2030      	movs	r0, #48	; 0x30
 80004ce:	f7ff ff13 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80004d2:	2038      	movs	r0, #56	; 0x38
 80004d4:	f7ff ff10 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff ff0d 	bl	80002f8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80004de:	2036      	movs	r0, #54	; 0x36
 80004e0:	f7ff fefc 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80004e4:	20c8      	movs	r0, #200	; 0xc8
 80004e6:	f7ff ff07 	bl	80002f8 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80004ea:	202a      	movs	r0, #42	; 0x2a
 80004ec:	f7ff fef6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff ff01 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fefe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fefb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000502:	20ef      	movs	r0, #239	; 0xef
 8000504:	f7ff fef8 	bl	80002f8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000508:	202b      	movs	r0, #43	; 0x2b
 800050a:	f7ff fee7 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef2 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff feef 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff feec 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000520:	203f      	movs	r0, #63	; 0x3f
 8000522:	f7ff fee9 	bl	80002f8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f7ff fed8 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 800052c:	2055      	movs	r0, #85	; 0x55
 800052e:	f7ff fee3 	bl	80002f8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000532:	2011      	movs	r0, #17
 8000534:	f7ff fed2 	bl	80002dc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <LCD_REG_Config+0x230>)
 800053a:	f7ff fe73 	bl	8000224 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800053e:	2029      	movs	r0, #41	; 0x29
 8000540:	f7ff fecc 	bl	80002dc <LCD_Write_Cmd>
	
	
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0002bffc 	.word	0x0002bffc

0800054c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4604      	mov	r4, r0
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4623      	mov	r3, r4
 800055c:	80fb      	strh	r3, [r7, #6]
 800055e:	4603      	mov	r3, r0
 8000560:	80bb      	strh	r3, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
 8000566:	4613      	mov	r3, r2
 8000568:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800056a:	202a      	movs	r0, #42	; 0x2a
 800056c:	f7ff feb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff febe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff feb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4413      	add	r3, r2
 800058e:	3b01      	subs	r3, #1
 8000590:	121b      	asrs	r3, r3, #8
 8000592:	b29b      	uxth	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff feaf 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	4413      	add	r3, r2
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fea4 	bl	80002f8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80005b0:	202b      	movs	r0, #43	; 0x2b
 80005b2:	f7ff fe93 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe9b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe95 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	883b      	ldrh	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	121b      	asrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe8c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005e0:	88ba      	ldrh	r2, [r7, #4]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe81 	bl	80002f8 <LCD_Write_Data>
	
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800060e:	202c      	movs	r0, #44	; 0x2c
 8000610:	f7ff fe64 	bl	80002dc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e006      	b.n	8000628 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe6b 	bl	80002f8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f4      	bcc.n	800061a <LCD_FillColor+0x1c>
		
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	f7ff ff74 	bl	800054c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	883a      	ldrh	r2, [r7, #0]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	8b3b      	ldrh	r3, [r7, #24]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff ffc3 	bl	80005fe <LCD_FillColor>
	
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <LCD_DrawChar>:
	
	
}   

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor, uint16_t size )
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	4604      	mov	r4, r0
 8000688:	4608      	mov	r0, r1
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	4623      	mov	r3, r4
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	4603      	mov	r3, r0
 8000694:	80bb      	strh	r3, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	70fb      	strb	r3, [r7, #3]
 800069a:	4613      	mov	r3, r2
 800069c:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn, i, j;


	ucRelativePositon = cChar - ' ';
 800069e:	78fb      	ldrb	r3, [r7, #3]
 80006a0:	3b20      	subs	r3, #32
 80006a2:	72bb      	strb	r3, [r7, #10]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR*size, HEIGHT_EN_CHAR*size);
 80006a4:	8c3b      	ldrh	r3, [r7, #32]
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	8c3b      	ldrh	r3, [r7, #32]
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	88b9      	ldrh	r1, [r7, #4]
 80006b2:	88f8      	ldrh	r0, [r7, #6]
 80006b4:	f7ff ff4a 	bl	800054c <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 80006b8:	202c      	movs	r0, #44	; 0x2c
 80006ba:	f7ff fe0f 	bl	80002dc <LCD_Write_Cmd>

	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006be:	2300      	movs	r3, #0
 80006c0:	73bb      	strb	r3, [r7, #14]
 80006c2:	e040      	b.n	8000746 <LCD_DrawChar+0xc6>
	{
		for ( i = 0; i < size; i ++){
 80006c4:	2300      	movs	r3, #0
 80006c6:	733b      	strb	r3, [r7, #12]
 80006c8:	e035      	b.n	8000736 <LCD_DrawChar+0xb6>
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80006ca:	7aba      	ldrb	r2, [r7, #10]
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
 80006ce:	4922      	ldr	r1, [pc, #136]	; (8000758 <LCD_DrawChar+0xd8>)
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	440a      	add	r2, r1
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	73fb      	strb	r3, [r7, #15]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006da:	2300      	movs	r3, #0
 80006dc:	737b      	strb	r3, [r7, #13]
 80006de:	e021      	b.n	8000724 <LCD_DrawChar+0xa4>
		{
			for ( j = 0; j < size; j ++){
 80006e0:	2300      	movs	r3, #0
 80006e2:	72fb      	strb	r3, [r7, #11]
 80006e4:	e013      	b.n	800070e <LCD_DrawChar+0x8e>
			if ( ucTemp & 0x01 )
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d004      	beq.n	80006fa <LCD_DrawChar+0x7a>
				LCD_Write_Data ( usColor );
 80006f0:	883b      	ldrh	r3, [r7, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fe00 	bl	80002f8 <LCD_Write_Data>
 80006f8:	e003      	b.n	8000702 <LCD_DrawChar+0x82>

			else
				LCD_Write_Data (  0xFFFF );
 80006fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006fe:	f7ff fdfb 	bl	80002f8 <LCD_Write_Data>
			usC++;
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	3301      	adds	r3, #1
 8000706:	80fb      	strh	r3, [r7, #6]
			for ( j = 0; j < size; j ++){
 8000708:	7afb      	ldrb	r3, [r7, #11]
 800070a:	3301      	adds	r3, #1
 800070c:	72fb      	strb	r3, [r7, #11]
 800070e:	7afb      	ldrb	r3, [r7, #11]
 8000710:	b29b      	uxth	r3, r3
 8000712:	8c3a      	ldrh	r2, [r7, #32]
 8000714:	429a      	cmp	r2, r3
 8000716:	d8e6      	bhi.n	80006e6 <LCD_DrawChar+0x66>
			}
			ucTemp >>= 1;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	085b      	lsrs	r3, r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800071e:	7b7b      	ldrb	r3, [r7, #13]
 8000720:	3301      	adds	r3, #1
 8000722:	737b      	strb	r3, [r7, #13]
 8000724:	7b7b      	ldrb	r3, [r7, #13]
 8000726:	2b07      	cmp	r3, #7
 8000728:	d9da      	bls.n	80006e0 <LCD_DrawChar+0x60>

		}
		usP++;
 800072a:	88bb      	ldrh	r3, [r7, #4]
 800072c:	3301      	adds	r3, #1
 800072e:	80bb      	strh	r3, [r7, #4]
		for ( i = 0; i < size; i ++){
 8000730:	7b3b      	ldrb	r3, [r7, #12]
 8000732:	3301      	adds	r3, #1
 8000734:	733b      	strb	r3, [r7, #12]
 8000736:	7b3b      	ldrb	r3, [r7, #12]
 8000738:	b29b      	uxth	r3, r3
 800073a:	8c3a      	ldrh	r2, [r7, #32]
 800073c:	429a      	cmp	r2, r3
 800073e:	d8c4      	bhi.n	80006ca <LCD_DrawChar+0x4a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000740:	7bbb      	ldrb	r3, [r7, #14]
 8000742:	3301      	adds	r3, #1
 8000744:	73bb      	strb	r3, [r7, #14]
 8000746:	7bbb      	ldrb	r3, [r7, #14]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d9bb      	bls.n	80006c4 <LCD_DrawChar+0x44>
		}
	}

}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bd90      	pop	{r4, r7, pc}
 8000756:	bf00      	nop
 8000758:	08005b44 	.word	0x08005b44

0800075c <LCD_DrawNote>:
void LCD_DrawNote ( uint16_t usC, uint16_t usP, uint8_t ucRelativePositon, uint16_t usColor, uint16_t size )
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	4604      	mov	r4, r0
 8000764:	4608      	mov	r0, r1
 8000766:	4611      	mov	r1, r2
 8000768:	461a      	mov	r2, r3
 800076a:	4623      	mov	r3, r4
 800076c:	80fb      	strh	r3, [r7, #6]
 800076e:	4603      	mov	r3, r0
 8000770:	80bb      	strh	r3, [r7, #4]
 8000772:	460b      	mov	r3, r1
 8000774:	70fb      	strb	r3, [r7, #3]
 8000776:	4613      	mov	r3, r2
 8000778:	803b      	strh	r3, [r7, #0]
    uint8_t ulTemp; // 8-bit variable to hold one byte of row data
    uint8_t ucPage, ucColumn, byteIndex, i, j;

    // Open the window on the LCD to draw the character
    LCD_OpenWindow(usC, usP, 32 * size, 16 * size);
 800077a:	8c3b      	ldrh	r3, [r7, #32]
 800077c:	015b      	lsls	r3, r3, #5
 800077e:	b29a      	uxth	r2, r3
 8000780:	8c3b      	ldrh	r3, [r7, #32]
 8000782:	011b      	lsls	r3, r3, #4
 8000784:	b29b      	uxth	r3, r3
 8000786:	88b9      	ldrh	r1, [r7, #4]
 8000788:	88f8      	ldrh	r0, [r7, #6]
 800078a:	f7ff fedf 	bl	800054c <LCD_OpenWindow>

    // Send the command to begin setting pixels
    LCD_Write_Cmd(CMD_SetPixel);
 800078e:	202c      	movs	r0, #44	; 0x2c
 8000790:	f7ff fda4 	bl	80002dc <LCD_Write_Cmd>

    // Loop through each row of the character (16 rows total for a 16x32 character)
    for (ucPage = 0; ucPage < 16; ucPage++)
 8000794:	2300      	movs	r3, #0
 8000796:	73bb      	strb	r3, [r7, #14]
 8000798:	e04b      	b.n	8000832 <LCD_DrawNote+0xd6>
    {
        // Repeat the row `size` times for scaling
        for (i = 0; i < size; i++)
 800079a:	2300      	movs	r3, #0
 800079c:	72fb      	strb	r3, [r7, #11]
 800079e:	e040      	b.n	8000822 <LCD_DrawNote+0xc6>
        {
            // Loop through each byte of the current row (4 bytes per row for 32 columns)
            for (byteIndex = 0; byteIndex < 4; byteIndex++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	733b      	strb	r3, [r7, #12]
 80007a4:	e034      	b.n	8000810 <LCD_DrawNote+0xb4>
            {
                // Get the current byte of the row
                ulTemp = notepattern[ucRelativePositon][ucPage * 4 + byteIndex];
 80007a6:	78fa      	ldrb	r2, [r7, #3]
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	0099      	lsls	r1, r3, #2
 80007ac:	7b3b      	ldrb	r3, [r7, #12]
 80007ae:	440b      	add	r3, r1
 80007b0:	4924      	ldr	r1, [pc, #144]	; (8000844 <LCD_DrawNote+0xe8>)
 80007b2:	0192      	lsls	r2, r2, #6
 80007b4:	440a      	add	r2, r1
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	73fb      	strb	r3, [r7, #15]

                // Process each bit in the byte (8 bits per byte)
                for (ucColumn = 0; ucColumn < 8; ucColumn++)
 80007bc:	2300      	movs	r3, #0
 80007be:	737b      	strb	r3, [r7, #13]
 80007c0:	e020      	b.n	8000804 <LCD_DrawNote+0xa8>
                {
                    // Repeat each pixel `size` times for scaling
                    for (j = 0; j < size; j++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	72bb      	strb	r3, [r7, #10]
 80007c6:	e012      	b.n	80007ee <LCD_DrawNote+0x92>
                    {
                        // Check if the current bit is set (pixel is part of the character)
                        if (ulTemp & 0x80) // Check the most significant bit
 80007c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	da04      	bge.n	80007da <LCD_DrawNote+0x7e>
                            LCD_Write_Data(usColor); // Draw the character pixel in the specified color
 80007d0:	883b      	ldrh	r3, [r7, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fd90 	bl	80002f8 <LCD_Write_Data>
 80007d8:	e003      	b.n	80007e2 <LCD_DrawNote+0x86>
                        else
                            LCD_Write_Data(0xFFFF); // Draw the background pixel (white)
 80007da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007de:	f7ff fd8b 	bl	80002f8 <LCD_Write_Data>

                        usC++; // Move to the next column
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	3301      	adds	r3, #1
 80007e6:	80fb      	strh	r3, [r7, #6]
                    for (j = 0; j < size; j++)
 80007e8:	7abb      	ldrb	r3, [r7, #10]
 80007ea:	3301      	adds	r3, #1
 80007ec:	72bb      	strb	r3, [r7, #10]
 80007ee:	7abb      	ldrb	r3, [r7, #10]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	8c3a      	ldrh	r2, [r7, #32]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d8e7      	bhi.n	80007c8 <LCD_DrawNote+0x6c>
                    }

                    // Shift the byte to the left by 1 bit to process the next pixel
                    ulTemp <<= 1;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]
                for (ucColumn = 0; ucColumn < 8; ucColumn++)
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	3301      	adds	r3, #1
 8000802:	737b      	strb	r3, [r7, #13]
 8000804:	7b7b      	ldrb	r3, [r7, #13]
 8000806:	2b07      	cmp	r3, #7
 8000808:	d9db      	bls.n	80007c2 <LCD_DrawNote+0x66>
            for (byteIndex = 0; byteIndex < 4; byteIndex++)
 800080a:	7b3b      	ldrb	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	733b      	strb	r3, [r7, #12]
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	2b03      	cmp	r3, #3
 8000814:	d9c7      	bls.n	80007a6 <LCD_DrawNote+0x4a>
                }
            }
            usP++; // Move to the next row
 8000816:	88bb      	ldrh	r3, [r7, #4]
 8000818:	3301      	adds	r3, #1
 800081a:	80bb      	strh	r3, [r7, #4]
        for (i = 0; i < size; i++)
 800081c:	7afb      	ldrb	r3, [r7, #11]
 800081e:	3301      	adds	r3, #1
 8000820:	72fb      	strb	r3, [r7, #11]
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	b29b      	uxth	r3, r3
 8000826:	8c3a      	ldrh	r2, [r7, #32]
 8000828:	429a      	cmp	r2, r3
 800082a:	d8b9      	bhi.n	80007a0 <LCD_DrawNote+0x44>
    for (ucPage = 0; ucPage < 16; ucPage++)
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	3301      	adds	r3, #1
 8000830:	73bb      	strb	r3, [r7, #14]
 8000832:	7bbb      	ldrb	r3, [r7, #14]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d9b0      	bls.n	800079a <LCD_DrawNote+0x3e>
        }
    }
}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	bf00      	nop
 8000844:	08006144 	.word	0x08006144

08000848 <LCD_DrawBlank>:
void LCD_DrawBlank ( uint16_t usC, uint16_t usP, uint16_t L, uint16_t H, uint16_t usColor)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	4604      	mov	r4, r0
 8000850:	4608      	mov	r0, r1
 8000852:	4611      	mov	r1, r2
 8000854:	461a      	mov	r2, r3
 8000856:	4623      	mov	r3, r4
 8000858:	80fb      	strh	r3, [r7, #6]
 800085a:	4603      	mov	r3, r0
 800085c:	80bb      	strh	r3, [r7, #4]
 800085e:	460b      	mov	r3, r1
 8000860:	807b      	strh	r3, [r7, #2]
 8000862:	4613      	mov	r3, r2
 8000864:	803b      	strh	r3, [r7, #0]
	uint8_t ucPage, ucColumn;

	LCD_OpenWindow ( usC, usP, L, H);
 8000866:	883b      	ldrh	r3, [r7, #0]
 8000868:	887a      	ldrh	r2, [r7, #2]
 800086a:	88b9      	ldrh	r1, [r7, #4]
 800086c:	88f8      	ldrh	r0, [r7, #6]
 800086e:	f7ff fe6d 	bl	800054c <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 8000872:	202c      	movs	r0, #44	; 0x2c
 8000874:	f7ff fd32 	bl	80002dc <LCD_Write_Cmd>

	for ( ucPage = 0; ucPage < H; ucPage ++ )
 8000878:	2300      	movs	r3, #0
 800087a:	73fb      	strb	r3, [r7, #15]
 800087c:	e011      	b.n	80008a2 <LCD_DrawBlank+0x5a>
	{
		for ( ucColumn = 0; ucColumn < L; ucColumn ++ )
 800087e:	2300      	movs	r3, #0
 8000880:	73bb      	strb	r3, [r7, #14]
 8000882:	e006      	b.n	8000892 <LCD_DrawBlank+0x4a>
		{
			LCD_Write_Data ( usColor );
 8000884:	8c3b      	ldrh	r3, [r7, #32]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fd36 	bl	80002f8 <LCD_Write_Data>
		for ( ucColumn = 0; ucColumn < L; ucColumn ++ )
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	3301      	adds	r3, #1
 8000890:	73bb      	strb	r3, [r7, #14]
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	b29b      	uxth	r3, r3
 8000896:	887a      	ldrh	r2, [r7, #2]
 8000898:	429a      	cmp	r2, r3
 800089a:	d8f3      	bhi.n	8000884 <LCD_DrawBlank+0x3c>
	for ( ucPage = 0; ucPage < H; ucPage ++ )
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	3301      	adds	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	883a      	ldrh	r2, [r7, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d8e8      	bhi.n	800087e <LCD_DrawBlank+0x36>
		}
	}
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd90      	pop	{r4, r7, pc}

080008b6 <LCD_DrawString>:
void LCD_DrawString(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor, uint16_t size) {
 80008b6:	b590      	push	{r4, r7, lr}
 80008b8:	b087      	sub	sp, #28
 80008ba:	af02      	add	r7, sp, #8
 80008bc:	60ba      	str	r2, [r7, #8]
 80008be:	461a      	mov	r2, r3
 80008c0:	4603      	mov	r3, r0
 80008c2:	81fb      	strh	r3, [r7, #14]
 80008c4:	460b      	mov	r3, r1
 80008c6:	81bb      	strh	r3, [r7, #12]
 80008c8:	4613      	mov	r3, r2
 80008ca:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80008cc:	e025      	b.n	800091a <LCD_DrawString+0x64>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80008ce:	89fb      	ldrh	r3, [r7, #14]
 80008d0:	2be8      	cmp	r3, #232	; 0xe8
 80008d2:	d907      	bls.n	80008e4 <LCD_DrawString+0x2e>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80008d4:	2300      	movs	r3, #0
 80008d6:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR*size;
 80008d8:	8c3b      	ldrh	r3, [r7, #32]
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	b29a      	uxth	r2, r3
 80008de:	89bb      	ldrh	r3, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	81bb      	strh	r3, [r7, #12]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80008e4:	89bb      	ldrh	r3, [r7, #12]
 80008e6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80008ea:	d903      	bls.n	80008f4 <LCD_DrawString+0x3e>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80008ec:	2300      	movs	r3, #0
 80008ee:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	81bb      	strh	r3, [r7, #12]
		}

		LCD_DrawChar ( usC, usP, * pStr, usColor, size );
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	88fc      	ldrh	r4, [r7, #6]
 80008fa:	89b9      	ldrh	r1, [r7, #12]
 80008fc:	89f8      	ldrh	r0, [r7, #14]
 80008fe:	8c3b      	ldrh	r3, [r7, #32]
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	4623      	mov	r3, r4
 8000904:	f7ff febc 	bl	8000680 <LCD_DrawChar>

		pStr ++;
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	3301      	adds	r3, #1
 800090c:	60bb      	str	r3, [r7, #8]

		usC += WIDTH_EN_CHAR*size;
 800090e:	8c3b      	ldrh	r3, [r7, #32]
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	b29a      	uxth	r2, r3
 8000914:	89fb      	ldrh	r3, [r7, #14]
 8000916:	4413      	add	r3, r2
 8000918:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1d5      	bne.n	80008ce <LCD_DrawString+0x18>

	}
}
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bd90      	pop	{r4, r7, pc}

0800092c <Userface1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Userface1()
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af02      	add	r7, sp, #8
	LCD_Clear ( 0, 0, 240, 360, WHITE );
 8000932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800093c:	22f0      	movs	r2, #240	; 0xf0
 800093e:	2100      	movs	r1, #0
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fe7a 	bl	800063a <LCD_Clear>
	LCD_DrawString(32,12,"SELECT YOUR",BLUE,2);	//Userface 1
 8000946:	2302      	movs	r3, #2
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	231f      	movs	r3, #31
 800094c:	4a41      	ldr	r2, [pc, #260]	; (8000a54 <Userface1+0x128>)
 800094e:	210c      	movs	r1, #12
 8000950:	2020      	movs	r0, #32
 8000952:	f7ff ffb0 	bl	80008b6 <LCD_DrawString>
	LCD_DrawString(88,44,"MODE",BLUE,2);
 8000956:	2302      	movs	r3, #2
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	231f      	movs	r3, #31
 800095c:	4a3e      	ldr	r2, [pc, #248]	; (8000a58 <Userface1+0x12c>)
 800095e:	212c      	movs	r1, #44	; 0x2c
 8000960:	2058      	movs	r0, #88	; 0x58
 8000962:	f7ff ffa8 	bl	80008b6 <LCD_DrawString>
	LCD_DrawString(16,96,"1 Traditional    mode",BLUE,2);
 8000966:	2302      	movs	r3, #2
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	231f      	movs	r3, #31
 800096c:	4a3b      	ldr	r2, [pc, #236]	; (8000a5c <Userface1+0x130>)
 800096e:	2160      	movs	r1, #96	; 0x60
 8000970:	2010      	movs	r0, #16
 8000972:	f7ff ffa0 	bl	80008b6 <LCD_DrawString>
	LCD_DrawString(16,160,"2 Human voice    mode",BLUE,2);
 8000976:	2302      	movs	r3, #2
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	231f      	movs	r3, #31
 800097c:	4a38      	ldr	r2, [pc, #224]	; (8000a60 <Userface1+0x134>)
 800097e:	21a0      	movs	r1, #160	; 0xa0
 8000980:	2010      	movs	r0, #16
 8000982:	f7ff ff98 	bl	80008b6 <LCD_DrawString>
	LCD_DrawString(16,224,"3 Training       mode",BLUE,2);
 8000986:	2302      	movs	r3, #2
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	231f      	movs	r3, #31
 800098c:	4a35      	ldr	r2, [pc, #212]	; (8000a64 <Userface1+0x138>)
 800098e:	21e0      	movs	r1, #224	; 0xe0
 8000990:	2010      	movs	r0, #16
 8000992:	f7ff ff90 	bl	80008b6 <LCD_DrawString>
	while(!exitUserface)
 8000996:	e054      	b.n	8000a42 <Userface1+0x116>
	{
		switch(mode){
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <Userface1+0x13c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d038      	beq.n	8000a12 <Userface1+0xe6>
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	dc4e      	bgt.n	8000a42 <Userface1+0x116>
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <Userface1+0x82>
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d019      	beq.n	80009e0 <Userface1+0xb4>
 80009ac:	e049      	b.n	8000a42 <Userface1+0x116>
			case 0:
				LCD_DrawString(0,96,">",BLUE,2);
 80009ae:	2302      	movs	r3, #2
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	231f      	movs	r3, #31
 80009b4:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <Userface1+0x140>)
 80009b6:	2160      	movs	r1, #96	; 0x60
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff ff7c 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,160," ",BLUE,2);
 80009be:	2302      	movs	r3, #2
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	231f      	movs	r3, #31
 80009c4:	4a2a      	ldr	r2, [pc, #168]	; (8000a70 <Userface1+0x144>)
 80009c6:	21a0      	movs	r1, #160	; 0xa0
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff74 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,224," ",BLUE,2);
 80009ce:	2302      	movs	r3, #2
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	231f      	movs	r3, #31
 80009d4:	4a26      	ldr	r2, [pc, #152]	; (8000a70 <Userface1+0x144>)
 80009d6:	21e0      	movs	r1, #224	; 0xe0
 80009d8:	2000      	movs	r0, #0
 80009da:	f7ff ff6c 	bl	80008b6 <LCD_DrawString>
				break;
 80009de:	e030      	b.n	8000a42 <Userface1+0x116>
			case 1:
				LCD_DrawString(0,96," ",BLUE,2);
 80009e0:	2302      	movs	r3, #2
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	231f      	movs	r3, #31
 80009e6:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <Userface1+0x144>)
 80009e8:	2160      	movs	r1, #96	; 0x60
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff ff63 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,160,">",BLUE,2);
 80009f0:	2302      	movs	r3, #2
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	231f      	movs	r3, #31
 80009f6:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <Userface1+0x140>)
 80009f8:	21a0      	movs	r1, #160	; 0xa0
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff ff5b 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,224," ",BLUE,2);
 8000a00:	2302      	movs	r3, #2
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	231f      	movs	r3, #31
 8000a06:	4a1a      	ldr	r2, [pc, #104]	; (8000a70 <Userface1+0x144>)
 8000a08:	21e0      	movs	r1, #224	; 0xe0
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff ff53 	bl	80008b6 <LCD_DrawString>
				break;
 8000a10:	e017      	b.n	8000a42 <Userface1+0x116>
			case 2:
				LCD_DrawString(0,96," ",BLUE,2);
 8000a12:	2302      	movs	r3, #2
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	231f      	movs	r3, #31
 8000a18:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <Userface1+0x144>)
 8000a1a:	2160      	movs	r1, #96	; 0x60
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff ff4a 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,160," ",BLUE,2);
 8000a22:	2302      	movs	r3, #2
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	231f      	movs	r3, #31
 8000a28:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <Userface1+0x144>)
 8000a2a:	21a0      	movs	r1, #160	; 0xa0
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff ff42 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,224,">",BLUE,2);
 8000a32:	2302      	movs	r3, #2
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	231f      	movs	r3, #31
 8000a38:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <Userface1+0x140>)
 8000a3a:	21e0      	movs	r1, #224	; 0xe0
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff ff3a 	bl	80008b6 <LCD_DrawString>
	while(!exitUserface)
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <Userface1+0x148>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0a6      	beq.n	8000998 <Userface1+0x6c>
		}
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	080059b4 	.word	0x080059b4
 8000a58:	080059c0 	.word	0x080059c0
 8000a5c:	080059c8 	.word	0x080059c8
 8000a60:	080059e0 	.word	0x080059e0
 8000a64:	080059f8 	.word	0x080059f8
 8000a68:	20000091 	.word	0x20000091
 8000a6c:	08005a10 	.word	0x08005a10
 8000a70:	08005a14 	.word	0x08005a14
 8000a74:	20000090 	.word	0x20000090

08000a78 <displaybpm>:
void displaybpm(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af02      	add	r7, sp, #8
	char buffer[4];
	sprintf(buffer, "%03d", BPM);
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <displaybpm+0x30>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4909      	ldr	r1, [pc, #36]	; (8000aac <displaybpm+0x34>)
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 fda7 	bl	80045dc <siprintf>
	LCD_DrawString(0,160, buffer,BLUE,10);
 8000a8e:	1d3a      	adds	r2, r7, #4
 8000a90:	230a      	movs	r3, #10
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	231f      	movs	r3, #31
 8000a96:	21a0      	movs	r1, #160	; 0xa0
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ff0c 	bl	80008b6 <LCD_DrawString>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	08005a18 	.word	0x08005a18

08000ab0 <Userface3>:
void Userface3(){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af02      	add	r7, sp, #8
	uint16_t tempbpm = BPM;
 8000ab6:	4b69      	ldr	r3, [pc, #420]	; (8000c5c <Userface3+0x1ac>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	80fb      	strh	r3, [r7, #6]
	uint8_t tempdigit = digit;
 8000abc:	4b68      	ldr	r3, [pc, #416]	; (8000c60 <Userface3+0x1b0>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	717b      	strb	r3, [r7, #5]
	LCD_Clear ( 0, 0, 240, 360, WHITE );
 8000ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000acc:	22f0      	movs	r2, #240	; 0xf0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fdb2 	bl	800063a <LCD_Clear>
	LCD_DrawString(48,16,"SELECT",BLUE,3);	//Userface 3
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	231f      	movs	r3, #31
 8000adc:	4a61      	ldr	r2, [pc, #388]	; (8000c64 <Userface3+0x1b4>)
 8000ade:	2110      	movs	r1, #16
 8000ae0:	2030      	movs	r0, #48	; 0x30
 8000ae2:	f7ff fee8 	bl	80008b6 <LCD_DrawString>
	LCD_DrawString(24,64,"YOUR BPM",BLUE,3);
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	231f      	movs	r3, #31
 8000aec:	4a5e      	ldr	r2, [pc, #376]	; (8000c68 <Userface3+0x1b8>)
 8000aee:	2140      	movs	r1, #64	; 0x40
 8000af0:	2018      	movs	r0, #24
 8000af2:	f7ff fee0 	bl	80008b6 <LCD_DrawString>
	if(mode!=2){
 8000af6:	4b5d      	ldr	r3, [pc, #372]	; (8000c6c <Userface3+0x1bc>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d04e      	beq.n	8000b9c <Userface3+0xec>
		switch(note){
 8000afe:	4b5c      	ldr	r3, [pc, #368]	; (8000c70 <Userface3+0x1c0>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d034      	beq.n	8000b70 <Userface3+0xc0>
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	dc48      	bgt.n	8000b9c <Userface3+0xec>
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d002      	beq.n	8000b14 <Userface3+0x64>
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d017      	beq.n	8000b42 <Userface3+0x92>
 8000b12:	e043      	b.n	8000b9c <Userface3+0xec>
		case 0:
			if(err == 0) LCD_DrawString(24,112,"(10-260)",BLUE,3);
 8000b14:	4b57      	ldr	r3, [pc, #348]	; (8000c74 <Userface3+0x1c4>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d108      	bne.n	8000b2e <Userface3+0x7e>
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	231f      	movs	r3, #31
 8000b22:	4a55      	ldr	r2, [pc, #340]	; (8000c78 <Userface3+0x1c8>)
 8000b24:	2170      	movs	r1, #112	; 0x70
 8000b26:	2018      	movs	r0, #24
 8000b28:	f7ff fec5 	bl	80008b6 <LCD_DrawString>
			else LCD_DrawString(24,112,"(10-260)",RED,3);
			break;
 8000b2c:	e036      	b.n	8000b9c <Userface3+0xec>
			else LCD_DrawString(24,112,"(10-260)",RED,3);
 8000b2e:	2303      	movs	r3, #3
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b36:	4a50      	ldr	r2, [pc, #320]	; (8000c78 <Userface3+0x1c8>)
 8000b38:	2170      	movs	r1, #112	; 0x70
 8000b3a:	2018      	movs	r0, #24
 8000b3c:	f7ff febb 	bl	80008b6 <LCD_DrawString>
			break;
 8000b40:	e02c      	b.n	8000b9c <Userface3+0xec>
		case 1:
			if(err == 0) LCD_DrawString(24,112,"(10-130)",BLUE,3);
 8000b42:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <Userface3+0x1c4>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d108      	bne.n	8000b5c <Userface3+0xac>
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	231f      	movs	r3, #31
 8000b50:	4a4a      	ldr	r2, [pc, #296]	; (8000c7c <Userface3+0x1cc>)
 8000b52:	2170      	movs	r1, #112	; 0x70
 8000b54:	2018      	movs	r0, #24
 8000b56:	f7ff feae 	bl	80008b6 <LCD_DrawString>
			else LCD_DrawString(24,112,"(10-130)",RED,3);
			break;
 8000b5a:	e01f      	b.n	8000b9c <Userface3+0xec>
			else LCD_DrawString(24,112,"(10-130)",RED,3);
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b64:	4a45      	ldr	r2, [pc, #276]	; (8000c7c <Userface3+0x1cc>)
 8000b66:	2170      	movs	r1, #112	; 0x70
 8000b68:	2018      	movs	r0, #24
 8000b6a:	f7ff fea4 	bl	80008b6 <LCD_DrawString>
			break;
 8000b6e:	e015      	b.n	8000b9c <Userface3+0xec>
		case 2:
			if(err ==0) LCD_DrawString(36,112,"(10-65)",BLUE,3);
 8000b70:	4b40      	ldr	r3, [pc, #256]	; (8000c74 <Userface3+0x1c4>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d108      	bne.n	8000b8a <Userface3+0xda>
 8000b78:	2303      	movs	r3, #3
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	231f      	movs	r3, #31
 8000b7e:	4a40      	ldr	r2, [pc, #256]	; (8000c80 <Userface3+0x1d0>)
 8000b80:	2170      	movs	r1, #112	; 0x70
 8000b82:	2024      	movs	r0, #36	; 0x24
 8000b84:	f7ff fe97 	bl	80008b6 <LCD_DrawString>
 8000b88:	e008      	b.n	8000b9c <Userface3+0xec>
			else LCD_DrawString(36,112,"(10-65)",RED,3);
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b92:	4a3b      	ldr	r2, [pc, #236]	; (8000c80 <Userface3+0x1d0>)
 8000b94:	2170      	movs	r1, #112	; 0x70
 8000b96:	2024      	movs	r0, #36	; 0x24
 8000b98:	f7ff fe8d 	bl	80008b6 <LCD_DrawString>
		}
	}
	if(mode == 2){
 8000b9c:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <Userface3+0x1bc>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d115      	bne.n	8000bd0 <Userface3+0x120>
		if(err == 0) LCD_DrawString(24,112,"(60-256)",BLUE,3);
 8000ba4:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <Userface3+0x1c4>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d108      	bne.n	8000bbe <Userface3+0x10e>
 8000bac:	2303      	movs	r3, #3
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	231f      	movs	r3, #31
 8000bb2:	4a34      	ldr	r2, [pc, #208]	; (8000c84 <Userface3+0x1d4>)
 8000bb4:	2170      	movs	r1, #112	; 0x70
 8000bb6:	2018      	movs	r0, #24
 8000bb8:	f7ff fe7d 	bl	80008b6 <LCD_DrawString>
 8000bbc:	e008      	b.n	8000bd0 <Userface3+0x120>
		else LCD_DrawString(24,112,"(60-256)",RED,3);
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bc6:	4a2f      	ldr	r2, [pc, #188]	; (8000c84 <Userface3+0x1d4>)
 8000bc8:	2170      	movs	r1, #112	; 0x70
 8000bca:	2018      	movs	r0, #24
 8000bcc:	f7ff fe73 	bl	80008b6 <LCD_DrawString>
	}
	err = 0;
 8000bd0:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <Userface3+0x1c4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
	displaybpm();
 8000bd6:	f7ff ff4f 	bl	8000a78 <displaybpm>
	while (!exitUserface){
 8000bda:	e035      	b.n	8000c48 <Userface3+0x198>
		if(BPM != tempbpm){
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <Userface3+0x1ac>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	88fa      	ldrh	r2, [r7, #6]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <Userface3+0x140>
			tempbpm = BPM;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <Userface3+0x1ac>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	80fb      	strh	r3, [r7, #6]
			displaybpm();
 8000bec:	f7ff ff44 	bl	8000a78 <displaybpm>
		}
		if(digit != tempdigit){
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <Userface3+0x1b0>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	797a      	ldrb	r2, [r7, #5]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d014      	beq.n	8000c24 <Userface3+0x174>
			LCD_DrawBlank(80*tempdigit+10,290,60,10,WHITE);
 8000bfa:	797b      	ldrb	r3, [r7, #5]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	011b      	lsls	r3, r3, #4
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	330a      	adds	r3, #10
 8000c0a:	b298      	uxth	r0, r3
 8000c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	230a      	movs	r3, #10
 8000c14:	223c      	movs	r2, #60	; 0x3c
 8000c16:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000c1a:	f7ff fe15 	bl	8000848 <LCD_DrawBlank>
			tempdigit = digit;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <Userface3+0x1b0>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	717b      	strb	r3, [r7, #5]
		}
		LCD_DrawBlank(80*digit+10,290,60,10,BLUE);
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <Userface3+0x1b0>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	0092      	lsls	r2, r2, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	330a      	adds	r3, #10
 8000c36:	b298      	uxth	r0, r3
 8000c38:	231f      	movs	r3, #31
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	223c      	movs	r2, #60	; 0x3c
 8000c40:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000c44:	f7ff fe00 	bl	8000848 <LCD_DrawBlank>
	while (!exitUserface){
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <Userface3+0x1d8>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0c5      	beq.n	8000bdc <Userface3+0x12c>
	}
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000094 	.word	0x20000094
 8000c64:	08005a20 	.word	0x08005a20
 8000c68:	08005a28 	.word	0x08005a28
 8000c6c:	20000091 	.word	0x20000091
 8000c70:	20000095 	.word	0x20000095
 8000c74:	20000096 	.word	0x20000096
 8000c78:	08005a34 	.word	0x08005a34
 8000c7c:	08005a40 	.word	0x08005a40
 8000c80:	08005a4c 	.word	0x08005a4c
 8000c84:	08005a54 	.word	0x08005a54
 8000c88:	20000090 	.word	0x20000090

08000c8c <Userface2>:
void Userface2()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af02      	add	r7, sp, #8
	LCD_Clear ( 0, 0, 240, 360, WHITE );
 8000c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000c9c:	22f0      	movs	r2, #240	; 0xf0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff fcca 	bl	800063a <LCD_Clear>
	LCD_DrawString(32,12,"SELECT YOUR",BLUE,2);	//Userface 2
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	231f      	movs	r3, #31
 8000cac:	4a41      	ldr	r2, [pc, #260]	; (8000db4 <Userface2+0x128>)
 8000cae:	210c      	movs	r1, #12
 8000cb0:	2020      	movs	r0, #32
 8000cb2:	f7ff fe00 	bl	80008b6 <LCD_DrawString>
	LCD_DrawString(40,44,"BASIC NOTE",BLUE,2);
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	231f      	movs	r3, #31
 8000cbc:	4a3e      	ldr	r2, [pc, #248]	; (8000db8 <Userface2+0x12c>)
 8000cbe:	212c      	movs	r1, #44	; 0x2c
 8000cc0:	2028      	movs	r0, #40	; 0x28
 8000cc2:	f7ff fdf8 	bl	80008b6 <LCD_DrawString>
	LCD_DrawString(16,96,"1 4th note       mode",BLUE,2);
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	231f      	movs	r3, #31
 8000ccc:	4a3b      	ldr	r2, [pc, #236]	; (8000dbc <Userface2+0x130>)
 8000cce:	2160      	movs	r1, #96	; 0x60
 8000cd0:	2010      	movs	r0, #16
 8000cd2:	f7ff fdf0 	bl	80008b6 <LCD_DrawString>
	LCD_DrawString(16,160,"2 8th note       mode",BLUE,2);
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	231f      	movs	r3, #31
 8000cdc:	4a38      	ldr	r2, [pc, #224]	; (8000dc0 <Userface2+0x134>)
 8000cde:	21a0      	movs	r1, #160	; 0xa0
 8000ce0:	2010      	movs	r0, #16
 8000ce2:	f7ff fde8 	bl	80008b6 <LCD_DrawString>
	LCD_DrawString(16,224,"3 16th note      mode",BLUE,2);
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	231f      	movs	r3, #31
 8000cec:	4a35      	ldr	r2, [pc, #212]	; (8000dc4 <Userface2+0x138>)
 8000cee:	21e0      	movs	r1, #224	; 0xe0
 8000cf0:	2010      	movs	r0, #16
 8000cf2:	f7ff fde0 	bl	80008b6 <LCD_DrawString>
	while(!exitUserface)
 8000cf6:	e054      	b.n	8000da2 <Userface2+0x116>
	{
		switch(note){
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <Userface2+0x13c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d038      	beq.n	8000d72 <Userface2+0xe6>
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	dc4e      	bgt.n	8000da2 <Userface2+0x116>
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d002      	beq.n	8000d0e <Userface2+0x82>
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d019      	beq.n	8000d40 <Userface2+0xb4>
 8000d0c:	e049      	b.n	8000da2 <Userface2+0x116>
			case 0:
				LCD_DrawString(0,96,">",BLUE,2);
 8000d0e:	2302      	movs	r3, #2
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	231f      	movs	r3, #31
 8000d14:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <Userface2+0x140>)
 8000d16:	2160      	movs	r1, #96	; 0x60
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fdcc 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,160," ",BLUE,2);
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	231f      	movs	r3, #31
 8000d24:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <Userface2+0x144>)
 8000d26:	21a0      	movs	r1, #160	; 0xa0
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fdc4 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,224," ",BLUE,2);
 8000d2e:	2302      	movs	r3, #2
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	231f      	movs	r3, #31
 8000d34:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <Userface2+0x144>)
 8000d36:	21e0      	movs	r1, #224	; 0xe0
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff fdbc 	bl	80008b6 <LCD_DrawString>
				break;
 8000d3e:	e030      	b.n	8000da2 <Userface2+0x116>
			case 1:
				LCD_DrawString(0,96," ",BLUE,2);
 8000d40:	2302      	movs	r3, #2
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	231f      	movs	r3, #31
 8000d46:	4a22      	ldr	r2, [pc, #136]	; (8000dd0 <Userface2+0x144>)
 8000d48:	2160      	movs	r1, #96	; 0x60
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fdb3 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,160,">",BLUE,2);
 8000d50:	2302      	movs	r3, #2
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	231f      	movs	r3, #31
 8000d56:	4a1d      	ldr	r2, [pc, #116]	; (8000dcc <Userface2+0x140>)
 8000d58:	21a0      	movs	r1, #160	; 0xa0
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fdab 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,224," ",BLUE,2);
 8000d60:	2302      	movs	r3, #2
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	231f      	movs	r3, #31
 8000d66:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <Userface2+0x144>)
 8000d68:	21e0      	movs	r1, #224	; 0xe0
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff fda3 	bl	80008b6 <LCD_DrawString>
				break;
 8000d70:	e017      	b.n	8000da2 <Userface2+0x116>
			case 2:
				LCD_DrawString(0,96," ",BLUE,2);
 8000d72:	2302      	movs	r3, #2
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	231f      	movs	r3, #31
 8000d78:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <Userface2+0x144>)
 8000d7a:	2160      	movs	r1, #96	; 0x60
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff fd9a 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,160," ",BLUE,2);
 8000d82:	2302      	movs	r3, #2
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	231f      	movs	r3, #31
 8000d88:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <Userface2+0x144>)
 8000d8a:	21a0      	movs	r1, #160	; 0xa0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fd92 	bl	80008b6 <LCD_DrawString>
				LCD_DrawString(0,224,">",BLUE,2);
 8000d92:	2302      	movs	r3, #2
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	231f      	movs	r3, #31
 8000d98:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <Userface2+0x140>)
 8000d9a:	21e0      	movs	r1, #224	; 0xe0
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fd8a 	bl	80008b6 <LCD_DrawString>
	while(!exitUserface)
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <Userface2+0x148>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0a6      	beq.n	8000cf8 <Userface2+0x6c>
		}
	}
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	080059b4 	.word	0x080059b4
 8000db8:	08005a60 	.word	0x08005a60
 8000dbc:	08005a6c 	.word	0x08005a6c
 8000dc0:	08005a84 	.word	0x08005a84
 8000dc4:	08005a9c 	.word	0x08005a9c
 8000dc8:	20000095 	.word	0x20000095
 8000dcc:	08005a10 	.word	0x08005a10
 8000dd0:	08005a14 	.word	0x08005a14
 8000dd4:	20000090 	.word	0x20000090

08000dd8 <Userface4>:
void Userface4() {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af02      	add	r7, sp, #8
    LCD_Clear(0, 0, 240, 360, WHITE);
 8000dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000de8:	22f0      	movs	r2, #240	; 0xf0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fc24 	bl	800063a <LCD_Clear>
    numberToShow = 0;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <Userface4+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
    uint16_t psc = 1;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	80fb      	strh	r3, [r7, #6]
    uint8_t i;
    for(i = 0;i< note;i++){
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	717b      	strb	r3, [r7, #5]
 8000e00:	e005      	b.n	8000e0e <Userface4+0x36>
    	psc = 2*psc;
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	80fb      	strh	r3, [r7, #6]
    for(i = 0;i< note;i++){
 8000e08:	797b      	ldrb	r3, [r7, #5]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	717b      	strb	r3, [r7, #5]
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <Userface4+0x9c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	797a      	ldrb	r2, [r7, #5]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d3f4      	bcc.n	8000e02 <Userface4+0x2a>
    }
    arr = 2000*60 / (BPM*psc) - 1;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <Userface4+0xa0>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <Userface4+0xa4>)
 8000e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <Userface4+0xa8>)
 8000e32:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD(&htim3, arr);
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <Userface4+0xa8>)
 8000e36:	881a      	ldrh	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <Userface4+0xac>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <Userface4+0xa8>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <Userface4+0xac>)
 8000e46:	60da      	str	r2, [r3, #12]
//  __HAL_TIM_SET_AUTORELOAD(&htim2, arr/2);
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	//HAL_TIM_Base_Start_IT(&htim4);
	HAL_TIM_Base_Start_IT(&htim3);
 8000e48:	480e      	ldr	r0, [pc, #56]	; (8000e84 <Userface4+0xac>)
 8000e4a:	f002 fb71 	bl	8003530 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_Base_Start_IT(&htim2);
	while(!exitUserface){
 8000e4e:	bf00      	nop
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <Userface4+0xb0>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0fb      	beq.n	8000e50 <Userface4+0x78>
	}
	//HAL_TIM_Base_Stop_IT(&htim4);
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e58:	480a      	ldr	r0, [pc, #40]	; (8000e84 <Userface4+0xac>)
 8000e5a:	f002 fbc9 	bl	80035f0 <HAL_TIM_Base_Stop_IT>
//	HAL_TIM_Base_Stop_IT(&htim2);
	//__HAL_TIM_SET_COUNTER(&htim4, 0);
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <Userface4+0xac>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
//	__HAL_TIM_SET_COUNTER(&htim2, 0);
//	if(toggle == 1){
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
//		toggle = 0;
//	}
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000003 	.word	0x20000003
 8000e74:	20000095 	.word	0x20000095
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	0001d4c0 	.word	0x0001d4c0
 8000e80:	200000ba 	.word	0x200000ba
 8000e84:	20000108 	.word	0x20000108
 8000e88:	20000090 	.word	0x20000090

08000e8c <updatestr>:
void updatestr(uint8_t *str) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    // Shift elements from index 2 to the end of the array
//    for (size_t i = 0; i < 12; i++) {
//        patternstr[i] = patternstr[i + 2];
//    }
	for (size_t i = 0; i < 12; i++){
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	e015      	b.n	8000ec6 <updatestr+0x3a>
		str[i] = rand () % 7;
 8000e9a:	f003 fb61 	bl	8004560 <rand>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <updatestr+0x4c>)
 8000ea2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	1099      	asrs	r1, r3, #2
 8000eaa:	17d3      	asrs	r3, r2, #31
 8000eac:	1ac9      	subs	r1, r1, r3
 8000eae:	460b      	mov	r3, r1
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	1a5b      	subs	r3, r3, r1
 8000eb4:	1ad1      	subs	r1, r2, r3
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	b2ca      	uxtb	r2, r1
 8000ebe:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < 12; i++){
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b0b      	cmp	r3, #11
 8000eca:	d9e6      	bls.n	8000e9a <updatestr+0xe>
	}
    // Fill the last two elements with zeros (or a value of your choice)
//    patternstr[10] = rand() % 7;
//    patternstr[11] = rand() % 7;
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	92492493 	.word	0x92492493

08000edc <DrawNote>:
void DrawNote(uint8_t *str){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0; i < 12; i++){
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e022      	b.n	8000f30 <DrawNote+0x54>
	  LCD_DrawNote(24+(i%2)*96,16+48*(i/2),str[i],BLUE,3);
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	0052      	lsls	r2, r2, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	015b      	lsls	r3, r3, #5
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	3318      	adds	r3, #24
 8000f00:	b298      	uxth	r0, r3
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	085b      	lsrs	r3, r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	0052      	lsls	r2, r2, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	3310      	adds	r3, #16
 8000f16:	b299      	uxth	r1, r3
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	2303      	movs	r3, #3
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	231f      	movs	r3, #31
 8000f26:	f7ff fc19 	bl	800075c <LCD_DrawNote>
	for(i = 0; i < 12; i++){
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b0b      	cmp	r3, #11
 8000f34:	d9d9      	bls.n	8000eea <DrawNote+0xe>
	}
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <DrawUpdateNote>:
void DrawUpdateNote(uint8_t *str, uint8_t i, uint16_t usColor){
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	803b      	strh	r3, [r7, #0]
	uint8_t t = i+1;
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	3301      	adds	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
	for(i = i; i < t; i++){
 8000f56:	e022      	b.n	8000f9e <DrawUpdateNote+0x5e>
	  LCD_DrawNote(24+(i%2)*96,16+48*(i/2),str[i],usColor,3);
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	0052      	lsls	r2, r2, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	015b      	lsls	r3, r3, #5
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	3318      	adds	r3, #24
 8000f6e:	b298      	uxth	r0, r3
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	085b      	lsrs	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	0052      	lsls	r2, r2, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	3310      	adds	r3, #16
 8000f84:	b299      	uxth	r1, r3
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781a      	ldrb	r2, [r3, #0]
 8000f8e:	883b      	ldrh	r3, [r7, #0]
 8000f90:	2403      	movs	r4, #3
 8000f92:	9400      	str	r4, [sp, #0]
 8000f94:	f7ff fbe2 	bl	800075c <LCD_DrawNote>
	for(i = i; i < t; i++){
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	70fb      	strb	r3, [r7, #3]
 8000f9e:	78fa      	ldrb	r2, [r7, #3]
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d3d8      	bcc.n	8000f58 <DrawUpdateNote+0x18>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}

08000fb0 <Userface5>:
void Userface5() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af02      	add	r7, sp, #8
	LCD_Clear(0, 0, 240, 360, WHITE);
 8000fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000fc0:	22f0      	movs	r2, #240	; 0xf0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fb38 	bl	800063a <LCD_Clear>
	uint8_t i; // Get the current time
    unsigned int seed = clock();
 8000fca:	f003 fa55 	bl	8004478 <clock>
 8000fce:	60b8      	str	r0, [r7, #8]

    srand(seed); // Seed the random number generator
 8000fd0:	68b8      	ldr	r0, [r7, #8]
 8000fd2:	f003 fa97 	bl	8004504 <srand>
	for(i = 0; i < 12; i++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e014      	b.n	8001006 <Userface5+0x56>
		patternstr[i] = rand() % 7;
 8000fdc:	f003 fac0 	bl	8004560 <rand>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	4b47      	ldr	r3, [pc, #284]	; (8001100 <Userface5+0x150>)
 8000fe4:	fb83 1302 	smull	r1, r3, r3, r2
 8000fe8:	4413      	add	r3, r2
 8000fea:	1099      	asrs	r1, r3, #2
 8000fec:	17d3      	asrs	r3, r2, #31
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	1a5b      	subs	r3, r3, r1
 8000ff6:	1ad1      	subs	r1, r2, r3
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	b2c9      	uxtb	r1, r1
 8000ffc:	4a41      	ldr	r2, [pc, #260]	; (8001104 <Userface5+0x154>)
 8000ffe:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 12; i++){
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	3301      	adds	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	2b0b      	cmp	r3, #11
 800100a:	d9e7      	bls.n	8000fdc <Userface5+0x2c>
	}
	DrawNote(patternstr);
 800100c:	483d      	ldr	r0, [pc, #244]	; (8001104 <Userface5+0x154>)
 800100e:	f7ff ff65 	bl	8000edc <DrawNote>
    bit = 0;
 8001012:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <Userface5+0x158>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
    bar = 0;
 8001018:	4b3c      	ldr	r3, [pc, #240]	; (800110c <Userface5+0x15c>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
    a = 0;
 800101e:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <Userface5+0x160>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
    b = 0;
 8001024:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <Userface5+0x164>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
    bit2 = 0;
 800102a:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <Userface5+0x168>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
    bar2 = 0;
 8001030:	4b3a      	ldr	r3, [pc, #232]	; (800111c <Userface5+0x16c>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
    a2 = 0;
 8001036:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <Userface5+0x170>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
    b2 = 0;
 800103c:	4b39      	ldr	r3, [pc, #228]	; (8001124 <Userface5+0x174>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
    uint16_t psc = 4;
 8001042:	2304      	movs	r3, #4
 8001044:	80fb      	strh	r3, [r7, #6]
    arr = 2000*60 / (BPM*psc) - 1;
 8001046:	4b38      	ldr	r3, [pc, #224]	; (8001128 <Userface5+0x178>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	fb02 f303 	mul.w	r3, r2, r3
 8001052:	4a36      	ldr	r2, [pc, #216]	; (800112c <Userface5+0x17c>)
 8001054:	fb92 f3f3 	sdiv	r3, r2, r3
 8001058:	b29b      	uxth	r3, r3
 800105a:	3b01      	subs	r3, #1
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b34      	ldr	r3, [pc, #208]	; (8001130 <Userface5+0x180>)
 8001060:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD(&htim3, 1);
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <Userface5+0x184>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2201      	movs	r2, #1
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <Userface5+0x184>)
 800106c:	2201      	movs	r2, #1
 800106e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim2, 1);
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <Userface5+0x188>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2201      	movs	r2, #1
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <Userface5+0x188>)
 800107a:	2201      	movs	r2, #1
 800107c:	60da      	str	r2, [r3, #12]
	//HAL_TIM_Base_Start_IT(&htim4);
    HAL_TIM_Base_Start_IT(&htim2);
 800107e:	482e      	ldr	r0, [pc, #184]	; (8001138 <Userface5+0x188>)
 8001080:	f002 fa56 	bl	8003530 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001084:	482b      	ldr	r0, [pc, #172]	; (8001134 <Userface5+0x184>)
 8001086:	f002 fa53 	bl	8003530 <HAL_TIM_Base_Start_IT>
	while(!exitUserface){
 800108a:	bf00      	nop
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <Userface5+0x18c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0fb      	beq.n	800108c <Userface5+0xdc>
	}
	//HAL_TIM_Base_Stop_IT(&htim4);
	HAL_TIM_Base_Stop_IT(&htim3);
 8001094:	4827      	ldr	r0, [pc, #156]	; (8001134 <Userface5+0x184>)
 8001096:	f002 faab 	bl	80035f0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 800109a:	4827      	ldr	r0, [pc, #156]	; (8001138 <Userface5+0x188>)
 800109c:	f002 faa8 	bl	80035f0 <HAL_TIM_Base_Stop_IT>
	//__HAL_TIM_SET_COUNTER(&htim4, 0);
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <Userface5+0x184>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <Userface5+0x188>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
	if(toggle == 1){
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <Userface5+0x190>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d106      	bne.n	80010c6 <Userface5+0x116>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80010b8:	2140      	movs	r1, #64	; 0x40
 80010ba:	4822      	ldr	r0, [pc, #136]	; (8001144 <Userface5+0x194>)
 80010bc:	f001 fd40 	bl	8002b40 <HAL_GPIO_TogglePin>
		toggle = 0;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <Userface5+0x190>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
	}
    bit = 0;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <Userface5+0x158>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
    bar = 0;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <Userface5+0x15c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
    a = 0;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <Userface5+0x160>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
    b = 0;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <Userface5+0x164>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
    bit2 = 0;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <Userface5+0x168>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
    bar2 = 0;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <Userface5+0x16c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
    a2 = 0;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <Userface5+0x170>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
    b2 = 0;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <Userface5+0x174>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	92492493 	.word	0x92492493
 8001104:	20000098 	.word	0x20000098
 8001108:	200000a4 	.word	0x200000a4
 800110c:	200000a5 	.word	0x200000a5
 8001110:	200000b4 	.word	0x200000b4
 8001114:	200000b5 	.word	0x200000b5
 8001118:	200000b6 	.word	0x200000b6
 800111c:	200000b7 	.word	0x200000b7
 8001120:	200000b8 	.word	0x200000b8
 8001124:	200000b9 	.word	0x200000b9
 8001128:	20000000 	.word	0x20000000
 800112c:	0001d4c0 	.word	0x0001d4c0
 8001130:	200000ba 	.word	0x200000ba
 8001134:	20000108 	.word	0x20000108
 8001138:	200000c0 	.word	0x200000c0
 800113c:	20000090 	.word	0x20000090
 8001140:	200000a6 	.word	0x200000a6
 8001144:	40011000 	.word	0x40011000

08001148 <changeUserface>:
void changeUserface() {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
    // Increment the userface index
	if(!first){
 800114c:	4b63      	ldr	r3, [pc, #396]	; (80012dc <changeUserface+0x194>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	f040 8095 	bne.w	8001280 <changeUserface+0x138>
		if(!back && currentUserface != 3){
 8001156:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <changeUserface+0x198>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d174      	bne.n	8001248 <changeUserface+0x100>
 800115e:	4b61      	ldr	r3, [pc, #388]	; (80012e4 <changeUserface+0x19c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d070      	beq.n	8001248 <changeUserface+0x100>
			if(currentUserface == 2){
 8001166:	4b5f      	ldr	r3, [pc, #380]	; (80012e4 <changeUserface+0x19c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d157      	bne.n	800121e <changeUserface+0xd6>
					if(mode != 2){
 800116e:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <changeUserface+0x1a0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d038      	beq.n	80011e8 <changeUserface+0xa0>
						switch(note){
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <changeUserface+0x1a4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d025      	beq.n	80011ca <changeUserface+0x82>
 800117e:	2b02      	cmp	r3, #2
 8001180:	dc45      	bgt.n	800120e <changeUserface+0xc6>
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <changeUserface+0x44>
 8001186:	2b01      	cmp	r3, #1
 8001188:	d010      	beq.n	80011ac <changeUserface+0x64>
 800118a:	e040      	b.n	800120e <changeUserface+0xc6>
						case 0:
							if(BPM>=10&&BPM<=260){
 800118c:	4b58      	ldr	r3, [pc, #352]	; (80012f0 <changeUserface+0x1a8>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	2b09      	cmp	r3, #9
 8001192:	d939      	bls.n	8001208 <changeUserface+0xc0>
 8001194:	4b56      	ldr	r3, [pc, #344]	; (80012f0 <changeUserface+0x1a8>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800119c:	d834      	bhi.n	8001208 <changeUserface+0xc0>
								currentUserface = (currentUserface + 1);
 800119e:	4b51      	ldr	r3, [pc, #324]	; (80012e4 <changeUserface+0x19c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <changeUserface+0x19c>)
 80011a8:	701a      	strb	r2, [r3, #0]
							}
							break;
 80011aa:	e02d      	b.n	8001208 <changeUserface+0xc0>
						case 1:
							if(BPM>=10&&BPM<=130){
 80011ac:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <changeUserface+0x1a8>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	d92b      	bls.n	800120c <changeUserface+0xc4>
 80011b4:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <changeUserface+0x1a8>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	2b82      	cmp	r3, #130	; 0x82
 80011ba:	d827      	bhi.n	800120c <changeUserface+0xc4>
								currentUserface = (currentUserface + 1);
 80011bc:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <changeUserface+0x19c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <changeUserface+0x19c>)
 80011c6:	701a      	strb	r2, [r3, #0]
							}
							break;
 80011c8:	e020      	b.n	800120c <changeUserface+0xc4>
						case 2:
							if(BPM>=10&&BPM<=65){
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <changeUserface+0x1a8>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	2b09      	cmp	r3, #9
 80011d0:	d91d      	bls.n	800120e <changeUserface+0xc6>
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <changeUserface+0x1a8>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	2b41      	cmp	r3, #65	; 0x41
 80011d8:	d819      	bhi.n	800120e <changeUserface+0xc6>
								currentUserface = (currentUserface + 1);
 80011da:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <changeUserface+0x19c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <changeUserface+0x19c>)
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	e012      	b.n	800120e <changeUserface+0xc6>
							}
						}
					}
					else{
						if(BPM>=60&&BPM<=256){
 80011e8:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <changeUserface+0x1a8>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	2b3b      	cmp	r3, #59	; 0x3b
 80011ee:	d90e      	bls.n	800120e <changeUserface+0xc6>
 80011f0:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <changeUserface+0x1a8>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f8:	d809      	bhi.n	800120e <changeUserface+0xc6>
							currentUserface = (currentUserface + 1);
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <changeUserface+0x19c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <changeUserface+0x19c>)
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e002      	b.n	800120e <changeUserface+0xc6>
							break;
 8001208:	bf00      	nop
 800120a:	e000      	b.n	800120e <changeUserface+0xc6>
							break;
 800120c:	bf00      	nop
						}
					}
					if(currentUserface!=3){
 800120e:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <changeUserface+0x19c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d018      	beq.n	8001248 <changeUserface+0x100>
						err=1;
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <changeUserface+0x1ac>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e014      	b.n	8001248 <changeUserface+0x100>
					}
				}
			else{
				if(mode == 2&&currentUserface == 0){
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <changeUserface+0x1a0>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d10a      	bne.n	800123c <changeUserface+0xf4>
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <changeUserface+0x19c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d106      	bne.n	800123c <changeUserface+0xf4>
					currentUserface = (currentUserface + 2);
 800122e:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <changeUserface+0x19c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	3302      	adds	r3, #2
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <changeUserface+0x19c>)
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	e005      	b.n	8001248 <changeUserface+0x100>
				}
				else {
					currentUserface = (currentUserface + 1);
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <changeUserface+0x19c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <changeUserface+0x19c>)
 8001246:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if(back && currentUserface != 0){
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <changeUserface+0x198>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d017      	beq.n	8001280 <changeUserface+0x138>
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <changeUserface+0x19c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <changeUserface+0x138>
			if(mode == 2&&currentUserface == 2){
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <changeUserface+0x1a0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d109      	bne.n	8001274 <changeUserface+0x12c>
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <changeUserface+0x19c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d105      	bne.n	8001274 <changeUserface+0x12c>
				currentUserface = (currentUserface - 1);
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <changeUserface+0x19c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <changeUserface+0x19c>)
 8001272:	701a      	strb	r2, [r3, #0]
			}
			currentUserface = (currentUserface - 1);
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <changeUserface+0x19c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <changeUserface+0x19c>)
 800127e:	701a      	strb	r2, [r3, #0]
		}
	}
//	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
	back = 0;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <changeUserface+0x198>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
	exitUserface = 0;
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <changeUserface+0x1b0>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
	first = 0;
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <changeUserface+0x194>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
    // Switch to the next userface
    switch (currentUserface) {
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <changeUserface+0x19c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d81d      	bhi.n	80012d6 <changeUserface+0x18e>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <changeUserface+0x158>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	080012b1 	.word	0x080012b1
 80012a4:	080012b7 	.word	0x080012b7
 80012a8:	080012bd 	.word	0x080012bd
 80012ac:	080012c3 	.word	0x080012c3
        case 0:
            Userface1();
 80012b0:	f7ff fb3c 	bl	800092c <Userface1>
            break;
 80012b4:	e00f      	b.n	80012d6 <changeUserface+0x18e>
        case 1:
            Userface2();
 80012b6:	f7ff fce9 	bl	8000c8c <Userface2>
            break;
 80012ba:	e00c      	b.n	80012d6 <changeUserface+0x18e>
        case 2:
            Userface3();
 80012bc:	f7ff fbf8 	bl	8000ab0 <Userface3>
            break;
 80012c0:	e009      	b.n	80012d6 <changeUserface+0x18e>
        case 3:
        	if(mode == 2){
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <changeUserface+0x1a0>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d102      	bne.n	80012d0 <changeUserface+0x188>
        		Userface5();
 80012ca:	f7ff fe71 	bl	8000fb0 <Userface5>
        	}
        	else {
        		Userface4();
        	}
    }
}
 80012ce:	e002      	b.n	80012d6 <changeUserface+0x18e>
        		Userface4();
 80012d0:	f7ff fd82 	bl	8000dd8 <Userface4>
}
 80012d4:	e7ff      	b.n	80012d6 <changeUserface+0x18e>
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000002 	.word	0x20000002
 80012e0:	20000092 	.word	0x20000092
 80012e4:	20000093 	.word	0x20000093
 80012e8:	20000091 	.word	0x20000091
 80012ec:	20000095 	.word	0x20000095
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000096 	.word	0x20000096
 80012f8:	20000090 	.word	0x20000090

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001300:	f001 f902 	bl	8002508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001304:	f000 f80f 	bl	8001326 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001308:	f000 f96c 	bl	80015e4 <MX_GPIO_Init>
  MX_FSMC_Init();
 800130c:	f000 fa42 	bl	8001794 <MX_FSMC_Init>
  MX_TIM3_Init();
 8001310:	f000 f8a2 	bl	8001458 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001314:	f000 f852 	bl	80013bc <MX_TIM2_Init>
  MX_TIM4_Init();
 8001318:	f000 f8ec 	bl	80014f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 800131c:	f7fe ff93 	bl	8000246 <LCD_INIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	changeUserface();
 8001320:	f7ff ff12 	bl	8001148 <changeUserface>
 8001324:	e7fc      	b.n	8001320 <main+0x24>

08001326 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b090      	sub	sp, #64	; 0x40
 800132a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	2228      	movs	r2, #40	; 0x28
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f003 f8dd 	bl	80044f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800134c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001350:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001356:	2301      	movs	r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135a:	2302      	movs	r3, #2
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001362:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001364:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001368:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fc22 	bl	8002bb8 <HAL_RCC_OscConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800137a:	f000 fc93 	bl	8001ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137e:	230f      	movs	r3, #15
 8001380:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001382:	2302      	movs	r3, #2
 8001384:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2102      	movs	r1, #2
 8001398:	4618      	mov	r0, r3
 800139a:	f001 fe8f 	bl	80030bc <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013a4:	f000 fc7e 	bl	8001ca4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 80013ae:	2000      	movs	r0, #0
 80013b0:	f001 ff6e 	bl	8003290 <HAL_RCC_MCOConfig>
}
 80013b4:	bf00      	nop
 80013b6:	3740      	adds	r7, #64	; 0x40
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	463b      	mov	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_TIM2_Init+0x98>)
 80013da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_TIM2_Init+0x98>)
 80013e2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80013e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM2_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_TIM2_Init+0x98>)
 80013f0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80013f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_TIM2_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_TIM2_Init+0x98>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001402:	4814      	ldr	r0, [pc, #80]	; (8001454 <MX_TIM2_Init+0x98>)
 8001404:	f002 f845 	bl	8003492 <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800140e:	f000 fc49 	bl	8001ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001416:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	4619      	mov	r1, r3
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_TIM2_Init+0x98>)
 8001420:	f002 fb32 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800142a:	f000 fc3b 	bl	8001ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_TIM2_Init+0x98>)
 800143c:	f002 fec8 	bl	80041d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001446:	f000 fc2d 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200000c0 	.word	0x200000c0

08001458 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <MX_TIM3_Init+0x94>)
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <MX_TIM3_Init+0x98>)
 8001478:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_TIM3_Init+0x94>)
 800147c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001480:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_TIM3_Init+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_TIM3_Init+0x94>)
 800148a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800148e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <MX_TIM3_Init+0x94>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_TIM3_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800149c:	4813      	ldr	r0, [pc, #76]	; (80014ec <MX_TIM3_Init+0x94>)
 800149e:	f001 fff8 	bl	8003492 <HAL_TIM_Base_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014a8:	f000 fbfc 	bl	8001ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	4619      	mov	r1, r3
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <MX_TIM3_Init+0x94>)
 80014ba:	f002 fae5 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014c4:	f000 fbee 	bl	8001ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_TIM3_Init+0x94>)
 80014d6:	f002 fe7b 	bl	80041d0 <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014e0:	f000 fbe0 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000108 	.word	0x20000108
 80014f0:	40000400 	.word	0x40000400

080014f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <MX_TIM4_Init+0xe8>)
 8001526:	4a2e      	ldr	r2, [pc, #184]	; (80015e0 <MX_TIM4_Init+0xec>)
 8001528:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35999;
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <MX_TIM4_Init+0xe8>)
 800152c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001530:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <MX_TIM4_Init+0xe8>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <MX_TIM4_Init+0xe8>)
 800153a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800153e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <MX_TIM4_Init+0xe8>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <MX_TIM4_Init+0xe8>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800154c:	4823      	ldr	r0, [pc, #140]	; (80015dc <MX_TIM4_Init+0xe8>)
 800154e:	f001 ffa0 	bl	8003492 <HAL_TIM_Base_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001558:	f000 fba4 	bl	8001ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	4619      	mov	r1, r3
 8001568:	481c      	ldr	r0, [pc, #112]	; (80015dc <MX_TIM4_Init+0xe8>)
 800156a:	f002 fa8d 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001574:	f000 fb96 	bl	8001ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001578:	4818      	ldr	r0, [pc, #96]	; (80015dc <MX_TIM4_Init+0xe8>)
 800157a:	f002 f867 	bl	800364c <HAL_TIM_PWM_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001584:	f000 fb8e 	bl	8001ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4619      	mov	r1, r3
 8001596:	4811      	ldr	r0, [pc, #68]	; (80015dc <MX_TIM4_Init+0xe8>)
 8001598:	f002 fe1a 	bl	80041d0 <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80015a2:	f000 fb7f 	bl	8001ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	; 0x60
 80015a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 80015aa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2208      	movs	r2, #8
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <MX_TIM4_Init+0xe8>)
 80015c0:	f002 f9a4 	bl	800390c <HAL_TIM_PWM_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80015ca:	f000 fb6b 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <MX_TIM4_Init+0xe8>)
 80015d0:	f000 fbf4 	bl	8001dbc <HAL_TIM_MspPostInit>

}
 80015d4:	bf00      	nop
 80015d6:	3738      	adds	r7, #56	; 0x38
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000150 	.word	0x20000150
 80015e0:	40000800 	.word	0x40000800

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f8:	4b60      	ldr	r3, [pc, #384]	; (800177c <MX_GPIO_Init+0x198>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a5f      	ldr	r2, [pc, #380]	; (800177c <MX_GPIO_Init+0x198>)
 80015fe:	f043 0310 	orr.w	r3, r3, #16
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b5d      	ldr	r3, [pc, #372]	; (800177c <MX_GPIO_Init+0x198>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	4b5a      	ldr	r3, [pc, #360]	; (800177c <MX_GPIO_Init+0x198>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a59      	ldr	r2, [pc, #356]	; (800177c <MX_GPIO_Init+0x198>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b57      	ldr	r3, [pc, #348]	; (800177c <MX_GPIO_Init+0x198>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001628:	4b54      	ldr	r3, [pc, #336]	; (800177c <MX_GPIO_Init+0x198>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a53      	ldr	r2, [pc, #332]	; (800177c <MX_GPIO_Init+0x198>)
 800162e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b51      	ldr	r3, [pc, #324]	; (800177c <MX_GPIO_Init+0x198>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001640:	4b4e      	ldr	r3, [pc, #312]	; (800177c <MX_GPIO_Init+0x198>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a4d      	ldr	r2, [pc, #308]	; (800177c <MX_GPIO_Init+0x198>)
 8001646:	f043 0320 	orr.w	r3, r3, #32
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b4b      	ldr	r3, [pc, #300]	; (800177c <MX_GPIO_Init+0x198>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b48      	ldr	r3, [pc, #288]	; (800177c <MX_GPIO_Init+0x198>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a47      	ldr	r2, [pc, #284]	; (800177c <MX_GPIO_Init+0x198>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b45      	ldr	r3, [pc, #276]	; (800177c <MX_GPIO_Init+0x198>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001676:	4842      	ldr	r0, [pc, #264]	; (8001780 <MX_GPIO_Init+0x19c>)
 8001678:	f001 fa4a 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	4840      	ldr	r0, [pc, #256]	; (8001784 <MX_GPIO_Init+0x1a0>)
 8001682:	f001 fa45 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2102      	movs	r1, #2
 800168a:	483f      	ldr	r0, [pc, #252]	; (8001788 <MX_GPIO_Init+0x1a4>)
 800168c:	f001 fa40 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001696:	4b3d      	ldr	r3, [pc, #244]	; (800178c <MX_GPIO_Init+0x1a8>)
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	f107 0318 	add.w	r3, r7, #24
 80016a2:	4619      	mov	r1, r3
 80016a4:	4837      	ldr	r0, [pc, #220]	; (8001784 <MX_GPIO_Init+0x1a0>)
 80016a6:	f001 f89f 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80016aa:	23f1      	movs	r3, #241	; 0xf1
 80016ac:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ae:	4b37      	ldr	r3, [pc, #220]	; (800178c <MX_GPIO_Init+0x1a8>)
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0318 	add.w	r3, r7, #24
 80016ba:	4619      	mov	r1, r3
 80016bc:	4834      	ldr	r0, [pc, #208]	; (8001790 <MX_GPIO_Init+0x1ac>)
 80016be:	f001 f893 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	4619      	mov	r1, r3
 80016da:	4829      	ldr	r0, [pc, #164]	; (8001780 <MX_GPIO_Init+0x19c>)
 80016dc:	f001 f884 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e0:	2340      	movs	r3, #64	; 0x40
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4823      	ldr	r0, [pc, #140]	; (8001784 <MX_GPIO_Init+0x1a0>)
 80016f8:	f001 f876 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2302      	movs	r3, #2
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0318 	add.w	r3, r7, #24
 800170e:	4619      	mov	r1, r3
 8001710:	481f      	ldr	r0, [pc, #124]	; (8001790 <MX_GPIO_Init+0x1ac>)
 8001712:	f001 f869 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001726:	f107 0318 	add.w	r3, r7, #24
 800172a:	4619      	mov	r1, r3
 800172c:	4816      	ldr	r0, [pc, #88]	; (8001788 <MX_GPIO_Init+0x1a4>)
 800172e:	f001 f85b 	bl	80027e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2006      	movs	r0, #6
 8001738:	f001 f81f 	bl	800277a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800173c:	2006      	movs	r0, #6
 800173e:	f001 f838 	bl	80027b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	200a      	movs	r0, #10
 8001748:	f001 f817 	bl	800277a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800174c:	200a      	movs	r0, #10
 800174e:	f001 f830 	bl	80027b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2017      	movs	r0, #23
 8001758:	f001 f80f 	bl	800277a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800175c:	2017      	movs	r0, #23
 800175e:	f001 f828 	bl	80027b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2028      	movs	r0, #40	; 0x28
 8001768:	f001 f807 	bl	800277a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800176c:	2028      	movs	r0, #40	; 0x28
 800176e:	f001 f820 	bl	80027b2 <HAL_NVIC_EnableIRQ>

}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	; 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40011400 	.word	0x40011400
 8001784:	40011000 	.word	0x40011000
 8001788:	40011800 	.word	0x40011800
 800178c:	10110000 	.word	0x10110000
 8001790:	40010800 	.word	0x40010800

08001794 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017ae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80017b2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017b6:	4a27      	ldr	r2, [pc, #156]	; (8001854 <MX_FSMC_Init+0xc0>)
 80017b8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017ce:	2210      	movs	r2, #16
 80017d0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_FSMC_Init+0xbc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_FSMC_Init+0xbc>)
 8001800:	2200      	movs	r2, #0
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_FSMC_Init+0xbc>)
 8001806:	2200      	movs	r2, #0
 8001808:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800180a:	230f      	movs	r3, #15
 800180c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800180e:	230f      	movs	r3, #15
 8001810:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001812:	23ff      	movs	r3, #255	; 0xff
 8001814:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001816:	230f      	movs	r3, #15
 8001818:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800181a:	2310      	movs	r3, #16
 800181c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800181e:	2311      	movs	r3, #17
 8001820:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2200      	movs	r2, #0
 800182a:	4619      	mov	r1, r3
 800182c:	4808      	ldr	r0, [pc, #32]	; (8001850 <MX_FSMC_Init+0xbc>)
 800182e:	f001 fde3 	bl	80033f8 <HAL_SRAM_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001838:	f000 fa34 	bl	8001ca4 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_FSMC_Init+0xc4>)
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	4a05      	ldr	r2, [pc, #20]	; (8001858 <MX_FSMC_Init+0xc4>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001846:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000198 	.word	0x20000198
 8001854:	a0000104 	.word	0xa0000104
 8001858:	40010000 	.word	0x40010000

0800185c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af02      	add	r7, sp, #8
 8001862:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a9e      	ldr	r2, [pc, #632]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001868:	4293      	cmp	r3, r2
 800186a:	f040 8099 	bne.w	80019a0 <HAL_TIM_PeriodElapsedCallback+0x144>
//		if(mode == 2){
			if(toggle == 1&& a==25){
 800186e:	4b9d      	ldr	r3, [pc, #628]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10a      	bne.n	800188c <HAL_TIM_PeriodElapsedCallback+0x30>
 8001876:	4b9c      	ldr	r3, [pc, #624]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b19      	cmp	r3, #25
 800187c:	d106      	bne.n	800188c <HAL_TIM_PeriodElapsedCallback+0x30>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800187e:	2140      	movs	r1, #64	; 0x40
 8001880:	489a      	ldr	r0, [pc, #616]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001882:	f001 f95d 	bl	8002b40 <HAL_GPIO_TogglePin>
				toggle = 0;
 8001886:	4b97      	ldr	r3, [pc, #604]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
			}
			if(b == 0){
 800188c:	4b98      	ldr	r3, [pc, #608]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d11a      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0x6e>
				if (pattern[4 * patternstr[bar/4] + bit] == 1 && a == 0) {  //4 * patternstr[bar/4] + bit
 8001894:	4b97      	ldr	r3, [pc, #604]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	4b96      	ldr	r3, [pc, #600]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80018a0:	5c9b      	ldrb	r3, [r3, r2]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4a95      	ldr	r2, [pc, #596]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018a6:	7812      	ldrb	r2, [r2, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a95      	ldr	r2, [pc, #596]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80018ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d10a      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0x6e>
 80018b4:	4b8c      	ldr	r3, [pc, #560]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d106      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0x6e>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80018bc:	2140      	movs	r1, #64	; 0x40
 80018be:	488b      	ldr	r0, [pc, #556]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x290>)
 80018c0:	f001 f93e 	bl	8002b40 <HAL_GPIO_TogglePin>
					toggle = 1;
 80018c4:	4b87      	ldr	r3, [pc, #540]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
				}
			}
			if(b == 1){
 80018ca:	4b89      	ldr	r3, [pc, #548]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d11a      	bne.n	8001908 <HAL_TIM_PeriodElapsedCallback+0xac>
				if (pattern[4 * tempstr[bar/4] + bit] == 1 && a == 0) {  //4 * patternstr[bar/4] + bit
 80018d2:	4b88      	ldr	r3, [pc, #544]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	4b89      	ldr	r3, [pc, #548]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80018de:	5c9b      	ldrb	r3, [r3, r2]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4a86      	ldr	r2, [pc, #536]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a85      	ldr	r2, [pc, #532]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10a      	bne.n	8001908 <HAL_TIM_PeriodElapsedCallback+0xac>
 80018f2:	4b7d      	ldr	r3, [pc, #500]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <HAL_TIM_PeriodElapsedCallback+0xac>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	487b      	ldr	r0, [pc, #492]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x290>)
 80018fe:	f001 f91f 	bl	8002b40 <HAL_GPIO_TogglePin>
					toggle = 1;
 8001902:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
				}
			}
			if(a == 1){
 8001908:	4b77      	ldr	r3, [pc, #476]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d130      	bne.n	8001972 <HAL_TIM_PeriodElapsedCallback+0x116>
				if(bit==3&&bar==47){
 8001910:	4b7a      	ldr	r3, [pc, #488]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d10e      	bne.n	8001936 <HAL_TIM_PeriodElapsedCallback+0xda>
 8001918:	4b76      	ldr	r3, [pc, #472]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b2f      	cmp	r3, #47	; 0x2f
 800191e:	d10a      	bne.n	8001936 <HAL_TIM_PeriodElapsedCallback+0xda>
					b = (b+1)%2;
 8001920:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	bfb8      	it	lt
 800192e:	425b      	neglt	r3, r3
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b6f      	ldr	r3, [pc, #444]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001934:	701a      	strb	r2, [r3, #0]
				}
		        bit = (bit + 1) % 4;
 8001936:	4b71      	ldr	r3, [pc, #452]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	425a      	negs	r2, r3
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	bf58      	it	pl
 8001948:	4253      	negpl	r3, r2
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b6b      	ldr	r3, [pc, #428]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800194e:	701a      	strb	r2, [r3, #0]
		        bar = (bar + 1) % 48;
 8001950:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	4b6c      	ldr	r3, [pc, #432]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001958:	fb83 1302 	smull	r1, r3, r3, r2
 800195c:	10d9      	asrs	r1, r3, #3
 800195e:	17d3      	asrs	r3, r2, #31
 8001960:	1ac9      	subs	r1, r1, r3
 8001962:	460b      	mov	r3, r1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	440b      	add	r3, r1
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	1ad1      	subs	r1, r2, r3
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001970:	701a      	strb	r2, [r3, #0]
			}
//		}
		a = (a + 1) % (60*arr/BPM);
 8001972:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	4b64      	ldr	r3, [pc, #400]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	460b      	mov	r3, r1
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	1a5b      	subs	r3, r3, r1
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4619      	mov	r1, r3
 8001988:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	fb91 f3f3 	sdiv	r3, r1, r3
 8001990:	fb92 f1f3 	sdiv	r1, r2, r3
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b52      	ldr	r3, [pc, #328]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800199e:	701a      	strb	r2, [r3, #0]
	}
    if (htim == &htim3) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a5c      	ldr	r2, [pc, #368]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	f040 8160 	bne.w	8001c6a <HAL_TIM_PeriodElapsedCallback+0x40e>
        // Check if the pattern condition is met
    	if(mode!=2){
 80019aa:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	f000 80da 	beq.w	8001b68 <HAL_TIM_PeriodElapsedCallback+0x30c>
    		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80019b4:	2140      	movs	r1, #64	; 0x40
 80019b6:	484d      	ldr	r0, [pc, #308]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x290>)
 80019b8:	f001 f8c2 	bl	8002b40 <HAL_GPIO_TogglePin>
    		switch(note){
 80019bc:	4b57      	ldr	r3, [pc, #348]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d055      	beq.n	8001a70 <HAL_TIM_PeriodElapsedCallback+0x214>
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	f300 80ca 	bgt.w	8001b5e <HAL_TIM_PeriodElapsedCallback+0x302>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <HAL_TIM_PeriodElapsedCallback+0x178>
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d01e      	beq.n	8001a10 <HAL_TIM_PeriodElapsedCallback+0x1b4>
 80019d2:	e0c4      	b.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x302>
    		case 0:
    			sprintf(str, "%d", numberToShow+1);
 80019d4:	4b52      	ldr	r3, [pc, #328]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	461a      	mov	r2, r3
 80019dc:	4951      	ldr	r1, [pc, #324]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80019de:	4852      	ldr	r0, [pc, #328]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019e0:	f002 fdfc 	bl	80045dc <siprintf>
				LCD_DrawString(40, 0, str, BLUE, 20);
 80019e4:	2314      	movs	r3, #20
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	231f      	movs	r3, #31
 80019ea:	4a4f      	ldr	r2, [pc, #316]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019ec:	2100      	movs	r1, #0
 80019ee:	2028      	movs	r0, #40	; 0x28
 80019f0:	f7fe ff61 	bl	80008b6 <LCD_DrawString>
				numberToShow = (numberToShow+1) % 4;
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	425a      	negs	r2, r3
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	f002 0203 	and.w	r2, r2, #3
 8001a04:	bf58      	it	pl
 8001a06:	4253      	negpl	r3, r2
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a0c:	701a      	strb	r2, [r3, #0]
				break;
 8001a0e:	e0a6      	b.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x302>
    		case 1:
    			if(numberToShow%2 == 0){
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d112      	bne.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0x1e8>
    				sprintf(str, "%d", numberToShow/2+1);
 8001a1e:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	461a      	mov	r2, r3
 8001a2a:	493e      	ldr	r1, [pc, #248]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001a2c:	483e      	ldr	r0, [pc, #248]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a2e:	f002 fdd5 	bl	80045dc <siprintf>
    				LCD_DrawString(40, 0, str, BLUE, 20);
 8001a32:	2314      	movs	r3, #20
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	231f      	movs	r3, #31
 8001a38:	4a3b      	ldr	r2, [pc, #236]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2028      	movs	r0, #40	; 0x28
 8001a3e:	f7fe ff3a 	bl	80008b6 <LCD_DrawString>
 8001a42:	e007      	b.n	8001a54 <HAL_TIM_PeriodElapsedCallback+0x1f8>
    			}
    			else{
    				LCD_DrawString(40, 0, "N", BLUE, 20);
 8001a44:	2314      	movs	r3, #20
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	231f      	movs	r3, #31
 8001a4a:	4a38      	ldr	r2, [pc, #224]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2028      	movs	r0, #40	; 0x28
 8001a50:	f7fe ff31 	bl	80008b6 <LCD_DrawString>
    			}
    			numberToShow = (numberToShow+1) % 8;
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	425a      	negs	r2, r3
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	f002 0207 	and.w	r2, r2, #7
 8001a64:	bf58      	it	pl
 8001a66:	4253      	negpl	r3, r2
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a6c:	701a      	strb	r2, [r3, #0]
    			break;
 8001a6e:	e076      	b.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x302>
    		case 2:
    			switch(numberToShow%4){
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d863      	bhi.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8001a7c:	a201      	add	r2, pc, #4	; (adr r2, 8001a84 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a82:	bf00      	nop
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001abb 	.word	0x08001abb
 8001a8c:	08001acd 	.word	0x08001acd
 8001a90:	08001b35 	.word	0x08001b35
    			case 0:
    				sprintf(str, "%d", numberToShow/4+1);
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4920      	ldr	r1, [pc, #128]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001aa2:	4821      	ldr	r0, [pc, #132]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001aa4:	f002 fd9a 	bl	80045dc <siprintf>
    				LCD_DrawString(40, 0, str, BLUE, 20);
 8001aa8:	2314      	movs	r3, #20
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	231f      	movs	r3, #31
 8001aae:	4a1e      	ldr	r2, [pc, #120]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2028      	movs	r0, #40	; 0x28
 8001ab4:	f7fe feff 	bl	80008b6 <LCD_DrawString>
    				break;
 8001ab8:	e044      	b.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x2e8>
    			case 1:
    				LCD_DrawString(40, 0, "E", BLUE, 20);
 8001aba:	2314      	movs	r3, #20
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	231f      	movs	r3, #31
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2028      	movs	r0, #40	; 0x28
 8001ac6:	f7fe fef6 	bl	80008b6 <LCD_DrawString>
    				break;
 8001aca:	e03b      	b.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x2e8>
    			case 2:
    				LCD_DrawString(40, 0, "N", BLUE, 20);
 8001acc:	2314      	movs	r3, #20
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	231f      	movs	r3, #31
 8001ad2:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2028      	movs	r0, #40	; 0x28
 8001ad8:	f7fe feed 	bl	80008b6 <LCD_DrawString>
    				break;
 8001adc:	e032      	b.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8001ade:	bf00      	nop
 8001ae0:	200000c0 	.word	0x200000c0
 8001ae4:	200000a6 	.word	0x200000a6
 8001ae8:	200000b4 	.word	0x200000b4
 8001aec:	40011000 	.word	0x40011000
 8001af0:	200000b5 	.word	0x200000b5
 8001af4:	200000a5 	.word	0x200000a5
 8001af8:	20000098 	.word	0x20000098
 8001afc:	200000a4 	.word	0x200000a4
 8001b00:	08005ad4 	.word	0x08005ad4
 8001b04:	200000a8 	.word	0x200000a8
 8001b08:	2aaaaaab 	.word	0x2aaaaaab
 8001b0c:	200000ba 	.word	0x200000ba
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000108 	.word	0x20000108
 8001b18:	20000091 	.word	0x20000091
 8001b1c:	20000095 	.word	0x20000095
 8001b20:	20000003 	.word	0x20000003
 8001b24:	08005ab4 	.word	0x08005ab4
 8001b28:	200000bc 	.word	0x200000bc
 8001b2c:	08005ab8 	.word	0x08005ab8
 8001b30:	08005abc 	.word	0x08005abc
    			case 3:
    				LCD_DrawString(40, 0, "A", BLUE, 20);
 8001b34:	2314      	movs	r3, #20
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	231f      	movs	r3, #31
 8001b3a:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2028      	movs	r0, #40	; 0x28
 8001b40:	f7fe feb9 	bl	80008b6 <LCD_DrawString>
    			}
    			numberToShow = (numberToShow+1) % 16;
 8001b44:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	425a      	negs	r2, r3
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	f002 020f 	and.w	r2, r2, #15
 8001b54:	bf58      	it	pl
 8001b56:	4253      	negpl	r3, r2
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001b5c:	701a      	strb	r2, [r3, #0]
    		}
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001b5e:	2140      	movs	r1, #64	; 0x40
 8001b60:	4846      	ldr	r0, [pc, #280]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x420>)
 8001b62:	f000 ffed 	bl	8002b40 <HAL_GPIO_TogglePin>
    		a2 = (a2 + 1) % (60*arr/BPM);
    	}
    }

        // Update bit and bar
}
 8001b66:	e080      	b.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0x40e>
    		if(bar2 /4 == 0 && bit2 == 3 && a2 == 1){
 8001b68:	4b45      	ldr	r3, [pc, #276]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d812      	bhi.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x33a>
 8001b70:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d10e      	bne.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x33a>
 8001b78:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d10a      	bne.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x33a>
    			if(b2 == 0){
 8001b80:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d103      	bne.n	8001b90 <HAL_TIM_PeriodElapsedCallback+0x334>
    				updatestr(tempstr);
 8001b88:	4841      	ldr	r0, [pc, #260]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8001b8a:	f7ff f97f 	bl	8000e8c <updatestr>
 8001b8e:	e002      	b.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x33a>
     				updatestr(patternstr);
 8001b90:	4840      	ldr	r0, [pc, #256]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001b92:	f7ff f97b 	bl	8000e8c <updatestr>
    		if(bit2 == 3 && a2 == 26){
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d12c      	bne.n	8001bf8 <HAL_TIM_PeriodElapsedCallback+0x39c>
 8001b9e:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b1a      	cmp	r3, #26
 8001ba4:	d128      	bne.n	8001bf8 <HAL_TIM_PeriodElapsedCallback+0x39c>
    			if(b2 == 0){
 8001ba6:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <HAL_TIM_PeriodElapsedCallback+0x368>
    				DrawUpdateNote(tempstr,bar2 /4, RED);
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4834      	ldr	r0, [pc, #208]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8001bbe:	f7ff f9bf 	bl	8000f40 <DrawUpdateNote>
 8001bc2:	e008      	b.n	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x37a>
       				DrawUpdateNote(patternstr,bar2 /4,BLUE);
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	221f      	movs	r2, #31
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4830      	ldr	r0, [pc, #192]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001bd2:	f7ff f9b5 	bl	8000f40 <DrawUpdateNote>
    			if(bar2 /4 == 11){
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	3b2c      	subs	r3, #44	; 0x2c
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d80a      	bhi.n	8001bf8 <HAL_TIM_PeriodElapsedCallback+0x39c>
    				b2 = (b2+1)%2;
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	bfb8      	it	lt
 8001bf0:	425b      	neglt	r3, r3
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001bf6:	701a      	strb	r2, [r3, #0]
			if(a2 == 0){
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d11d      	bne.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x3e0>
		        bit2 = (bit2 + 1) % 4;
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	425a      	negs	r2, r3
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	f002 0203 	and.w	r2, r2, #3
 8001c10:	bf58      	it	pl
 8001c12:	4253      	negpl	r3, r2
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001c18:	701a      	strb	r2, [r3, #0]
		        bar2 = (bar2 + 1) % 48;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8001c22:	fb83 1302 	smull	r1, r3, r3, r2
 8001c26:	10d9      	asrs	r1, r3, #3
 8001c28:	17d3      	asrs	r3, r2, #31
 8001c2a:	1ac9      	subs	r1, r1, r3
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	440b      	add	r3, r1
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	1ad1      	subs	r1, r2, r3
 8001c36:	b2ca      	uxtb	r2, r1
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8001c3a:	701a      	strb	r2, [r3, #0]
    		a2 = (a2 + 1) % (60*arr/BPM);
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x440>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	4619      	mov	r1, r3
 8001c48:	460b      	mov	r3, r1
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	1a5b      	subs	r3, r3, r1
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4619      	mov	r1, r3
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	fb91 f3f3 	sdiv	r3, r1, r3
 8001c5a:	fb92 f1f3 	sdiv	r1, r2, r3
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001c68:	701a      	strb	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	08005ac0 	.word	0x08005ac0
 8001c78:	20000003 	.word	0x20000003
 8001c7c:	40011000 	.word	0x40011000
 8001c80:	200000b7 	.word	0x200000b7
 8001c84:	200000b6 	.word	0x200000b6
 8001c88:	200000b8 	.word	0x200000b8
 8001c8c:	200000b9 	.word	0x200000b9
 8001c90:	200000a8 	.word	0x200000a8
 8001c94:	20000098 	.word	0x20000098
 8001c98:	2aaaaaab 	.word	0x2aaaaaab
 8001c9c:	200000ba 	.word	0x200000ba
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
}
 8001caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cac:	e7fe      	b.n	8001cac <Error_Handler+0x8>
	...

08001cb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_MspInit+0x5c>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <HAL_MspInit+0x5c>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6193      	str	r3, [r2, #24]
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_MspInit+0x5c>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_MspInit+0x5c>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <HAL_MspInit+0x5c>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	61d3      	str	r3, [r2, #28]
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_MspInit+0x5c>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_MspInit+0x60>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_MspInit+0x60>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010000 	.word	0x40010000

08001d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d24:	d114      	bne.n	8001d50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a21      	ldr	r2, [pc, #132]	; (8001db0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	201c      	movs	r0, #28
 8001d44:	f000 fd19 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d48:	201c      	movs	r0, #28
 8001d4a:	f000 fd32 	bl	80027b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d4e:	e02a      	b.n	8001da6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d114      	bne.n	8001d84 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	201d      	movs	r0, #29
 8001d78:	f000 fcff 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d7c:	201d      	movs	r0, #29
 8001d7e:	f000 fd18 	bl	80027b2 <HAL_NVIC_EnableIRQ>
}
 8001d82:	e010      	b.n	8001da6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <HAL_TIM_Base_MspInit+0xa4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10b      	bne.n	8001da6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40000400 	.word	0x40000400
 8001db8:	40000800 	.word	0x40000800

08001dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <HAL_TIM_MspPostInit+0x5c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d118      	bne.n	8001e0e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_TIM_MspPostInit+0x60>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_TIM_MspPostInit+0x60>)
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_TIM_MspPostInit+0x60>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <HAL_TIM_MspPostInit+0x64>)
 8001e0a:	f000 fced 	bl	80027e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40000800 	.word	0x40000800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010c00 	.word	0x40010c00

08001e24 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e2a:	f107 0308 	add.w	r3, r7, #8
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_FSMC_MspInit+0x78>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d129      	bne.n	8001e94 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_FSMC_MspInit+0x78>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_FSMC_MspInit+0x7c>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <HAL_FSMC_MspInit+0x7c>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6153      	str	r3, [r2, #20]
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_FSMC_MspInit+0x7c>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e5e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001e62:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	4619      	mov	r1, r3
 8001e72:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <HAL_FSMC_MspInit+0x80>)
 8001e74:	f000 fcb8 	bl	80027e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e78:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001e7c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e86:	f107 0308 	add.w	r3, r7, #8
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4806      	ldr	r0, [pc, #24]	; (8001ea8 <HAL_FSMC_MspInit+0x84>)
 8001e8e:	f000 fcab 	bl	80027e8 <HAL_GPIO_Init>
 8001e92:	e000      	b.n	8001e96 <HAL_FSMC_MspInit+0x72>
    return;
 8001e94:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200001e0 	.word	0x200001e0
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40011800 	.word	0x40011800
 8001ea8:	40011400 	.word	0x40011400

08001eac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001eb4:	f7ff ffb6 	bl	8001e24 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <NMI_Handler+0x4>

08001ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <HardFault_Handler+0x4>

08001ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <MemManage_Handler+0x4>

08001ed2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <BusFault_Handler+0x4>

08001ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <UsageFault_Handler+0x4>

08001ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f06:	f000 fb45 	bl	8002594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <EXTI0_IRQHandler+0x2c>)
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <EXTI0_IRQHandler+0x22>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <EXTI0_IRQHandler+0x2c>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8001f26:	2001      	movs	r0, #1
 8001f28:	f000 fe3c 	bl	8002ba4 <HAL_GPIO_EXTI_Callback>
		exitUserface = 1;
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <EXTI0_IRQHandler+0x30>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f32:	2001      	movs	r0, #1
 8001f34:	f000 fe1e 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40010400 	.word	0x40010400
 8001f40:	20000090 	.word	0x20000090

08001f44 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <EXTI4_IRQHandler+0x148>)
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8095 	beq.w	8002080 <EXTI4_IRQHandler+0x13c>
	{
	switch(currentUserface){
 8001f56:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <EXTI4_IRQHandler+0x14c>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d018      	beq.n	8001f92 <EXTI4_IRQHandler+0x4e>
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	f300 808e 	bgt.w	8002082 <EXTI4_IRQHandler+0x13e>
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <EXTI4_IRQHandler+0x2c>
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d077      	beq.n	800205e <EXTI4_IRQHandler+0x11a>
 8001f6e:	e088      	b.n	8002082 <EXTI4_IRQHandler+0x13e>
	case 0:
		mode = (mode + 2) % 3;
 8001f70:	4b48      	ldr	r3, [pc, #288]	; (8002094 <EXTI4_IRQHandler+0x150>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	1c9a      	adds	r2, r3, #2
 8001f78:	4b47      	ldr	r3, [pc, #284]	; (8002098 <EXTI4_IRQHandler+0x154>)
 8001f7a:	fb83 3102 	smull	r3, r1, r3, r2
 8001f7e:	17d3      	asrs	r3, r2, #31
 8001f80:	1ac9      	subs	r1, r1, r3
 8001f82:	460b      	mov	r3, r1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	440b      	add	r3, r1
 8001f88:	1ad1      	subs	r1, r2, r3
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	4b41      	ldr	r3, [pc, #260]	; (8002094 <EXTI4_IRQHandler+0x150>)
 8001f8e:	701a      	strb	r2, [r3, #0]
		break;
 8001f90:	e077      	b.n	8002082 <EXTI4_IRQHandler+0x13e>
	case 2:
		switch(digit){
 8001f92:	4b42      	ldr	r3, [pc, #264]	; (800209c <EXTI4_IRQHandler+0x158>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d02c      	beq.n	8001ff6 <EXTI4_IRQHandler+0xb2>
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	dc3c      	bgt.n	800201a <EXTI4_IRQHandler+0xd6>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <EXTI4_IRQHandler+0x66>
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d013      	beq.n	8001fd0 <EXTI4_IRQHandler+0x8c>
 8001fa8:	e037      	b.n	800201a <EXTI4_IRQHandler+0xd6>
		case 0:
			digit1 = (digit1 + 1) % 10;
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <EXTI4_IRQHandler+0x15c>)
 8001fac:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <EXTI4_IRQHandler+0x160>)
 8001fb4:	fb83 1302 	smull	r1, r3, r3, r2
 8001fb8:	1099      	asrs	r1, r3, #2
 8001fba:	17d3      	asrs	r3, r2, #31
 8001fbc:	1ac9      	subs	r1, r1, r3
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	1ad1      	subs	r1, r2, r3
 8001fc8:	b24a      	sxtb	r2, r1
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <EXTI4_IRQHandler+0x15c>)
 8001fcc:	701a      	strb	r2, [r3, #0]
			break;
 8001fce:	e024      	b.n	800201a <EXTI4_IRQHandler+0xd6>
		case 1:
			digit2 = (digit2 + 1) % 10;
 8001fd0:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <EXTI4_IRQHandler+0x164>)
 8001fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <EXTI4_IRQHandler+0x160>)
 8001fda:	fb83 1302 	smull	r1, r3, r3, r2
 8001fde:	1099      	asrs	r1, r3, #2
 8001fe0:	17d3      	asrs	r3, r2, #31
 8001fe2:	1ac9      	subs	r1, r1, r3
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	1ad1      	subs	r1, r2, r3
 8001fee:	b24a      	sxtb	r2, r1
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <EXTI4_IRQHandler+0x164>)
 8001ff2:	701a      	strb	r2, [r3, #0]
			break;
 8001ff4:	e011      	b.n	800201a <EXTI4_IRQHandler+0xd6>
		case 2:
			digit3 = (digit3 + 1) % 10;
 8001ff6:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <EXTI4_IRQHandler+0x168>)
 8001ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <EXTI4_IRQHandler+0x160>)
 8002000:	fb83 1302 	smull	r1, r3, r3, r2
 8002004:	1099      	asrs	r1, r3, #2
 8002006:	17d3      	asrs	r3, r2, #31
 8002008:	1ac9      	subs	r1, r1, r3
 800200a:	460b      	mov	r3, r1
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	1ad1      	subs	r1, r2, r3
 8002014:	b24a      	sxtb	r2, r1
 8002016:	4b25      	ldr	r3, [pc, #148]	; (80020ac <EXTI4_IRQHandler+0x168>)
 8002018:	701a      	strb	r2, [r3, #0]
		}
		BPM = digit1 * 100 + digit2 * 10 + digit3;
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <EXTI4_IRQHandler+0x15c>)
 800201c:	f993 3000 	ldrsb.w	r3, [r3]
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	4413      	add	r3, r2
 8002028:	461a      	mov	r2, r3
 800202a:	0091      	lsls	r1, r2, #2
 800202c:	461a      	mov	r2, r3
 800202e:	460b      	mov	r3, r1
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <EXTI4_IRQHandler+0x164>)
 8002038:	f993 3000 	ldrsb.w	r3, [r3]
 800203c:	b29b      	uxth	r3, r3
 800203e:	4619      	mov	r1, r3
 8002040:	0089      	lsls	r1, r1, #2
 8002042:	440b      	add	r3, r1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	b29b      	uxth	r3, r3
 8002048:	4413      	add	r3, r2
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <EXTI4_IRQHandler+0x168>)
 800204e:	f993 3000 	ldrsb.w	r3, [r3]
 8002052:	b29b      	uxth	r3, r3
 8002054:	4413      	add	r3, r2
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <EXTI4_IRQHandler+0x16c>)
 800205a:	801a      	strh	r2, [r3, #0]
		break;
 800205c:	e011      	b.n	8002082 <EXTI4_IRQHandler+0x13e>
	case 1:
	note = (note + 2) % 3;
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <EXTI4_IRQHandler+0x170>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	1c9a      	adds	r2, r3, #2
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <EXTI4_IRQHandler+0x154>)
 8002068:	fb83 3102 	smull	r3, r1, r3, r2
 800206c:	17d3      	asrs	r3, r2, #31
 800206e:	1ac9      	subs	r1, r1, r3
 8002070:	460b      	mov	r3, r1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	440b      	add	r3, r1
 8002076:	1ad1      	subs	r1, r2, r3
 8002078:	b2ca      	uxtb	r2, r1
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <EXTI4_IRQHandler+0x170>)
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e000      	b.n	8002082 <EXTI4_IRQHandler+0x13e>
	}
	}
 8002080:	bf00      	nop
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002082:	2010      	movs	r0, #16
 8002084:	f000 fd76 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  /* USER CODE END EXTI4_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40010400 	.word	0x40010400
 8002090:	20000093 	.word	0x20000093
 8002094:	20000091 	.word	0x20000091
 8002098:	55555556 	.word	0x55555556
 800209c:	20000094 	.word	0x20000094
 80020a0:	200001e4 	.word	0x200001e4
 80020a4:	66666667 	.word	0x66666667
 80020a8:	200001e5 	.word	0x200001e5
 80020ac:	200001e6 	.word	0x200001e6
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000095 	.word	0x20000095

080020b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET)
 80020bc:	4b70      	ldr	r3, [pc, #448]	; (8002280 <EXTI9_5_IRQHandler+0x1c8>)
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8098 	beq.w	80021fa <EXTI9_5_IRQHandler+0x142>
	{
		switch(currentUserface){
 80020ca:	4b6e      	ldr	r3, [pc, #440]	; (8002284 <EXTI9_5_IRQHandler+0x1cc>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d018      	beq.n	8002106 <EXTI9_5_IRQHandler+0x4e>
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	f300 8091 	bgt.w	80021fc <EXTI9_5_IRQHandler+0x144>
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <EXTI9_5_IRQHandler+0x2c>
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d07a      	beq.n	80021d8 <EXTI9_5_IRQHandler+0x120>
 80020e2:	e08b      	b.n	80021fc <EXTI9_5_IRQHandler+0x144>
		case 0:
			mode = (mode + 1) % 3;
 80020e4:	4b68      	ldr	r3, [pc, #416]	; (8002288 <EXTI9_5_IRQHandler+0x1d0>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	4b67      	ldr	r3, [pc, #412]	; (800228c <EXTI9_5_IRQHandler+0x1d4>)
 80020ee:	fb83 3102 	smull	r3, r1, r3, r2
 80020f2:	17d3      	asrs	r3, r2, #31
 80020f4:	1ac9      	subs	r1, r1, r3
 80020f6:	460b      	mov	r3, r1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	440b      	add	r3, r1
 80020fc:	1ad1      	subs	r1, r2, r3
 80020fe:	b2ca      	uxtb	r2, r1
 8002100:	4b61      	ldr	r3, [pc, #388]	; (8002288 <EXTI9_5_IRQHandler+0x1d0>)
 8002102:	701a      	strb	r2, [r3, #0]
			break;
 8002104:	e07a      	b.n	80021fc <EXTI9_5_IRQHandler+0x144>
		case 2:
			switch(digit){
 8002106:	4b62      	ldr	r3, [pc, #392]	; (8002290 <EXTI9_5_IRQHandler+0x1d8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d02e      	beq.n	800216e <EXTI9_5_IRQHandler+0xb6>
 8002110:	2b02      	cmp	r3, #2
 8002112:	dc3f      	bgt.n	8002194 <EXTI9_5_IRQHandler+0xdc>
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <EXTI9_5_IRQHandler+0x66>
 8002118:	2b01      	cmp	r3, #1
 800211a:	d014      	beq.n	8002146 <EXTI9_5_IRQHandler+0x8e>
 800211c:	e03a      	b.n	8002194 <EXTI9_5_IRQHandler+0xdc>
			case 0:
				digit1 = (digit1 + 9) % 10;
 800211e:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <EXTI9_5_IRQHandler+0x1dc>)
 8002120:	f993 3000 	ldrsb.w	r3, [r3]
 8002124:	f103 0209 	add.w	r2, r3, #9
 8002128:	4b5b      	ldr	r3, [pc, #364]	; (8002298 <EXTI9_5_IRQHandler+0x1e0>)
 800212a:	fb83 1302 	smull	r1, r3, r3, r2
 800212e:	1099      	asrs	r1, r3, #2
 8002130:	17d3      	asrs	r3, r2, #31
 8002132:	1ac9      	subs	r1, r1, r3
 8002134:	460b      	mov	r3, r1
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	1ad1      	subs	r1, r2, r3
 800213e:	b24a      	sxtb	r2, r1
 8002140:	4b54      	ldr	r3, [pc, #336]	; (8002294 <EXTI9_5_IRQHandler+0x1dc>)
 8002142:	701a      	strb	r2, [r3, #0]
				break;
 8002144:	e026      	b.n	8002194 <EXTI9_5_IRQHandler+0xdc>
			case 1:
				digit2 = (digit2 + 9) % 10;
 8002146:	4b55      	ldr	r3, [pc, #340]	; (800229c <EXTI9_5_IRQHandler+0x1e4>)
 8002148:	f993 3000 	ldrsb.w	r3, [r3]
 800214c:	f103 0209 	add.w	r2, r3, #9
 8002150:	4b51      	ldr	r3, [pc, #324]	; (8002298 <EXTI9_5_IRQHandler+0x1e0>)
 8002152:	fb83 1302 	smull	r1, r3, r3, r2
 8002156:	1099      	asrs	r1, r3, #2
 8002158:	17d3      	asrs	r3, r2, #31
 800215a:	1ac9      	subs	r1, r1, r3
 800215c:	460b      	mov	r3, r1
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	1ad1      	subs	r1, r2, r3
 8002166:	b24a      	sxtb	r2, r1
 8002168:	4b4c      	ldr	r3, [pc, #304]	; (800229c <EXTI9_5_IRQHandler+0x1e4>)
 800216a:	701a      	strb	r2, [r3, #0]
				break;
 800216c:	e012      	b.n	8002194 <EXTI9_5_IRQHandler+0xdc>
			case 2:
				digit3 = (digit3 + 9) % 10;
 800216e:	4b4c      	ldr	r3, [pc, #304]	; (80022a0 <EXTI9_5_IRQHandler+0x1e8>)
 8002170:	f993 3000 	ldrsb.w	r3, [r3]
 8002174:	f103 0209 	add.w	r2, r3, #9
 8002178:	4b47      	ldr	r3, [pc, #284]	; (8002298 <EXTI9_5_IRQHandler+0x1e0>)
 800217a:	fb83 1302 	smull	r1, r3, r3, r2
 800217e:	1099      	asrs	r1, r3, #2
 8002180:	17d3      	asrs	r3, r2, #31
 8002182:	1ac9      	subs	r1, r1, r3
 8002184:	460b      	mov	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	1ad1      	subs	r1, r2, r3
 800218e:	b24a      	sxtb	r2, r1
 8002190:	4b43      	ldr	r3, [pc, #268]	; (80022a0 <EXTI9_5_IRQHandler+0x1e8>)
 8002192:	701a      	strb	r2, [r3, #0]
			}
			BPM = digit1 * 100 + digit2 * 10 + digit3;
 8002194:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <EXTI9_5_IRQHandler+0x1dc>)
 8002196:	f993 3000 	ldrsb.w	r3, [r3]
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	461a      	mov	r2, r3
 80021a4:	0091      	lsls	r1, r2, #2
 80021a6:	461a      	mov	r2, r3
 80021a8:	460b      	mov	r3, r1
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <EXTI9_5_IRQHandler+0x1e4>)
 80021b2:	f993 3000 	ldrsb.w	r3, [r3]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4619      	mov	r1, r3
 80021ba:	0089      	lsls	r1, r1, #2
 80021bc:	440b      	add	r3, r1
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <EXTI9_5_IRQHandler+0x1e8>)
 80021c8:	f993 3000 	ldrsb.w	r3, [r3]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <EXTI9_5_IRQHandler+0x1ec>)
 80021d4:	801a      	strh	r2, [r3, #0]
			break;
 80021d6:	e011      	b.n	80021fc <EXTI9_5_IRQHandler+0x144>
		case 1:
			note = (note + 1) % 3;
 80021d8:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <EXTI9_5_IRQHandler+0x1f0>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <EXTI9_5_IRQHandler+0x1d4>)
 80021e2:	fb83 3102 	smull	r3, r1, r3, r2
 80021e6:	17d3      	asrs	r3, r2, #31
 80021e8:	1ac9      	subs	r1, r1, r3
 80021ea:	460b      	mov	r3, r1
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	440b      	add	r3, r1
 80021f0:	1ad1      	subs	r1, r2, r3
 80021f2:	b2ca      	uxtb	r2, r1
 80021f4:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <EXTI9_5_IRQHandler+0x1f0>)
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e000      	b.n	80021fc <EXTI9_5_IRQHandler+0x144>
	}
	}
 80021fa:	bf00      	nop
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET && currentUserface == 2)
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <EXTI9_5_IRQHandler+0x1c8>)
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d014      	beq.n	8002232 <EXTI9_5_IRQHandler+0x17a>
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <EXTI9_5_IRQHandler+0x1cc>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d10f      	bne.n	8002232 <EXTI9_5_IRQHandler+0x17a>
	{
		digit = (digit + 2) % 3;
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <EXTI9_5_IRQHandler+0x1d8>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	1c9a      	adds	r2, r3, #2
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <EXTI9_5_IRQHandler+0x1d4>)
 800221c:	fb83 3102 	smull	r3, r1, r3, r2
 8002220:	17d3      	asrs	r3, r2, #31
 8002222:	1ac9      	subs	r1, r1, r3
 8002224:	460b      	mov	r3, r1
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	440b      	add	r3, r1
 800222a:	1ad1      	subs	r1, r2, r3
 800222c:	b2ca      	uxtb	r2, r1
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <EXTI9_5_IRQHandler+0x1d8>)
 8002230:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET && currentUserface == 2)
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <EXTI9_5_IRQHandler+0x1c8>)
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223a:	2b00      	cmp	r3, #0
 800223c:	d014      	beq.n	8002268 <EXTI9_5_IRQHandler+0x1b0>
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <EXTI9_5_IRQHandler+0x1cc>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d10f      	bne.n	8002268 <EXTI9_5_IRQHandler+0x1b0>
	{
		digit = (digit + 1) % 3;
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <EXTI9_5_IRQHandler+0x1d8>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <EXTI9_5_IRQHandler+0x1d4>)
 8002252:	fb83 3102 	smull	r3, r1, r3, r2
 8002256:	17d3      	asrs	r3, r2, #31
 8002258:	1ac9      	subs	r1, r1, r3
 800225a:	460b      	mov	r3, r1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	440b      	add	r3, r1
 8002260:	1ad1      	subs	r1, r2, r3
 8002262:	b2ca      	uxtb	r2, r1
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <EXTI9_5_IRQHandler+0x1d8>)
 8002266:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002268:	2020      	movs	r0, #32
 800226a:	f000 fc83 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800226e:	2040      	movs	r0, #64	; 0x40
 8002270:	f000 fc80 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002274:	2080      	movs	r0, #128	; 0x80
 8002276:	f000 fc7d 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40010400 	.word	0x40010400
 8002284:	20000093 	.word	0x20000093
 8002288:	20000091 	.word	0x20000091
 800228c:	55555556 	.word	0x55555556
 8002290:	20000094 	.word	0x20000094
 8002294:	200001e4 	.word	0x200001e4
 8002298:	66666667 	.word	0x66666667
 800229c:	200001e5 	.word	0x200001e5
 80022a0:	200001e6 	.word	0x200001e6
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000095 	.word	0x20000095

080022ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM2_IRQHandler+0x10>)
 80022b2:	f001 fa23 	bl	80036fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200000c0 	.word	0x200000c0

080022c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <TIM3_IRQHandler+0x10>)
 80022c6:	f001 fa19 	bl	80036fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000108 	.word	0x20000108

080022d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
//		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
//		HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
//		prev = now;
//		now = 1;
//	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <EXTI15_10_IRQHandler+0x38>)
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00d      	beq.n	8002300 <EXTI15_10_IRQHandler+0x2c>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <EXTI15_10_IRQHandler+0x38>)
 80022e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ea:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 80022ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022f0:	f000 fc58 	bl	8002ba4 <HAL_GPIO_EXTI_Callback>
		exitUserface = 1;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <EXTI15_10_IRQHandler+0x3c>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
		back = 1;
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <EXTI15_10_IRQHandler+0x40>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002300:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002304:	f000 fc36 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40010400 	.word	0x40010400
 8002310:	20000090 	.word	0x20000090
 8002314:	20000092 	.word	0x20000092

08002318 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
	return 1;
 800231c:	2301      	movs	r3, #1
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <_kill>:

int _kill(int pid, int sig)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002330:	f002 f8b6 	bl	80044a0 <__errno>
 8002334:	4603      	mov	r3, r0
 8002336:	2216      	movs	r2, #22
 8002338:	601a      	str	r2, [r3, #0]
	return -1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_exit>:

void _exit (int status)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800234e:	f04f 31ff 	mov.w	r1, #4294967295
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffe7 	bl	8002326 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002358:	e7fe      	b.n	8002358 <_exit+0x12>

0800235a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	e00a      	b.n	8002382 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800236c:	f3af 8000 	nop.w
 8002370:	4601      	mov	r1, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	60ba      	str	r2, [r7, #8]
 8002378:	b2ca      	uxtb	r2, r1
 800237a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	dbf0      	blt.n	800236c <_read+0x12>
	}

return len;
 800238a:	687b      	ldr	r3, [r7, #4]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	e009      	b.n	80023ba <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	60ba      	str	r2, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3301      	adds	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbf1      	blt.n	80023a6 <_write+0x12>
	}
	return len;
 80023c2:	687b      	ldr	r3, [r7, #4]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_close>:

int _close(int file)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	return -1;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f2:	605a      	str	r2, [r3, #4]
	return 0;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <_isatty>:

int _isatty(int file)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	return 1;
 8002408:	2301      	movs	r3, #1
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
	return 0;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	return -1;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
	...

08002444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <_sbrk+0x5c>)
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <_sbrk+0x60>)
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <_sbrk+0x64>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <_sbrk+0x68>)
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	429a      	cmp	r2, r3
 8002472:	d207      	bcs.n	8002484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002474:	f002 f814 	bl	80044a0 <__errno>
 8002478:	4603      	mov	r3, r0
 800247a:	220c      	movs	r2, #12
 800247c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	e009      	b.n	8002498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <_sbrk+0x64>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <_sbrk+0x64>)
 8002494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20010000 	.word	0x20010000
 80024a4:	00000400 	.word	0x00000400
 80024a8:	200001e8 	.word	0x200001e8
 80024ac:	20000200 	.word	0x20000200

080024b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024bc:	480c      	ldr	r0, [pc, #48]	; (80024f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024be:	490d      	ldr	r1, [pc, #52]	; (80024f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024c0:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c4:	e002      	b.n	80024cc <LoopCopyDataInit>

080024c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ca:	3304      	adds	r3, #4

080024cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d0:	d3f9      	bcc.n	80024c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024d4:	4c0a      	ldr	r4, [pc, #40]	; (8002500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d8:	e001      	b.n	80024de <LoopFillZerobss>

080024da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024dc:	3204      	adds	r2, #4

080024de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e0:	d3fb      	bcc.n	80024da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024e2:	f7ff ffe5 	bl	80024b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e6:	f001 ffe1 	bl	80044ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ea:	f7fe ff07 	bl	80012fc <main>
  bx lr
 80024ee:	4770      	bx	lr
  ldr r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80024f8:	08006464 	.word	0x08006464
  ldr r2, =_sbss
 80024fc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002500:	20000200 	.word	0x20000200

08002504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC1_2_IRQHandler>
	...

08002508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_Init+0x28>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_Init+0x28>)
 8002512:	f043 0310 	orr.w	r3, r3, #16
 8002516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002518:	2003      	movs	r0, #3
 800251a:	f000 f923 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251e:	200f      	movs	r0, #15
 8002520:	f000 f808 	bl	8002534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002524:	f7ff fbc4 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40022000 	.word	0x40022000

08002534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x54>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_InitTick+0x58>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254a:	fbb3 f3f1 	udiv	r3, r3, r1
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f93b 	bl	80027ce <HAL_SYSTICK_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e00e      	b.n	8002580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b0f      	cmp	r3, #15
 8002566:	d80a      	bhi.n	800257e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002568:	2200      	movs	r2, #0
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f000 f903 	bl	800277a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002574:	4a06      	ldr	r2, [pc, #24]	; (8002590 <HAL_InitTick+0x5c>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000004 	.word	0x20000004
 800258c:	2000000c 	.word	0x2000000c
 8002590:	20000008 	.word	0x20000008

08002594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_IncTick+0x1c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_IncTick+0x20>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	4a03      	ldr	r2, [pc, #12]	; (80025b4 <HAL_IncTick+0x20>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	2000000c 	.word	0x2000000c
 80025b4:	200001ec 	.word	0x200001ec

080025b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <HAL_GetTick+0x10>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	200001ec 	.word	0x200001ec

080025cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0b      	blt.n	800265a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4906      	ldr	r1, [pc, #24]	; (8002664 <__NVIC_EnableIRQ+0x34>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	db0a      	blt.n	8002692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	490c      	ldr	r1, [pc, #48]	; (80026b4 <__NVIC_SetPriority+0x4c>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	0112      	lsls	r2, r2, #4
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	440b      	add	r3, r1
 800268c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002690:	e00a      	b.n	80026a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4908      	ldr	r1, [pc, #32]	; (80026b8 <__NVIC_SetPriority+0x50>)
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	3b04      	subs	r3, #4
 80026a0:	0112      	lsls	r2, r2, #4
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	440b      	add	r3, r1
 80026a6:	761a      	strb	r2, [r3, #24]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000e100 	.word	0xe000e100
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f1c3 0307 	rsb	r3, r3, #7
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	bf28      	it	cs
 80026da:	2304      	movcs	r3, #4
 80026dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d902      	bls.n	80026ec <NVIC_EncodePriority+0x30>
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3b03      	subs	r3, #3
 80026ea:	e000      	b.n	80026ee <NVIC_EncodePriority+0x32>
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	401a      	ands	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002704:	f04f 31ff 	mov.w	r1, #4294967295
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	43d9      	mvns	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	4313      	orrs	r3, r2
         );
}
 8002716:	4618      	mov	r0, r3
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f7ff ff90 	bl	8002668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff2d 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278c:	f7ff ff42 	bl	8002614 <__NVIC_GetPriorityGrouping>
 8002790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff90 	bl	80026bc <NVIC_EncodePriority>
 800279c:	4602      	mov	r2, r0
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff5f 	bl	8002668 <__NVIC_SetPriority>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff35 	bl	8002630 <__NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffa2 	bl	8002720 <SysTick_Config>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b08b      	sub	sp, #44	; 0x2c
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027f6:	2300      	movs	r3, #0
 80027f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fa:	e179      	b.n	8002af0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027fc:	2201      	movs	r2, #1
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	429a      	cmp	r2, r3
 8002816:	f040 8168 	bne.w	8002aea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a96      	ldr	r2, [pc, #600]	; (8002a78 <HAL_GPIO_Init+0x290>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d05e      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
 8002824:	4a94      	ldr	r2, [pc, #592]	; (8002a78 <HAL_GPIO_Init+0x290>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d875      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 800282a:	4a94      	ldr	r2, [pc, #592]	; (8002a7c <HAL_GPIO_Init+0x294>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d058      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
 8002830:	4a92      	ldr	r2, [pc, #584]	; (8002a7c <HAL_GPIO_Init+0x294>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d86f      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 8002836:	4a92      	ldr	r2, [pc, #584]	; (8002a80 <HAL_GPIO_Init+0x298>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d052      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
 800283c:	4a90      	ldr	r2, [pc, #576]	; (8002a80 <HAL_GPIO_Init+0x298>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d869      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 8002842:	4a90      	ldr	r2, [pc, #576]	; (8002a84 <HAL_GPIO_Init+0x29c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d04c      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
 8002848:	4a8e      	ldr	r2, [pc, #568]	; (8002a84 <HAL_GPIO_Init+0x29c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d863      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 800284e:	4a8e      	ldr	r2, [pc, #568]	; (8002a88 <HAL_GPIO_Init+0x2a0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d046      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
 8002854:	4a8c      	ldr	r2, [pc, #560]	; (8002a88 <HAL_GPIO_Init+0x2a0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d85d      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 800285a:	2b12      	cmp	r3, #18
 800285c:	d82a      	bhi.n	80028b4 <HAL_GPIO_Init+0xcc>
 800285e:	2b12      	cmp	r3, #18
 8002860:	d859      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 8002862:	a201      	add	r2, pc, #4	; (adr r2, 8002868 <HAL_GPIO_Init+0x80>)
 8002864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002868:	080028e3 	.word	0x080028e3
 800286c:	080028bd 	.word	0x080028bd
 8002870:	080028cf 	.word	0x080028cf
 8002874:	08002911 	.word	0x08002911
 8002878:	08002917 	.word	0x08002917
 800287c:	08002917 	.word	0x08002917
 8002880:	08002917 	.word	0x08002917
 8002884:	08002917 	.word	0x08002917
 8002888:	08002917 	.word	0x08002917
 800288c:	08002917 	.word	0x08002917
 8002890:	08002917 	.word	0x08002917
 8002894:	08002917 	.word	0x08002917
 8002898:	08002917 	.word	0x08002917
 800289c:	08002917 	.word	0x08002917
 80028a0:	08002917 	.word	0x08002917
 80028a4:	08002917 	.word	0x08002917
 80028a8:	08002917 	.word	0x08002917
 80028ac:	080028c5 	.word	0x080028c5
 80028b0:	080028d9 	.word	0x080028d9
 80028b4:	4a75      	ldr	r2, [pc, #468]	; (8002a8c <HAL_GPIO_Init+0x2a4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028ba:	e02c      	b.n	8002916 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	623b      	str	r3, [r7, #32]
          break;
 80028c2:	e029      	b.n	8002918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	3304      	adds	r3, #4
 80028ca:	623b      	str	r3, [r7, #32]
          break;
 80028cc:	e024      	b.n	8002918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	3308      	adds	r3, #8
 80028d4:	623b      	str	r3, [r7, #32]
          break;
 80028d6:	e01f      	b.n	8002918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	330c      	adds	r3, #12
 80028de:	623b      	str	r3, [r7, #32]
          break;
 80028e0:	e01a      	b.n	8002918 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028ea:	2304      	movs	r3, #4
 80028ec:	623b      	str	r3, [r7, #32]
          break;
 80028ee:	e013      	b.n	8002918 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028f8:	2308      	movs	r3, #8
 80028fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	611a      	str	r2, [r3, #16]
          break;
 8002902:	e009      	b.n	8002918 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002904:	2308      	movs	r3, #8
 8002906:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	615a      	str	r2, [r3, #20]
          break;
 800290e:	e003      	b.n	8002918 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
          break;
 8002914:	e000      	b.n	8002918 <HAL_GPIO_Init+0x130>
          break;
 8002916:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2bff      	cmp	r3, #255	; 0xff
 800291c:	d801      	bhi.n	8002922 <HAL_GPIO_Init+0x13a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	e001      	b.n	8002926 <HAL_GPIO_Init+0x13e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3304      	adds	r3, #4
 8002926:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2bff      	cmp	r3, #255	; 0xff
 800292c:	d802      	bhi.n	8002934 <HAL_GPIO_Init+0x14c>
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	e002      	b.n	800293a <HAL_GPIO_Init+0x152>
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	3b08      	subs	r3, #8
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	210f      	movs	r1, #15
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	6a39      	ldr	r1, [r7, #32]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	fa01 f303 	lsl.w	r3, r1, r3
 8002954:	431a      	orrs	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80c1 	beq.w	8002aea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002968:	4b49      	ldr	r3, [pc, #292]	; (8002a90 <HAL_GPIO_Init+0x2a8>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	4a48      	ldr	r2, [pc, #288]	; (8002a90 <HAL_GPIO_Init+0x2a8>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6193      	str	r3, [r2, #24]
 8002974:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <HAL_GPIO_Init+0x2a8>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002980:	4a44      	ldr	r2, [pc, #272]	; (8002a94 <HAL_GPIO_Init+0x2ac>)
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4013      	ands	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3c      	ldr	r2, [pc, #240]	; (8002a98 <HAL_GPIO_Init+0x2b0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d01f      	beq.n	80029ec <HAL_GPIO_Init+0x204>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3b      	ldr	r2, [pc, #236]	; (8002a9c <HAL_GPIO_Init+0x2b4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d019      	beq.n	80029e8 <HAL_GPIO_Init+0x200>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3a      	ldr	r2, [pc, #232]	; (8002aa0 <HAL_GPIO_Init+0x2b8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_GPIO_Init+0x1fc>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a39      	ldr	r2, [pc, #228]	; (8002aa4 <HAL_GPIO_Init+0x2bc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00d      	beq.n	80029e0 <HAL_GPIO_Init+0x1f8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <HAL_GPIO_Init+0x2c0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <HAL_GPIO_Init+0x1f4>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a37      	ldr	r2, [pc, #220]	; (8002aac <HAL_GPIO_Init+0x2c4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d101      	bne.n	80029d8 <HAL_GPIO_Init+0x1f0>
 80029d4:	2305      	movs	r3, #5
 80029d6:	e00a      	b.n	80029ee <HAL_GPIO_Init+0x206>
 80029d8:	2306      	movs	r3, #6
 80029da:	e008      	b.n	80029ee <HAL_GPIO_Init+0x206>
 80029dc:	2304      	movs	r3, #4
 80029de:	e006      	b.n	80029ee <HAL_GPIO_Init+0x206>
 80029e0:	2303      	movs	r3, #3
 80029e2:	e004      	b.n	80029ee <HAL_GPIO_Init+0x206>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e002      	b.n	80029ee <HAL_GPIO_Init+0x206>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_GPIO_Init+0x206>
 80029ec:	2300      	movs	r3, #0
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	f002 0203 	and.w	r2, r2, #3
 80029f4:	0092      	lsls	r2, r2, #2
 80029f6:	4093      	lsls	r3, r2
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029fe:	4925      	ldr	r1, [pc, #148]	; (8002a94 <HAL_GPIO_Init+0x2ac>)
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3302      	adds	r3, #2
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_GPIO_Init+0x2c8>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4924      	ldr	r1, [pc, #144]	; (8002ab0 <HAL_GPIO_Init+0x2c8>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_GPIO_Init+0x2c8>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	4920      	ldr	r1, [pc, #128]	; (8002ab0 <HAL_GPIO_Init+0x2c8>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <HAL_GPIO_Init+0x2c8>)
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	491a      	ldr	r1, [pc, #104]	; (8002ab0 <HAL_GPIO_Init+0x2c8>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_GPIO_Init+0x2c8>)
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	4916      	ldr	r1, [pc, #88]	; (8002ab0 <HAL_GPIO_Init+0x2c8>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d025      	beq.n	8002ab4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_GPIO_Init+0x2c8>)
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	4910      	ldr	r1, [pc, #64]	; (8002ab0 <HAL_GPIO_Init+0x2c8>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]
 8002a74:	e025      	b.n	8002ac2 <HAL_GPIO_Init+0x2da>
 8002a76:	bf00      	nop
 8002a78:	10320000 	.word	0x10320000
 8002a7c:	10310000 	.word	0x10310000
 8002a80:	10220000 	.word	0x10220000
 8002a84:	10210000 	.word	0x10210000
 8002a88:	10120000 	.word	0x10120000
 8002a8c:	10110000 	.word	0x10110000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40010800 	.word	0x40010800
 8002a9c:	40010c00 	.word	0x40010c00
 8002aa0:	40011000 	.word	0x40011000
 8002aa4:	40011400 	.word	0x40011400
 8002aa8:	40011800 	.word	0x40011800
 8002aac:	40011c00 	.word	0x40011c00
 8002ab0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	4913      	ldr	r1, [pc, #76]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	490e      	ldr	r1, [pc, #56]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60cb      	str	r3, [r1, #12]
 8002ada:	e006      	b.n	8002aea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	4909      	ldr	r1, [pc, #36]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	3301      	adds	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f47f ae7e 	bne.w	80027fc <HAL_GPIO_Init+0x14>
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	372c      	adds	r7, #44	; 0x2c
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40010400 	.word	0x40010400

08002b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b20:	787b      	ldrb	r3, [r7, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b2c:	e003      	b.n	8002b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	041a      	lsls	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	611a      	str	r2, [r3, #16]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4013      	ands	r3, r2
 8002b58:	041a      	lsls	r2, r3, #16
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	43d9      	mvns	r1, r3
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	400b      	ands	r3, r1
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	611a      	str	r2, [r3, #16]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b8a:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f806 	bl	8002ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40010400 	.word	0x40010400

08002ba4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e272      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8087 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd8:	4b92      	ldr	r3, [pc, #584]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d00c      	beq.n	8002bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002be4:	4b8f      	ldr	r3, [pc, #572]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d112      	bne.n	8002c16 <HAL_RCC_OscConfig+0x5e>
 8002bf0:	4b8c      	ldr	r3, [pc, #560]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfc:	d10b      	bne.n	8002c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfe:	4b89      	ldr	r3, [pc, #548]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d06c      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x12c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d168      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e24c      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x76>
 8002c20:	4b80      	ldr	r3, [pc, #512]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a7f      	ldr	r2, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e02e      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x98>
 8002c36:	4b7b      	ldr	r3, [pc, #492]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7a      	ldr	r2, [pc, #488]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b78      	ldr	r3, [pc, #480]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a77      	ldr	r2, [pc, #476]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e01d      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0xbc>
 8002c5a:	4b72      	ldr	r3, [pc, #456]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a71      	ldr	r2, [pc, #452]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6e      	ldr	r2, [pc, #440]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c74:	4b6b      	ldr	r3, [pc, #428]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6a      	ldr	r2, [pc, #424]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a67      	ldr	r2, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d013      	beq.n	8002cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7ff fc90 	bl	80025b8 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7ff fc8c 	bl	80025b8 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e200      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b5d      	ldr	r3, [pc, #372]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0xe4>
 8002cba:	e014      	b.n	8002ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7ff fc7c 	bl	80025b8 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7ff fc78 	bl	80025b8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1ec      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x10c>
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d063      	beq.n	8002dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf2:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cfe:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d11c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x18c>
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d116      	bne.n	8002d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_RCC_OscConfig+0x176>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e1c0      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4939      	ldr	r1, [pc, #228]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	e03a      	b.n	8002dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4c:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7ff fc31 	bl	80025b8 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5a:	f7ff fc2d 	bl	80025b8 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e1a1      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4927      	ldr	r1, [pc, #156]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
 8002d8c:	e015      	b.n	8002dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_RCC_OscConfig+0x270>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7ff fc10 	bl	80025b8 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7ff fc0c 	bl	80025b8 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e180      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d03a      	beq.n	8002e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d019      	beq.n	8002e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7ff fbf0 	bl	80025b8 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7ff fbec 	bl	80025b8 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e160      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f000 fade 	bl	80033bc <RCC_Delay>
 8002e00:	e01c      	b.n	8002e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7ff fbd6 	bl	80025b8 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0e:	e00f      	b.n	8002e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e10:	f7ff fbd2 	bl	80025b8 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d908      	bls.n	8002e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e146      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	42420000 	.word	0x42420000
 8002e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	4b92      	ldr	r3, [pc, #584]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e9      	bne.n	8002e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80a6 	beq.w	8002f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4e:	4b8b      	ldr	r3, [pc, #556]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4a87      	ldr	r2, [pc, #540]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e64:	61d3      	str	r3, [r2, #28]
 8002e66:	4b85      	ldr	r3, [pc, #532]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b82      	ldr	r3, [pc, #520]	; (8003080 <HAL_RCC_OscConfig+0x4c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b7f      	ldr	r3, [pc, #508]	; (8003080 <HAL_RCC_OscConfig+0x4c8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7e      	ldr	r2, [pc, #504]	; (8003080 <HAL_RCC_OscConfig+0x4c8>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7ff fb93 	bl	80025b8 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7ff fb8f 	bl	80025b8 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b64      	cmp	r3, #100	; 0x64
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e103      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b75      	ldr	r3, [pc, #468]	; (8003080 <HAL_RCC_OscConfig+0x4c8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x312>
 8002ebc:	4b6f      	ldr	r3, [pc, #444]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a6e      	ldr	r2, [pc, #440]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	e02d      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x334>
 8002ed2:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a69      	ldr	r2, [pc, #420]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a66      	ldr	r2, [pc, #408]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	e01c      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCC_OscConfig+0x356>
 8002ef4:	4b61      	ldr	r3, [pc, #388]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4a60      	ldr	r2, [pc, #384]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	6213      	str	r3, [r2, #32]
 8002f00:	4b5e      	ldr	r3, [pc, #376]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a5d      	ldr	r2, [pc, #372]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	e00b      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a5a      	ldr	r2, [pc, #360]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	6213      	str	r3, [r2, #32]
 8002f1a:	4b58      	ldr	r3, [pc, #352]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a57      	ldr	r2, [pc, #348]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	f023 0304 	bic.w	r3, r3, #4
 8002f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d015      	beq.n	8002f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7ff fb43 	bl	80025b8 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7ff fb3f 	bl	80025b8 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e0b1      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	4b4b      	ldr	r3, [pc, #300]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ee      	beq.n	8002f36 <HAL_RCC_OscConfig+0x37e>
 8002f58:	e014      	b.n	8002f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7ff fb2d 	bl	80025b8 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7ff fb29 	bl	80025b8 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e09b      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f78:	4b40      	ldr	r3, [pc, #256]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ee      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8a:	4b3c      	ldr	r3, [pc, #240]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8087 	beq.w	80030ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa0:	4b36      	ldr	r3, [pc, #216]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d061      	beq.n	8003070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d146      	bne.n	8003042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb4:	4b33      	ldr	r3, [pc, #204]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fba:	f7ff fafd 	bl	80025b8 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7ff faf9 	bl	80025b8 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e06d      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd4:	4b29      	ldr	r3, [pc, #164]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f0      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d108      	bne.n	8002ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fea:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4921      	ldr	r1, [pc, #132]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a19      	ldr	r1, [r3, #32]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	430b      	orrs	r3, r1
 800300e:	491b      	ldr	r1, [pc, #108]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7ff facd 	bl	80025b8 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7ff fac9 	bl	80025b8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e03d      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x46a>
 8003040:	e035      	b.n	80030ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7ff fab6 	bl	80025b8 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003050:	f7ff fab2 	bl	80025b8 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e026      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_RCC_OscConfig+0x4c4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x498>
 800306e:	e01e      	b.n	80030ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e019      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
 800307c:	40021000 	.word	0x40021000
 8003080:	40007000 	.word	0x40007000
 8003084:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_OscConfig+0x500>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	429a      	cmp	r2, r3
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0d0      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d0:	4b6a      	ldr	r3, [pc, #424]	; (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d910      	bls.n	8003100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b67      	ldr	r3, [pc, #412]	; (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 0207 	bic.w	r2, r3, #7
 80030e6:	4965      	ldr	r1, [pc, #404]	; (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b63      	ldr	r3, [pc, #396]	; (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0b8      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003118:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a58      	ldr	r2, [pc, #352]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003122:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003130:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4a52      	ldr	r2, [pc, #328]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800313a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	494d      	ldr	r1, [pc, #308]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d040      	beq.n	80031dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d115      	bne.n	800319a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e07f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317a:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e073      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06b      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319a:	4b39      	ldr	r3, [pc, #228]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f023 0203 	bic.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4936      	ldr	r1, [pc, #216]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ac:	f7ff fa04 	bl	80025b8 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b4:	f7ff fa00 	bl	80025b8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e053      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 020c 	and.w	r2, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	429a      	cmp	r2, r3
 80031da:	d1eb      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d210      	bcs.n	800320c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4922      	ldr	r1, [pc, #136]	; (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e032      	b.n	8003272 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4916      	ldr	r1, [pc, #88]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	490e      	ldr	r1, [pc, #56]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800324a:	f000 f859 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 800324e:	4602      	mov	r2, r0
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	490a      	ldr	r1, [pc, #40]	; (8003284 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	5ccb      	ldrb	r3, [r1, r3]
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	4a09      	ldr	r2, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1cc>)
 8003264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1d0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f962 	bl	8002534 <HAL_InitTick>

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40022000 	.word	0x40022000
 8003280:	40021000 	.word	0x40021000
 8003284:	08006304 	.word	0x08006304
 8003288:	20000004 	.word	0x20000004
 800328c:	20000008 	.word	0x20000008

08003290 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 800329c:	f107 0318 	add.w	r3, r7, #24
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80032aa:	2302      	movs	r3, #2
 80032ac:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80032ae:	2303      	movs	r3, #3
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80032b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ba:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <HAL_RCC_MCOConfig+0x68>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	4a0d      	ldr	r2, [pc, #52]	; (80032f8 <HAL_RCC_MCOConfig+0x68>)
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	6193      	str	r3, [r2, #24]
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_RCC_MCOConfig+0x68>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80032d4:	f107 0318 	add.w	r3, r7, #24
 80032d8:	4619      	mov	r1, r3
 80032da:	4808      	ldr	r0, [pc, #32]	; (80032fc <HAL_RCC_MCOConfig+0x6c>)
 80032dc:	f7ff fa84 	bl	80027e8 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_MCOConfig+0x68>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80032e8:	4903      	ldr	r1, [pc, #12]	; (80032f8 <HAL_RCC_MCOConfig+0x68>)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
}
 80032f0:	bf00      	nop
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40010800 	.word	0x40010800

08003300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003300:	b490      	push	{r4, r7}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003306:	4b29      	ldr	r3, [pc, #164]	; (80033ac <HAL_RCC_GetSysClockFreq+0xac>)
 8003308:	1d3c      	adds	r4, r7, #4
 800330a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800330c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003310:	f240 2301 	movw	r3, #513	; 0x201
 8003314:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800332a:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b04      	cmp	r3, #4
 8003338:	d002      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x40>
 800333a:	2b08      	cmp	r3, #8
 800333c:	d003      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x46>
 800333e:	e02b      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003340:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003342:	623b      	str	r3, [r7, #32]
      break;
 8003344:	e02b      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	0c9b      	lsrs	r3, r3, #18
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	3328      	adds	r3, #40	; 0x28
 8003350:	443b      	add	r3, r7
 8003352:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003356:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d012      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	0c5b      	lsrs	r3, r3, #17
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	3328      	adds	r3, #40	; 0x28
 800336e:	443b      	add	r3, r7
 8003370:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003374:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800337a:	fb03 f202 	mul.w	r2, r3, r2
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
 8003386:	e004      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	623b      	str	r3, [r7, #32]
      break;
 8003396:	e002      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800339a:	623b      	str	r3, [r7, #32]
      break;
 800339c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800339e:	6a3b      	ldr	r3, [r7, #32]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3728      	adds	r7, #40	; 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc90      	pop	{r4, r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	08005ac4 	.word	0x08005ac4
 80033b0:	40021000 	.word	0x40021000
 80033b4:	007a1200 	.word	0x007a1200
 80033b8:	003d0900 	.word	0x003d0900

080033bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <RCC_Delay+0x34>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <RCC_Delay+0x38>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0a5b      	lsrs	r3, r3, #9
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033d8:	bf00      	nop
  }
  while (Delay --);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1e5a      	subs	r2, r3, #1
 80033de:	60fa      	str	r2, [r7, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f9      	bne.n	80033d8 <RCC_Delay+0x1c>
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	20000004 	.word	0x20000004
 80033f4:	10624dd3 	.word	0x10624dd3

080033f8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d004      	beq.n	8003414 <HAL_SRAM_Init+0x1c>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003412:	d101      	bne.n	8003418 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e038      	b.n	800348a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d106      	bne.n	8003432 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7fe fd3d 	bl	8001eac <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3308      	adds	r3, #8
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f000 ff45 	bl	80042cc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	461a      	mov	r2, r3
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	f000 ffa7 	bl	80043a0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6858      	ldr	r0, [r3, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	f000 ffd2 	bl	8004408 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	6892      	ldr	r2, [r2, #8]
 800346c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	6892      	ldr	r2, [r2, #8]
 8003478:	f041 0101 	orr.w	r1, r1, #1
 800347c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e041      	b.n	8003528 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d106      	bne.n	80034be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7fe fc2b 	bl	8001d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3304      	adds	r3, #4
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f000 fbc1 	bl	8003c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d001      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e044      	b.n	80035d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <HAL_TIM_Base_Start_IT+0xac>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d018      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x6c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d013      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x6c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357c:	d00e      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x6c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d009      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x6c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <HAL_TIM_Base_Start_IT+0xb8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x6c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a15      	ldr	r2, [pc, #84]	; (80035ec <HAL_TIM_Base_Start_IT+0xbc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d111      	bne.n	80035c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d010      	beq.n	80035d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035be:	e007      	b.n	80035d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40013400 	.word	0x40013400
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800
 80035ec:	40000c00 	.word	0x40000c00

080035f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a1a      	ldr	r2, [r3, #32]
 800360e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10f      	bne.n	8003638 <HAL_TIM_Base_Stop_IT+0x48>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6a1a      	ldr	r2, [r3, #32]
 800361e:	f240 4344 	movw	r3, #1092	; 0x444
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <HAL_TIM_Base_Stop_IT+0x48>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e041      	b.n	80036e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f839 	bl	80036ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f000 fae4 	bl	8003c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b02      	cmp	r3, #2
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b02      	cmp	r3, #2
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0202 	mvn.w	r2, #2
 8003728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fa6f 	bl	8003c22 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa62 	bl	8003c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fa71 	bl	8003c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b04      	cmp	r3, #4
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b04      	cmp	r3, #4
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0204 	mvn.w	r2, #4
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fa45 	bl	8003c22 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa38 	bl	8003c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fa47 	bl	8003c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0208 	mvn.w	r2, #8
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2204      	movs	r2, #4
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fa1b 	bl	8003c22 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa0e 	bl	8003c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fa1d 	bl	8003c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b10      	cmp	r3, #16
 800380c:	d122      	bne.n	8003854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b10      	cmp	r3, #16
 800381a:	d11b      	bne.n	8003854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0210 	mvn.w	r2, #16
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2208      	movs	r2, #8
 800382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f9f1 	bl	8003c22 <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9e4 	bl	8003c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f9f3 	bl	8003c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d10e      	bne.n	8003880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d107      	bne.n	8003880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0201 	mvn.w	r2, #1
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd ffee 	bl	800185c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b80      	cmp	r3, #128	; 0x80
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b80      	cmp	r3, #128	; 0x80
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fd07 	bl	80042ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f9b7 	bl	8003c46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d10e      	bne.n	8003904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0220 	mvn.w	r2, #32
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fcd2 	bl	80042a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003922:	2302      	movs	r3, #2
 8003924:	e0ac      	b.n	8003a80 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	f200 809f 	bhi.w	8003a74 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	08003971 	.word	0x08003971
 8003940:	08003a75 	.word	0x08003a75
 8003944:	08003a75 	.word	0x08003a75
 8003948:	08003a75 	.word	0x08003a75
 800394c:	080039b1 	.word	0x080039b1
 8003950:	08003a75 	.word	0x08003a75
 8003954:	08003a75 	.word	0x08003a75
 8003958:	08003a75 	.word	0x08003a75
 800395c:	080039f3 	.word	0x080039f3
 8003960:	08003a75 	.word	0x08003a75
 8003964:	08003a75 	.word	0x08003a75
 8003968:	08003a75 	.word	0x08003a75
 800396c:	08003a33 	.word	0x08003a33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f9e8 	bl	8003d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0208 	orr.w	r2, r2, #8
 800398a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0204 	bic.w	r2, r2, #4
 800399a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6999      	ldr	r1, [r3, #24]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	619a      	str	r2, [r3, #24]
      break;
 80039ae:	e062      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fa38 	bl	8003e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6999      	ldr	r1, [r3, #24]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	021a      	lsls	r2, r3, #8
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	619a      	str	r2, [r3, #24]
      break;
 80039f0:	e041      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fa8b 	bl	8003f14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69da      	ldr	r2, [r3, #28]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0208 	orr.w	r2, r2, #8
 8003a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0204 	bic.w	r2, r2, #4
 8003a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69d9      	ldr	r1, [r3, #28]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	61da      	str	r2, [r3, #28]
      break;
 8003a30:	e021      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fadf 	bl	8003ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69d9      	ldr	r1, [r3, #28]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	021a      	lsls	r2, r3, #8
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	61da      	str	r2, [r3, #28]
      break;
 8003a72:	e000      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003a74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIM_ConfigClockSource+0x18>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e0b3      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x180>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ac6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad8:	d03e      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0xd0>
 8003ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ade:	f200 8087 	bhi.w	8003bf0 <HAL_TIM_ConfigClockSource+0x168>
 8003ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae6:	f000 8085 	beq.w	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aee:	d87f      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x168>
 8003af0:	2b70      	cmp	r3, #112	; 0x70
 8003af2:	d01a      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0xa2>
 8003af4:	2b70      	cmp	r3, #112	; 0x70
 8003af6:	d87b      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x168>
 8003af8:	2b60      	cmp	r3, #96	; 0x60
 8003afa:	d050      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x116>
 8003afc:	2b60      	cmp	r3, #96	; 0x60
 8003afe:	d877      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x168>
 8003b00:	2b50      	cmp	r3, #80	; 0x50
 8003b02:	d03c      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0xf6>
 8003b04:	2b50      	cmp	r3, #80	; 0x50
 8003b06:	d873      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x168>
 8003b08:	2b40      	cmp	r3, #64	; 0x40
 8003b0a:	d058      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x136>
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d86f      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x168>
 8003b10:	2b30      	cmp	r3, #48	; 0x30
 8003b12:	d064      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x156>
 8003b14:	2b30      	cmp	r3, #48	; 0x30
 8003b16:	d86b      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x168>
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d060      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x156>
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d867      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x168>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d05c      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x156>
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d05a      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b28:	e062      	b.n	8003bf0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6899      	ldr	r1, [r3, #8]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f000 fb2a 	bl	8004192 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	609a      	str	r2, [r3, #8]
      break;
 8003b56:	e04e      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	6899      	ldr	r1, [r3, #8]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f000 fb13 	bl	8004192 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b7a:	609a      	str	r2, [r3, #8]
      break;
 8003b7c:	e03b      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f000 fa8a 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2150      	movs	r1, #80	; 0x50
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fae1 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e02b      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f000 faa8 	bl	8004100 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2160      	movs	r1, #96	; 0x60
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fad1 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 8003bbc:	e01b      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6859      	ldr	r1, [r3, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f000 fa6a 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2140      	movs	r1, #64	; 0x40
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fac1 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 8003bdc:	e00b      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4619      	mov	r1, r3
 8003be8:	4610      	mov	r0, r2
 8003bea:	f000 fab8 	bl	800415e <TIM_ITRx_SetConfig>
        break;
 8003bee:	e002      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bf0:	bf00      	nop
 8003bf2:	e000      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bf4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a33      	ldr	r2, [pc, #204]	; (8003d38 <TIM_Base_SetConfig+0xe0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a32      	ldr	r2, [pc, #200]	; (8003d3c <TIM_Base_SetConfig+0xe4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00f      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d00b      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a2f      	ldr	r2, [pc, #188]	; (8003d40 <TIM_Base_SetConfig+0xe8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a2e      	ldr	r2, [pc, #184]	; (8003d44 <TIM_Base_SetConfig+0xec>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a2d      	ldr	r2, [pc, #180]	; (8003d48 <TIM_Base_SetConfig+0xf0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d108      	bne.n	8003caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <TIM_Base_SetConfig+0xe0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <TIM_Base_SetConfig+0x82>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <TIM_Base_SetConfig+0xe4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00f      	beq.n	8003cda <TIM_Base_SetConfig+0x82>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc0:	d00b      	beq.n	8003cda <TIM_Base_SetConfig+0x82>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1e      	ldr	r2, [pc, #120]	; (8003d40 <TIM_Base_SetConfig+0xe8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <TIM_Base_SetConfig+0x82>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <TIM_Base_SetConfig+0xec>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_Base_SetConfig+0x82>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <TIM_Base_SetConfig+0xf0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d108      	bne.n	8003cec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <TIM_Base_SetConfig+0xe0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_Base_SetConfig+0xc8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <TIM_Base_SetConfig+0xe4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d103      	bne.n	8003d28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	615a      	str	r2, [r3, #20]
}
 8003d2e:	bf00      	nop
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40013400 	.word	0x40013400
 8003d40:	40000400 	.word	0x40000400
 8003d44:	40000800 	.word	0x40000800
 8003d48:	40000c00 	.word	0x40000c00

08003d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f023 0201 	bic.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f023 0302 	bic.w	r3, r3, #2
 8003d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a20      	ldr	r2, [pc, #128]	; (8003e24 <TIM_OC1_SetConfig+0xd8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_OC1_SetConfig+0x64>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a1f      	ldr	r2, [pc, #124]	; (8003e28 <TIM_OC1_SetConfig+0xdc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d10c      	bne.n	8003dca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0308 	bic.w	r3, r3, #8
 8003db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f023 0304 	bic.w	r3, r3, #4
 8003dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <TIM_OC1_SetConfig+0xd8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d003      	beq.n	8003dda <TIM_OC1_SetConfig+0x8e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <TIM_OC1_SetConfig+0xdc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d111      	bne.n	8003dfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	621a      	str	r2, [r3, #32]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40013400 	.word	0x40013400

08003e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f023 0210 	bic.w	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0320 	bic.w	r3, r3, #32
 8003e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a21      	ldr	r2, [pc, #132]	; (8003f0c <TIM_OC2_SetConfig+0xe0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_OC2_SetConfig+0x68>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a20      	ldr	r2, [pc, #128]	; (8003f10 <TIM_OC2_SetConfig+0xe4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10d      	bne.n	8003eb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <TIM_OC2_SetConfig+0xe0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_OC2_SetConfig+0x94>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <TIM_OC2_SetConfig+0xe4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d113      	bne.n	8003ee8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ece:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40013400 	.word	0x40013400

08003f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <TIM_OC3_SetConfig+0xe0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_OC3_SetConfig+0x66>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <TIM_OC3_SetConfig+0xe4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d10d      	bne.n	8003f96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a16      	ldr	r2, [pc, #88]	; (8003ff4 <TIM_OC3_SetConfig+0xe0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_OC3_SetConfig+0x92>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <TIM_OC3_SetConfig+0xe4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d113      	bne.n	8003fce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	621a      	str	r2, [r3, #32]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40012c00 	.word	0x40012c00
 8003ff8:	40013400 	.word	0x40013400

08003ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	031b      	lsls	r3, r3, #12
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a11      	ldr	r2, [pc, #68]	; (800409c <TIM_OC4_SetConfig+0xa0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_OC4_SetConfig+0x68>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a10      	ldr	r2, [pc, #64]	; (80040a0 <TIM_OC4_SetConfig+0xa4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d109      	bne.n	8004078 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800406a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40013400 	.word	0x40013400

080040a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 030a 	bic.w	r3, r3, #10
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f023 0210 	bic.w	r2, r3, #16
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800412a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	031b      	lsls	r3, r3, #12
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800413c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	621a      	str	r2, [r3, #32]
}
 8004154:	bf00      	nop
 8004156:	371c      	adds	r7, #28
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	f043 0307 	orr.w	r3, r3, #7
 8004180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	609a      	str	r2, [r3, #8]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004192:	b480      	push	{r7}
 8004194:	b087      	sub	sp, #28
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	021a      	lsls	r2, r3, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	609a      	str	r2, [r3, #8]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e050      	b.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1b      	ldr	r2, [pc, #108]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d018      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a19      	ldr	r2, [pc, #100]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d00e      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a15      	ldr	r2, [pc, #84]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d009      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d004      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a12      	ldr	r2, [pc, #72]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d10c      	bne.n	8004278 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4313      	orrs	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	40012c00 	.word	0x40012c00
 8004298:	40013400 	.word	0x40013400
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40000c00 	.word	0x40000c00

080042a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	f023 0101 	bic.w	r1, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d102      	bne.n	80042fc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80042f6:	2340      	movs	r3, #64	; 0x40
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	e001      	b.n	8004300 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800430c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004312:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004318:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800431e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004324:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800432a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004330:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004336:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800433c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <FSMC_NORSRAM_Init+0xd0>)
 800435c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004364:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800436c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	43db      	mvns	r3, r3
 800437c:	ea02 0103 	and.w	r1, r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4319      	orrs	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	0008fb7f 	.word	0x0008fb7f

080043a0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	431a      	orrs	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	3b01      	subs	r3, #1
 80043dc:	051b      	lsls	r3, r3, #20
 80043de:	431a      	orrs	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	3b02      	subs	r3, #2
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	3201      	adds	r2, #1
 80043f4:	4319      	orrs	r1, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800441c:	d11d      	bne.n	800445a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004426:	4b13      	ldr	r3, [pc, #76]	; (8004474 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004428:	4013      	ands	r3, r2
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	6811      	ldr	r1, [r2, #0]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	6852      	ldr	r2, [r2, #4]
 8004432:	0112      	lsls	r2, r2, #4
 8004434:	4311      	orrs	r1, r2
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	6892      	ldr	r2, [r2, #8]
 800443a:	0212      	lsls	r2, r2, #8
 800443c:	4311      	orrs	r1, r2
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	6992      	ldr	r2, [r2, #24]
 8004442:	4311      	orrs	r1, r2
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	68d2      	ldr	r2, [r2, #12]
 8004448:	0412      	lsls	r2, r2, #16
 800444a:	430a      	orrs	r2, r1
 800444c:	ea43 0102 	orr.w	r1, r3, r2
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004458:	e005      	b.n	8004466 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	cff00000 	.word	0xcff00000

08004478 <clock>:
 8004478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <clock+0x24>)
 800447c:	4669      	mov	r1, sp
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	f000 f8cc 	bl	800461c <_times_r>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d006      	beq.n	8004496 <clock+0x1e>
 8004488:	e9dd 0300 	ldrd	r0, r3, [sp]
 800448c:	4418      	add	r0, r3
 800448e:	9b02      	ldr	r3, [sp, #8]
 8004490:	4418      	add	r0, r3
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	4418      	add	r0, r3
 8004496:	b005      	add	sp, #20
 8004498:	f85d fb04 	ldr.w	pc, [sp], #4
 800449c:	20000010 	.word	0x20000010

080044a0 <__errno>:
 80044a0:	4b01      	ldr	r3, [pc, #4]	; (80044a8 <__errno+0x8>)
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000010 	.word	0x20000010

080044ac <__libc_init_array>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	2600      	movs	r6, #0
 80044b0:	4d0c      	ldr	r5, [pc, #48]	; (80044e4 <__libc_init_array+0x38>)
 80044b2:	4c0d      	ldr	r4, [pc, #52]	; (80044e8 <__libc_init_array+0x3c>)
 80044b4:	1b64      	subs	r4, r4, r5
 80044b6:	10a4      	asrs	r4, r4, #2
 80044b8:	42a6      	cmp	r6, r4
 80044ba:	d109      	bne.n	80044d0 <__libc_init_array+0x24>
 80044bc:	f001 fa6e 	bl	800599c <_init>
 80044c0:	2600      	movs	r6, #0
 80044c2:	4d0a      	ldr	r5, [pc, #40]	; (80044ec <__libc_init_array+0x40>)
 80044c4:	4c0a      	ldr	r4, [pc, #40]	; (80044f0 <__libc_init_array+0x44>)
 80044c6:	1b64      	subs	r4, r4, r5
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	42a6      	cmp	r6, r4
 80044cc:	d105      	bne.n	80044da <__libc_init_array+0x2e>
 80044ce:	bd70      	pop	{r4, r5, r6, pc}
 80044d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d4:	4798      	blx	r3
 80044d6:	3601      	adds	r6, #1
 80044d8:	e7ee      	b.n	80044b8 <__libc_init_array+0xc>
 80044da:	f855 3b04 	ldr.w	r3, [r5], #4
 80044de:	4798      	blx	r3
 80044e0:	3601      	adds	r6, #1
 80044e2:	e7f2      	b.n	80044ca <__libc_init_array+0x1e>
 80044e4:	0800645c 	.word	0x0800645c
 80044e8:	0800645c 	.word	0x0800645c
 80044ec:	0800645c 	.word	0x0800645c
 80044f0:	08006460 	.word	0x08006460

080044f4 <memset>:
 80044f4:	4603      	mov	r3, r0
 80044f6:	4402      	add	r2, r0
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d100      	bne.n	80044fe <memset+0xa>
 80044fc:	4770      	bx	lr
 80044fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004502:	e7f9      	b.n	80044f8 <memset+0x4>

08004504 <srand>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <srand+0x44>)
 8004508:	4604      	mov	r4, r0
 800450a:	681d      	ldr	r5, [r3, #0]
 800450c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800450e:	b9b3      	cbnz	r3, 800453e <srand+0x3a>
 8004510:	2018      	movs	r0, #24
 8004512:	f000 f8b7 	bl	8004684 <malloc>
 8004516:	4602      	mov	r2, r0
 8004518:	63a8      	str	r0, [r5, #56]	; 0x38
 800451a:	b920      	cbnz	r0, 8004526 <srand+0x22>
 800451c:	2142      	movs	r1, #66	; 0x42
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <srand+0x48>)
 8004520:	480b      	ldr	r0, [pc, #44]	; (8004550 <srand+0x4c>)
 8004522:	f000 f87f 	bl	8004624 <__assert_func>
 8004526:	490b      	ldr	r1, [pc, #44]	; (8004554 <srand+0x50>)
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <srand+0x54>)
 800452a:	e9c0 1300 	strd	r1, r3, [r0]
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <srand+0x58>)
 8004530:	2100      	movs	r1, #0
 8004532:	6083      	str	r3, [r0, #8]
 8004534:	230b      	movs	r3, #11
 8004536:	8183      	strh	r3, [r0, #12]
 8004538:	2001      	movs	r0, #1
 800453a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800453e:	2200      	movs	r2, #0
 8004540:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004542:	611c      	str	r4, [r3, #16]
 8004544:	615a      	str	r2, [r3, #20]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	20000010 	.word	0x20000010
 800454c:	08006318 	.word	0x08006318
 8004550:	0800632f 	.word	0x0800632f
 8004554:	abcd330e 	.word	0xabcd330e
 8004558:	e66d1234 	.word	0xe66d1234
 800455c:	0005deec 	.word	0x0005deec

08004560 <rand>:
 8004560:	4b16      	ldr	r3, [pc, #88]	; (80045bc <rand+0x5c>)
 8004562:	b510      	push	{r4, lr}
 8004564:	681c      	ldr	r4, [r3, #0]
 8004566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004568:	b9b3      	cbnz	r3, 8004598 <rand+0x38>
 800456a:	2018      	movs	r0, #24
 800456c:	f000 f88a 	bl	8004684 <malloc>
 8004570:	4602      	mov	r2, r0
 8004572:	63a0      	str	r0, [r4, #56]	; 0x38
 8004574:	b920      	cbnz	r0, 8004580 <rand+0x20>
 8004576:	214e      	movs	r1, #78	; 0x4e
 8004578:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <rand+0x60>)
 800457a:	4812      	ldr	r0, [pc, #72]	; (80045c4 <rand+0x64>)
 800457c:	f000 f852 	bl	8004624 <__assert_func>
 8004580:	4911      	ldr	r1, [pc, #68]	; (80045c8 <rand+0x68>)
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <rand+0x6c>)
 8004584:	e9c0 1300 	strd	r1, r3, [r0]
 8004588:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <rand+0x70>)
 800458a:	2100      	movs	r1, #0
 800458c:	6083      	str	r3, [r0, #8]
 800458e:	230b      	movs	r3, #11
 8004590:	8183      	strh	r3, [r0, #12]
 8004592:	2001      	movs	r0, #1
 8004594:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004598:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800459a:	4a0e      	ldr	r2, [pc, #56]	; (80045d4 <rand+0x74>)
 800459c:	6920      	ldr	r0, [r4, #16]
 800459e:	6963      	ldr	r3, [r4, #20]
 80045a0:	4342      	muls	r2, r0
 80045a2:	490d      	ldr	r1, [pc, #52]	; (80045d8 <rand+0x78>)
 80045a4:	fb01 2203 	mla	r2, r1, r3, r2
 80045a8:	fba0 0101 	umull	r0, r1, r0, r1
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	eb42 0001 	adc.w	r0, r2, r1
 80045b2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80045b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80045ba:	bd10      	pop	{r4, pc}
 80045bc:	20000010 	.word	0x20000010
 80045c0:	08006318 	.word	0x08006318
 80045c4:	0800632f 	.word	0x0800632f
 80045c8:	abcd330e 	.word	0xabcd330e
 80045cc:	e66d1234 	.word	0xe66d1234
 80045d0:	0005deec 	.word	0x0005deec
 80045d4:	5851f42d 	.word	0x5851f42d
 80045d8:	4c957f2d 	.word	0x4c957f2d

080045dc <siprintf>:
 80045dc:	b40e      	push	{r1, r2, r3}
 80045de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045e2:	b500      	push	{lr}
 80045e4:	b09c      	sub	sp, #112	; 0x70
 80045e6:	ab1d      	add	r3, sp, #116	; 0x74
 80045e8:	9002      	str	r0, [sp, #8]
 80045ea:	9006      	str	r0, [sp, #24]
 80045ec:	9107      	str	r1, [sp, #28]
 80045ee:	9104      	str	r1, [sp, #16]
 80045f0:	4808      	ldr	r0, [pc, #32]	; (8004614 <siprintf+0x38>)
 80045f2:	4909      	ldr	r1, [pc, #36]	; (8004618 <siprintf+0x3c>)
 80045f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045f8:	9105      	str	r1, [sp, #20]
 80045fa:	6800      	ldr	r0, [r0, #0]
 80045fc:	a902      	add	r1, sp, #8
 80045fe:	9301      	str	r3, [sp, #4]
 8004600:	f000 f980 	bl	8004904 <_svfiprintf_r>
 8004604:	2200      	movs	r2, #0
 8004606:	9b02      	ldr	r3, [sp, #8]
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	b01c      	add	sp, #112	; 0x70
 800460c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004610:	b003      	add	sp, #12
 8004612:	4770      	bx	lr
 8004614:	20000010 	.word	0x20000010
 8004618:	ffff0208 	.word	0xffff0208

0800461c <_times_r>:
 800461c:	4608      	mov	r0, r1
 800461e:	f7fd bf05 	b.w	800242c <_times>
	...

08004624 <__assert_func>:
 8004624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004626:	4614      	mov	r4, r2
 8004628:	461a      	mov	r2, r3
 800462a:	4b09      	ldr	r3, [pc, #36]	; (8004650 <__assert_func+0x2c>)
 800462c:	4605      	mov	r5, r0
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68d8      	ldr	r0, [r3, #12]
 8004632:	b14c      	cbz	r4, 8004648 <__assert_func+0x24>
 8004634:	4b07      	ldr	r3, [pc, #28]	; (8004654 <__assert_func+0x30>)
 8004636:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800463a:	9100      	str	r1, [sp, #0]
 800463c:	462b      	mov	r3, r5
 800463e:	4906      	ldr	r1, [pc, #24]	; (8004658 <__assert_func+0x34>)
 8004640:	f000 f80e 	bl	8004660 <fiprintf>
 8004644:	f000 fe1c 	bl	8005280 <abort>
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <__assert_func+0x38>)
 800464a:	461c      	mov	r4, r3
 800464c:	e7f3      	b.n	8004636 <__assert_func+0x12>
 800464e:	bf00      	nop
 8004650:	20000010 	.word	0x20000010
 8004654:	0800638a 	.word	0x0800638a
 8004658:	08006397 	.word	0x08006397
 800465c:	080063c5 	.word	0x080063c5

08004660 <fiprintf>:
 8004660:	b40e      	push	{r1, r2, r3}
 8004662:	b503      	push	{r0, r1, lr}
 8004664:	4601      	mov	r1, r0
 8004666:	ab03      	add	r3, sp, #12
 8004668:	4805      	ldr	r0, [pc, #20]	; (8004680 <fiprintf+0x20>)
 800466a:	f853 2b04 	ldr.w	r2, [r3], #4
 800466e:	6800      	ldr	r0, [r0, #0]
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	f000 fa6f 	bl	8004b54 <_vfiprintf_r>
 8004676:	b002      	add	sp, #8
 8004678:	f85d eb04 	ldr.w	lr, [sp], #4
 800467c:	b003      	add	sp, #12
 800467e:	4770      	bx	lr
 8004680:	20000010 	.word	0x20000010

08004684 <malloc>:
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <malloc+0xc>)
 8004686:	4601      	mov	r1, r0
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f000 b86b 	b.w	8004764 <_malloc_r>
 800468e:	bf00      	nop
 8004690:	20000010 	.word	0x20000010

08004694 <_free_r>:
 8004694:	b538      	push	{r3, r4, r5, lr}
 8004696:	4605      	mov	r5, r0
 8004698:	2900      	cmp	r1, #0
 800469a:	d040      	beq.n	800471e <_free_r+0x8a>
 800469c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a0:	1f0c      	subs	r4, r1, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bfb8      	it	lt
 80046a6:	18e4      	addlt	r4, r4, r3
 80046a8:	f001 f844 	bl	8005734 <__malloc_lock>
 80046ac:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <_free_r+0x8c>)
 80046ae:	6813      	ldr	r3, [r2, #0]
 80046b0:	b933      	cbnz	r3, 80046c0 <_free_r+0x2c>
 80046b2:	6063      	str	r3, [r4, #4]
 80046b4:	6014      	str	r4, [r2, #0]
 80046b6:	4628      	mov	r0, r5
 80046b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046bc:	f001 b840 	b.w	8005740 <__malloc_unlock>
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d908      	bls.n	80046d6 <_free_r+0x42>
 80046c4:	6820      	ldr	r0, [r4, #0]
 80046c6:	1821      	adds	r1, r4, r0
 80046c8:	428b      	cmp	r3, r1
 80046ca:	bf01      	itttt	eq
 80046cc:	6819      	ldreq	r1, [r3, #0]
 80046ce:	685b      	ldreq	r3, [r3, #4]
 80046d0:	1809      	addeq	r1, r1, r0
 80046d2:	6021      	streq	r1, [r4, #0]
 80046d4:	e7ed      	b.n	80046b2 <_free_r+0x1e>
 80046d6:	461a      	mov	r2, r3
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	b10b      	cbz	r3, 80046e0 <_free_r+0x4c>
 80046dc:	42a3      	cmp	r3, r4
 80046de:	d9fa      	bls.n	80046d6 <_free_r+0x42>
 80046e0:	6811      	ldr	r1, [r2, #0]
 80046e2:	1850      	adds	r0, r2, r1
 80046e4:	42a0      	cmp	r0, r4
 80046e6:	d10b      	bne.n	8004700 <_free_r+0x6c>
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	4401      	add	r1, r0
 80046ec:	1850      	adds	r0, r2, r1
 80046ee:	4283      	cmp	r3, r0
 80046f0:	6011      	str	r1, [r2, #0]
 80046f2:	d1e0      	bne.n	80046b6 <_free_r+0x22>
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4401      	add	r1, r0
 80046fa:	6011      	str	r1, [r2, #0]
 80046fc:	6053      	str	r3, [r2, #4]
 80046fe:	e7da      	b.n	80046b6 <_free_r+0x22>
 8004700:	d902      	bls.n	8004708 <_free_r+0x74>
 8004702:	230c      	movs	r3, #12
 8004704:	602b      	str	r3, [r5, #0]
 8004706:	e7d6      	b.n	80046b6 <_free_r+0x22>
 8004708:	6820      	ldr	r0, [r4, #0]
 800470a:	1821      	adds	r1, r4, r0
 800470c:	428b      	cmp	r3, r1
 800470e:	bf01      	itttt	eq
 8004710:	6819      	ldreq	r1, [r3, #0]
 8004712:	685b      	ldreq	r3, [r3, #4]
 8004714:	1809      	addeq	r1, r1, r0
 8004716:	6021      	streq	r1, [r4, #0]
 8004718:	6063      	str	r3, [r4, #4]
 800471a:	6054      	str	r4, [r2, #4]
 800471c:	e7cb      	b.n	80046b6 <_free_r+0x22>
 800471e:	bd38      	pop	{r3, r4, r5, pc}
 8004720:	200001f0 	.word	0x200001f0

08004724 <sbrk_aligned>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4e0e      	ldr	r6, [pc, #56]	; (8004760 <sbrk_aligned+0x3c>)
 8004728:	460c      	mov	r4, r1
 800472a:	6831      	ldr	r1, [r6, #0]
 800472c:	4605      	mov	r5, r0
 800472e:	b911      	cbnz	r1, 8004736 <sbrk_aligned+0x12>
 8004730:	f000 fcd6 	bl	80050e0 <_sbrk_r>
 8004734:	6030      	str	r0, [r6, #0]
 8004736:	4621      	mov	r1, r4
 8004738:	4628      	mov	r0, r5
 800473a:	f000 fcd1 	bl	80050e0 <_sbrk_r>
 800473e:	1c43      	adds	r3, r0, #1
 8004740:	d00a      	beq.n	8004758 <sbrk_aligned+0x34>
 8004742:	1cc4      	adds	r4, r0, #3
 8004744:	f024 0403 	bic.w	r4, r4, #3
 8004748:	42a0      	cmp	r0, r4
 800474a:	d007      	beq.n	800475c <sbrk_aligned+0x38>
 800474c:	1a21      	subs	r1, r4, r0
 800474e:	4628      	mov	r0, r5
 8004750:	f000 fcc6 	bl	80050e0 <_sbrk_r>
 8004754:	3001      	adds	r0, #1
 8004756:	d101      	bne.n	800475c <sbrk_aligned+0x38>
 8004758:	f04f 34ff 	mov.w	r4, #4294967295
 800475c:	4620      	mov	r0, r4
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	200001f4 	.word	0x200001f4

08004764 <_malloc_r>:
 8004764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004768:	1ccd      	adds	r5, r1, #3
 800476a:	f025 0503 	bic.w	r5, r5, #3
 800476e:	3508      	adds	r5, #8
 8004770:	2d0c      	cmp	r5, #12
 8004772:	bf38      	it	cc
 8004774:	250c      	movcc	r5, #12
 8004776:	2d00      	cmp	r5, #0
 8004778:	4607      	mov	r7, r0
 800477a:	db01      	blt.n	8004780 <_malloc_r+0x1c>
 800477c:	42a9      	cmp	r1, r5
 800477e:	d905      	bls.n	800478c <_malloc_r+0x28>
 8004780:	230c      	movs	r3, #12
 8004782:	2600      	movs	r6, #0
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	4630      	mov	r0, r6
 8004788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800478c:	4e2e      	ldr	r6, [pc, #184]	; (8004848 <_malloc_r+0xe4>)
 800478e:	f000 ffd1 	bl	8005734 <__malloc_lock>
 8004792:	6833      	ldr	r3, [r6, #0]
 8004794:	461c      	mov	r4, r3
 8004796:	bb34      	cbnz	r4, 80047e6 <_malloc_r+0x82>
 8004798:	4629      	mov	r1, r5
 800479a:	4638      	mov	r0, r7
 800479c:	f7ff ffc2 	bl	8004724 <sbrk_aligned>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	4604      	mov	r4, r0
 80047a4:	d14d      	bne.n	8004842 <_malloc_r+0xde>
 80047a6:	6834      	ldr	r4, [r6, #0]
 80047a8:	4626      	mov	r6, r4
 80047aa:	2e00      	cmp	r6, #0
 80047ac:	d140      	bne.n	8004830 <_malloc_r+0xcc>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	4631      	mov	r1, r6
 80047b2:	4638      	mov	r0, r7
 80047b4:	eb04 0803 	add.w	r8, r4, r3
 80047b8:	f000 fc92 	bl	80050e0 <_sbrk_r>
 80047bc:	4580      	cmp	r8, r0
 80047be:	d13a      	bne.n	8004836 <_malloc_r+0xd2>
 80047c0:	6821      	ldr	r1, [r4, #0]
 80047c2:	3503      	adds	r5, #3
 80047c4:	1a6d      	subs	r5, r5, r1
 80047c6:	f025 0503 	bic.w	r5, r5, #3
 80047ca:	3508      	adds	r5, #8
 80047cc:	2d0c      	cmp	r5, #12
 80047ce:	bf38      	it	cc
 80047d0:	250c      	movcc	r5, #12
 80047d2:	4638      	mov	r0, r7
 80047d4:	4629      	mov	r1, r5
 80047d6:	f7ff ffa5 	bl	8004724 <sbrk_aligned>
 80047da:	3001      	adds	r0, #1
 80047dc:	d02b      	beq.n	8004836 <_malloc_r+0xd2>
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	442b      	add	r3, r5
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	e00e      	b.n	8004804 <_malloc_r+0xa0>
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	1b52      	subs	r2, r2, r5
 80047ea:	d41e      	bmi.n	800482a <_malloc_r+0xc6>
 80047ec:	2a0b      	cmp	r2, #11
 80047ee:	d916      	bls.n	800481e <_malloc_r+0xba>
 80047f0:	1961      	adds	r1, r4, r5
 80047f2:	42a3      	cmp	r3, r4
 80047f4:	6025      	str	r5, [r4, #0]
 80047f6:	bf18      	it	ne
 80047f8:	6059      	strne	r1, [r3, #4]
 80047fa:	6863      	ldr	r3, [r4, #4]
 80047fc:	bf08      	it	eq
 80047fe:	6031      	streq	r1, [r6, #0]
 8004800:	5162      	str	r2, [r4, r5]
 8004802:	604b      	str	r3, [r1, #4]
 8004804:	4638      	mov	r0, r7
 8004806:	f104 060b 	add.w	r6, r4, #11
 800480a:	f000 ff99 	bl	8005740 <__malloc_unlock>
 800480e:	f026 0607 	bic.w	r6, r6, #7
 8004812:	1d23      	adds	r3, r4, #4
 8004814:	1af2      	subs	r2, r6, r3
 8004816:	d0b6      	beq.n	8004786 <_malloc_r+0x22>
 8004818:	1b9b      	subs	r3, r3, r6
 800481a:	50a3      	str	r3, [r4, r2]
 800481c:	e7b3      	b.n	8004786 <_malloc_r+0x22>
 800481e:	6862      	ldr	r2, [r4, #4]
 8004820:	42a3      	cmp	r3, r4
 8004822:	bf0c      	ite	eq
 8004824:	6032      	streq	r2, [r6, #0]
 8004826:	605a      	strne	r2, [r3, #4]
 8004828:	e7ec      	b.n	8004804 <_malloc_r+0xa0>
 800482a:	4623      	mov	r3, r4
 800482c:	6864      	ldr	r4, [r4, #4]
 800482e:	e7b2      	b.n	8004796 <_malloc_r+0x32>
 8004830:	4634      	mov	r4, r6
 8004832:	6876      	ldr	r6, [r6, #4]
 8004834:	e7b9      	b.n	80047aa <_malloc_r+0x46>
 8004836:	230c      	movs	r3, #12
 8004838:	4638      	mov	r0, r7
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	f000 ff80 	bl	8005740 <__malloc_unlock>
 8004840:	e7a1      	b.n	8004786 <_malloc_r+0x22>
 8004842:	6025      	str	r5, [r4, #0]
 8004844:	e7de      	b.n	8004804 <_malloc_r+0xa0>
 8004846:	bf00      	nop
 8004848:	200001f0 	.word	0x200001f0

0800484c <__ssputs_r>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	688e      	ldr	r6, [r1, #8]
 8004852:	4682      	mov	sl, r0
 8004854:	429e      	cmp	r6, r3
 8004856:	460c      	mov	r4, r1
 8004858:	4690      	mov	r8, r2
 800485a:	461f      	mov	r7, r3
 800485c:	d838      	bhi.n	80048d0 <__ssputs_r+0x84>
 800485e:	898a      	ldrh	r2, [r1, #12]
 8004860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004864:	d032      	beq.n	80048cc <__ssputs_r+0x80>
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	6909      	ldr	r1, [r1, #16]
 800486a:	3301      	adds	r3, #1
 800486c:	eba5 0901 	sub.w	r9, r5, r1
 8004870:	6965      	ldr	r5, [r4, #20]
 8004872:	444b      	add	r3, r9
 8004874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004878:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800487c:	106d      	asrs	r5, r5, #1
 800487e:	429d      	cmp	r5, r3
 8004880:	bf38      	it	cc
 8004882:	461d      	movcc	r5, r3
 8004884:	0553      	lsls	r3, r2, #21
 8004886:	d531      	bpl.n	80048ec <__ssputs_r+0xa0>
 8004888:	4629      	mov	r1, r5
 800488a:	f7ff ff6b 	bl	8004764 <_malloc_r>
 800488e:	4606      	mov	r6, r0
 8004890:	b950      	cbnz	r0, 80048a8 <__ssputs_r+0x5c>
 8004892:	230c      	movs	r3, #12
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	f8ca 3000 	str.w	r3, [sl]
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048a2:	81a3      	strh	r3, [r4, #12]
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	464a      	mov	r2, r9
 80048aa:	6921      	ldr	r1, [r4, #16]
 80048ac:	f000 ff1a 	bl	80056e4 <memcpy>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	81a3      	strh	r3, [r4, #12]
 80048bc:	6126      	str	r6, [r4, #16]
 80048be:	444e      	add	r6, r9
 80048c0:	6026      	str	r6, [r4, #0]
 80048c2:	463e      	mov	r6, r7
 80048c4:	6165      	str	r5, [r4, #20]
 80048c6:	eba5 0509 	sub.w	r5, r5, r9
 80048ca:	60a5      	str	r5, [r4, #8]
 80048cc:	42be      	cmp	r6, r7
 80048ce:	d900      	bls.n	80048d2 <__ssputs_r+0x86>
 80048d0:	463e      	mov	r6, r7
 80048d2:	4632      	mov	r2, r6
 80048d4:	4641      	mov	r1, r8
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	f000 ff12 	bl	8005700 <memmove>
 80048dc:	68a3      	ldr	r3, [r4, #8]
 80048de:	2000      	movs	r0, #0
 80048e0:	1b9b      	subs	r3, r3, r6
 80048e2:	60a3      	str	r3, [r4, #8]
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	4433      	add	r3, r6
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	e7db      	b.n	80048a4 <__ssputs_r+0x58>
 80048ec:	462a      	mov	r2, r5
 80048ee:	f000 ff2d 	bl	800574c <_realloc_r>
 80048f2:	4606      	mov	r6, r0
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d1e1      	bne.n	80048bc <__ssputs_r+0x70>
 80048f8:	4650      	mov	r0, sl
 80048fa:	6921      	ldr	r1, [r4, #16]
 80048fc:	f7ff feca 	bl	8004694 <_free_r>
 8004900:	e7c7      	b.n	8004892 <__ssputs_r+0x46>
	...

08004904 <_svfiprintf_r>:
 8004904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004908:	4698      	mov	r8, r3
 800490a:	898b      	ldrh	r3, [r1, #12]
 800490c:	4607      	mov	r7, r0
 800490e:	061b      	lsls	r3, r3, #24
 8004910:	460d      	mov	r5, r1
 8004912:	4614      	mov	r4, r2
 8004914:	b09d      	sub	sp, #116	; 0x74
 8004916:	d50e      	bpl.n	8004936 <_svfiprintf_r+0x32>
 8004918:	690b      	ldr	r3, [r1, #16]
 800491a:	b963      	cbnz	r3, 8004936 <_svfiprintf_r+0x32>
 800491c:	2140      	movs	r1, #64	; 0x40
 800491e:	f7ff ff21 	bl	8004764 <_malloc_r>
 8004922:	6028      	str	r0, [r5, #0]
 8004924:	6128      	str	r0, [r5, #16]
 8004926:	b920      	cbnz	r0, 8004932 <_svfiprintf_r+0x2e>
 8004928:	230c      	movs	r3, #12
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	e0d1      	b.n	8004ad6 <_svfiprintf_r+0x1d2>
 8004932:	2340      	movs	r3, #64	; 0x40
 8004934:	616b      	str	r3, [r5, #20]
 8004936:	2300      	movs	r3, #0
 8004938:	9309      	str	r3, [sp, #36]	; 0x24
 800493a:	2320      	movs	r3, #32
 800493c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004940:	2330      	movs	r3, #48	; 0x30
 8004942:	f04f 0901 	mov.w	r9, #1
 8004946:	f8cd 800c 	str.w	r8, [sp, #12]
 800494a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004af0 <_svfiprintf_r+0x1ec>
 800494e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004952:	4623      	mov	r3, r4
 8004954:	469a      	mov	sl, r3
 8004956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800495a:	b10a      	cbz	r2, 8004960 <_svfiprintf_r+0x5c>
 800495c:	2a25      	cmp	r2, #37	; 0x25
 800495e:	d1f9      	bne.n	8004954 <_svfiprintf_r+0x50>
 8004960:	ebba 0b04 	subs.w	fp, sl, r4
 8004964:	d00b      	beq.n	800497e <_svfiprintf_r+0x7a>
 8004966:	465b      	mov	r3, fp
 8004968:	4622      	mov	r2, r4
 800496a:	4629      	mov	r1, r5
 800496c:	4638      	mov	r0, r7
 800496e:	f7ff ff6d 	bl	800484c <__ssputs_r>
 8004972:	3001      	adds	r0, #1
 8004974:	f000 80aa 	beq.w	8004acc <_svfiprintf_r+0x1c8>
 8004978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800497a:	445a      	add	r2, fp
 800497c:	9209      	str	r2, [sp, #36]	; 0x24
 800497e:	f89a 3000 	ldrb.w	r3, [sl]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80a2 	beq.w	8004acc <_svfiprintf_r+0x1c8>
 8004988:	2300      	movs	r3, #0
 800498a:	f04f 32ff 	mov.w	r2, #4294967295
 800498e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004992:	f10a 0a01 	add.w	sl, sl, #1
 8004996:	9304      	str	r3, [sp, #16]
 8004998:	9307      	str	r3, [sp, #28]
 800499a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800499e:	931a      	str	r3, [sp, #104]	; 0x68
 80049a0:	4654      	mov	r4, sl
 80049a2:	2205      	movs	r2, #5
 80049a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a8:	4851      	ldr	r0, [pc, #324]	; (8004af0 <_svfiprintf_r+0x1ec>)
 80049aa:	f000 fe8d 	bl	80056c8 <memchr>
 80049ae:	9a04      	ldr	r2, [sp, #16]
 80049b0:	b9d8      	cbnz	r0, 80049ea <_svfiprintf_r+0xe6>
 80049b2:	06d0      	lsls	r0, r2, #27
 80049b4:	bf44      	itt	mi
 80049b6:	2320      	movmi	r3, #32
 80049b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049bc:	0711      	lsls	r1, r2, #28
 80049be:	bf44      	itt	mi
 80049c0:	232b      	movmi	r3, #43	; 0x2b
 80049c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c6:	f89a 3000 	ldrb.w	r3, [sl]
 80049ca:	2b2a      	cmp	r3, #42	; 0x2a
 80049cc:	d015      	beq.n	80049fa <_svfiprintf_r+0xf6>
 80049ce:	4654      	mov	r4, sl
 80049d0:	2000      	movs	r0, #0
 80049d2:	f04f 0c0a 	mov.w	ip, #10
 80049d6:	9a07      	ldr	r2, [sp, #28]
 80049d8:	4621      	mov	r1, r4
 80049da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049de:	3b30      	subs	r3, #48	; 0x30
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d94e      	bls.n	8004a82 <_svfiprintf_r+0x17e>
 80049e4:	b1b0      	cbz	r0, 8004a14 <_svfiprintf_r+0x110>
 80049e6:	9207      	str	r2, [sp, #28]
 80049e8:	e014      	b.n	8004a14 <_svfiprintf_r+0x110>
 80049ea:	eba0 0308 	sub.w	r3, r0, r8
 80049ee:	fa09 f303 	lsl.w	r3, r9, r3
 80049f2:	4313      	orrs	r3, r2
 80049f4:	46a2      	mov	sl, r4
 80049f6:	9304      	str	r3, [sp, #16]
 80049f8:	e7d2      	b.n	80049a0 <_svfiprintf_r+0x9c>
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	1d19      	adds	r1, r3, #4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	9103      	str	r1, [sp, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bfbb      	ittet	lt
 8004a06:	425b      	neglt	r3, r3
 8004a08:	f042 0202 	orrlt.w	r2, r2, #2
 8004a0c:	9307      	strge	r3, [sp, #28]
 8004a0e:	9307      	strlt	r3, [sp, #28]
 8004a10:	bfb8      	it	lt
 8004a12:	9204      	strlt	r2, [sp, #16]
 8004a14:	7823      	ldrb	r3, [r4, #0]
 8004a16:	2b2e      	cmp	r3, #46	; 0x2e
 8004a18:	d10c      	bne.n	8004a34 <_svfiprintf_r+0x130>
 8004a1a:	7863      	ldrb	r3, [r4, #1]
 8004a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a1e:	d135      	bne.n	8004a8c <_svfiprintf_r+0x188>
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	3402      	adds	r4, #2
 8004a24:	1d1a      	adds	r2, r3, #4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	9203      	str	r2, [sp, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bfb8      	it	lt
 8004a2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a32:	9305      	str	r3, [sp, #20]
 8004a34:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004af4 <_svfiprintf_r+0x1f0>
 8004a38:	2203      	movs	r2, #3
 8004a3a:	4650      	mov	r0, sl
 8004a3c:	7821      	ldrb	r1, [r4, #0]
 8004a3e:	f000 fe43 	bl	80056c8 <memchr>
 8004a42:	b140      	cbz	r0, 8004a56 <_svfiprintf_r+0x152>
 8004a44:	2340      	movs	r3, #64	; 0x40
 8004a46:	eba0 000a 	sub.w	r0, r0, sl
 8004a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004a4e:	9b04      	ldr	r3, [sp, #16]
 8004a50:	3401      	adds	r4, #1
 8004a52:	4303      	orrs	r3, r0
 8004a54:	9304      	str	r3, [sp, #16]
 8004a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5a:	2206      	movs	r2, #6
 8004a5c:	4826      	ldr	r0, [pc, #152]	; (8004af8 <_svfiprintf_r+0x1f4>)
 8004a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a62:	f000 fe31 	bl	80056c8 <memchr>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d038      	beq.n	8004adc <_svfiprintf_r+0x1d8>
 8004a6a:	4b24      	ldr	r3, [pc, #144]	; (8004afc <_svfiprintf_r+0x1f8>)
 8004a6c:	bb1b      	cbnz	r3, 8004ab6 <_svfiprintf_r+0x1b2>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	3307      	adds	r3, #7
 8004a72:	f023 0307 	bic.w	r3, r3, #7
 8004a76:	3308      	adds	r3, #8
 8004a78:	9303      	str	r3, [sp, #12]
 8004a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7c:	4433      	add	r3, r6
 8004a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a80:	e767      	b.n	8004952 <_svfiprintf_r+0x4e>
 8004a82:	460c      	mov	r4, r1
 8004a84:	2001      	movs	r0, #1
 8004a86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a8a:	e7a5      	b.n	80049d8 <_svfiprintf_r+0xd4>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f04f 0c0a 	mov.w	ip, #10
 8004a92:	4619      	mov	r1, r3
 8004a94:	3401      	adds	r4, #1
 8004a96:	9305      	str	r3, [sp, #20]
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a9e:	3a30      	subs	r2, #48	; 0x30
 8004aa0:	2a09      	cmp	r2, #9
 8004aa2:	d903      	bls.n	8004aac <_svfiprintf_r+0x1a8>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0c5      	beq.n	8004a34 <_svfiprintf_r+0x130>
 8004aa8:	9105      	str	r1, [sp, #20]
 8004aaa:	e7c3      	b.n	8004a34 <_svfiprintf_r+0x130>
 8004aac:	4604      	mov	r4, r0
 8004aae:	2301      	movs	r3, #1
 8004ab0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab4:	e7f0      	b.n	8004a98 <_svfiprintf_r+0x194>
 8004ab6:	ab03      	add	r3, sp, #12
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	462a      	mov	r2, r5
 8004abc:	4638      	mov	r0, r7
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <_svfiprintf_r+0x1fc>)
 8004ac0:	a904      	add	r1, sp, #16
 8004ac2:	f3af 8000 	nop.w
 8004ac6:	1c42      	adds	r2, r0, #1
 8004ac8:	4606      	mov	r6, r0
 8004aca:	d1d6      	bne.n	8004a7a <_svfiprintf_r+0x176>
 8004acc:	89ab      	ldrh	r3, [r5, #12]
 8004ace:	065b      	lsls	r3, r3, #25
 8004ad0:	f53f af2c 	bmi.w	800492c <_svfiprintf_r+0x28>
 8004ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ad6:	b01d      	add	sp, #116	; 0x74
 8004ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004adc:	ab03      	add	r3, sp, #12
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	462a      	mov	r2, r5
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <_svfiprintf_r+0x1fc>)
 8004ae6:	a904      	add	r1, sp, #16
 8004ae8:	f000 f9d4 	bl	8004e94 <_printf_i>
 8004aec:	e7eb      	b.n	8004ac6 <_svfiprintf_r+0x1c2>
 8004aee:	bf00      	nop
 8004af0:	080063c6 	.word	0x080063c6
 8004af4:	080063cc 	.word	0x080063cc
 8004af8:	080063d0 	.word	0x080063d0
 8004afc:	00000000 	.word	0x00000000
 8004b00:	0800484d 	.word	0x0800484d

08004b04 <__sfputc_r>:
 8004b04:	6893      	ldr	r3, [r2, #8]
 8004b06:	b410      	push	{r4}
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	6093      	str	r3, [r2, #8]
 8004b0e:	da07      	bge.n	8004b20 <__sfputc_r+0x1c>
 8004b10:	6994      	ldr	r4, [r2, #24]
 8004b12:	42a3      	cmp	r3, r4
 8004b14:	db01      	blt.n	8004b1a <__sfputc_r+0x16>
 8004b16:	290a      	cmp	r1, #10
 8004b18:	d102      	bne.n	8004b20 <__sfputc_r+0x1c>
 8004b1a:	bc10      	pop	{r4}
 8004b1c:	f000 baf0 	b.w	8005100 <__swbuf_r>
 8004b20:	6813      	ldr	r3, [r2, #0]
 8004b22:	1c58      	adds	r0, r3, #1
 8004b24:	6010      	str	r0, [r2, #0]
 8004b26:	7019      	strb	r1, [r3, #0]
 8004b28:	4608      	mov	r0, r1
 8004b2a:	bc10      	pop	{r4}
 8004b2c:	4770      	bx	lr

08004b2e <__sfputs_r>:
 8004b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b30:	4606      	mov	r6, r0
 8004b32:	460f      	mov	r7, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	18d5      	adds	r5, r2, r3
 8004b38:	42ac      	cmp	r4, r5
 8004b3a:	d101      	bne.n	8004b40 <__sfputs_r+0x12>
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	e007      	b.n	8004b50 <__sfputs_r+0x22>
 8004b40:	463a      	mov	r2, r7
 8004b42:	4630      	mov	r0, r6
 8004b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b48:	f7ff ffdc 	bl	8004b04 <__sfputc_r>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d1f3      	bne.n	8004b38 <__sfputs_r+0xa>
 8004b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b54 <_vfiprintf_r>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	460d      	mov	r5, r1
 8004b5a:	4614      	mov	r4, r2
 8004b5c:	4698      	mov	r8, r3
 8004b5e:	4606      	mov	r6, r0
 8004b60:	b09d      	sub	sp, #116	; 0x74
 8004b62:	b118      	cbz	r0, 8004b6c <_vfiprintf_r+0x18>
 8004b64:	6983      	ldr	r3, [r0, #24]
 8004b66:	b90b      	cbnz	r3, 8004b6c <_vfiprintf_r+0x18>
 8004b68:	f000 fca8 	bl	80054bc <__sinit>
 8004b6c:	4b89      	ldr	r3, [pc, #548]	; (8004d94 <_vfiprintf_r+0x240>)
 8004b6e:	429d      	cmp	r5, r3
 8004b70:	d11b      	bne.n	8004baa <_vfiprintf_r+0x56>
 8004b72:	6875      	ldr	r5, [r6, #4]
 8004b74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b76:	07d9      	lsls	r1, r3, #31
 8004b78:	d405      	bmi.n	8004b86 <_vfiprintf_r+0x32>
 8004b7a:	89ab      	ldrh	r3, [r5, #12]
 8004b7c:	059a      	lsls	r2, r3, #22
 8004b7e:	d402      	bmi.n	8004b86 <_vfiprintf_r+0x32>
 8004b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b82:	f000 fd39 	bl	80055f8 <__retarget_lock_acquire_recursive>
 8004b86:	89ab      	ldrh	r3, [r5, #12]
 8004b88:	071b      	lsls	r3, r3, #28
 8004b8a:	d501      	bpl.n	8004b90 <_vfiprintf_r+0x3c>
 8004b8c:	692b      	ldr	r3, [r5, #16]
 8004b8e:	b9eb      	cbnz	r3, 8004bcc <_vfiprintf_r+0x78>
 8004b90:	4629      	mov	r1, r5
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 fb06 	bl	80051a4 <__swsetup_r>
 8004b98:	b1c0      	cbz	r0, 8004bcc <_vfiprintf_r+0x78>
 8004b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b9c:	07dc      	lsls	r4, r3, #31
 8004b9e:	d50e      	bpl.n	8004bbe <_vfiprintf_r+0x6a>
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	b01d      	add	sp, #116	; 0x74
 8004ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004baa:	4b7b      	ldr	r3, [pc, #492]	; (8004d98 <_vfiprintf_r+0x244>)
 8004bac:	429d      	cmp	r5, r3
 8004bae:	d101      	bne.n	8004bb4 <_vfiprintf_r+0x60>
 8004bb0:	68b5      	ldr	r5, [r6, #8]
 8004bb2:	e7df      	b.n	8004b74 <_vfiprintf_r+0x20>
 8004bb4:	4b79      	ldr	r3, [pc, #484]	; (8004d9c <_vfiprintf_r+0x248>)
 8004bb6:	429d      	cmp	r5, r3
 8004bb8:	bf08      	it	eq
 8004bba:	68f5      	ldreq	r5, [r6, #12]
 8004bbc:	e7da      	b.n	8004b74 <_vfiprintf_r+0x20>
 8004bbe:	89ab      	ldrh	r3, [r5, #12]
 8004bc0:	0598      	lsls	r0, r3, #22
 8004bc2:	d4ed      	bmi.n	8004ba0 <_vfiprintf_r+0x4c>
 8004bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bc6:	f000 fd18 	bl	80055fa <__retarget_lock_release_recursive>
 8004bca:	e7e9      	b.n	8004ba0 <_vfiprintf_r+0x4c>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bd6:	2330      	movs	r3, #48	; 0x30
 8004bd8:	f04f 0901 	mov.w	r9, #1
 8004bdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004be0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004da0 <_vfiprintf_r+0x24c>
 8004be4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004be8:	4623      	mov	r3, r4
 8004bea:	469a      	mov	sl, r3
 8004bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bf0:	b10a      	cbz	r2, 8004bf6 <_vfiprintf_r+0xa2>
 8004bf2:	2a25      	cmp	r2, #37	; 0x25
 8004bf4:	d1f9      	bne.n	8004bea <_vfiprintf_r+0x96>
 8004bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8004bfa:	d00b      	beq.n	8004c14 <_vfiprintf_r+0xc0>
 8004bfc:	465b      	mov	r3, fp
 8004bfe:	4622      	mov	r2, r4
 8004c00:	4629      	mov	r1, r5
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7ff ff93 	bl	8004b2e <__sfputs_r>
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f000 80aa 	beq.w	8004d62 <_vfiprintf_r+0x20e>
 8004c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c10:	445a      	add	r2, fp
 8004c12:	9209      	str	r2, [sp, #36]	; 0x24
 8004c14:	f89a 3000 	ldrb.w	r3, [sl]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80a2 	beq.w	8004d62 <_vfiprintf_r+0x20e>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f04f 32ff 	mov.w	r2, #4294967295
 8004c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c28:	f10a 0a01 	add.w	sl, sl, #1
 8004c2c:	9304      	str	r3, [sp, #16]
 8004c2e:	9307      	str	r3, [sp, #28]
 8004c30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c34:	931a      	str	r3, [sp, #104]	; 0x68
 8004c36:	4654      	mov	r4, sl
 8004c38:	2205      	movs	r2, #5
 8004c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c3e:	4858      	ldr	r0, [pc, #352]	; (8004da0 <_vfiprintf_r+0x24c>)
 8004c40:	f000 fd42 	bl	80056c8 <memchr>
 8004c44:	9a04      	ldr	r2, [sp, #16]
 8004c46:	b9d8      	cbnz	r0, 8004c80 <_vfiprintf_r+0x12c>
 8004c48:	06d1      	lsls	r1, r2, #27
 8004c4a:	bf44      	itt	mi
 8004c4c:	2320      	movmi	r3, #32
 8004c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c52:	0713      	lsls	r3, r2, #28
 8004c54:	bf44      	itt	mi
 8004c56:	232b      	movmi	r3, #43	; 0x2b
 8004c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c60:	2b2a      	cmp	r3, #42	; 0x2a
 8004c62:	d015      	beq.n	8004c90 <_vfiprintf_r+0x13c>
 8004c64:	4654      	mov	r4, sl
 8004c66:	2000      	movs	r0, #0
 8004c68:	f04f 0c0a 	mov.w	ip, #10
 8004c6c:	9a07      	ldr	r2, [sp, #28]
 8004c6e:	4621      	mov	r1, r4
 8004c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c74:	3b30      	subs	r3, #48	; 0x30
 8004c76:	2b09      	cmp	r3, #9
 8004c78:	d94e      	bls.n	8004d18 <_vfiprintf_r+0x1c4>
 8004c7a:	b1b0      	cbz	r0, 8004caa <_vfiprintf_r+0x156>
 8004c7c:	9207      	str	r2, [sp, #28]
 8004c7e:	e014      	b.n	8004caa <_vfiprintf_r+0x156>
 8004c80:	eba0 0308 	sub.w	r3, r0, r8
 8004c84:	fa09 f303 	lsl.w	r3, r9, r3
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	46a2      	mov	sl, r4
 8004c8c:	9304      	str	r3, [sp, #16]
 8004c8e:	e7d2      	b.n	8004c36 <_vfiprintf_r+0xe2>
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	1d19      	adds	r1, r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	9103      	str	r1, [sp, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bfbb      	ittet	lt
 8004c9c:	425b      	neglt	r3, r3
 8004c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8004ca2:	9307      	strge	r3, [sp, #28]
 8004ca4:	9307      	strlt	r3, [sp, #28]
 8004ca6:	bfb8      	it	lt
 8004ca8:	9204      	strlt	r2, [sp, #16]
 8004caa:	7823      	ldrb	r3, [r4, #0]
 8004cac:	2b2e      	cmp	r3, #46	; 0x2e
 8004cae:	d10c      	bne.n	8004cca <_vfiprintf_r+0x176>
 8004cb0:	7863      	ldrb	r3, [r4, #1]
 8004cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cb4:	d135      	bne.n	8004d22 <_vfiprintf_r+0x1ce>
 8004cb6:	9b03      	ldr	r3, [sp, #12]
 8004cb8:	3402      	adds	r4, #2
 8004cba:	1d1a      	adds	r2, r3, #4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	9203      	str	r2, [sp, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bfb8      	it	lt
 8004cc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cc8:	9305      	str	r3, [sp, #20]
 8004cca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004da4 <_vfiprintf_r+0x250>
 8004cce:	2203      	movs	r2, #3
 8004cd0:	4650      	mov	r0, sl
 8004cd2:	7821      	ldrb	r1, [r4, #0]
 8004cd4:	f000 fcf8 	bl	80056c8 <memchr>
 8004cd8:	b140      	cbz	r0, 8004cec <_vfiprintf_r+0x198>
 8004cda:	2340      	movs	r3, #64	; 0x40
 8004cdc:	eba0 000a 	sub.w	r0, r0, sl
 8004ce0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ce4:	9b04      	ldr	r3, [sp, #16]
 8004ce6:	3401      	adds	r4, #1
 8004ce8:	4303      	orrs	r3, r0
 8004cea:	9304      	str	r3, [sp, #16]
 8004cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf0:	2206      	movs	r2, #6
 8004cf2:	482d      	ldr	r0, [pc, #180]	; (8004da8 <_vfiprintf_r+0x254>)
 8004cf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cf8:	f000 fce6 	bl	80056c8 <memchr>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d03f      	beq.n	8004d80 <_vfiprintf_r+0x22c>
 8004d00:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <_vfiprintf_r+0x258>)
 8004d02:	bb1b      	cbnz	r3, 8004d4c <_vfiprintf_r+0x1f8>
 8004d04:	9b03      	ldr	r3, [sp, #12]
 8004d06:	3307      	adds	r3, #7
 8004d08:	f023 0307 	bic.w	r3, r3, #7
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	9303      	str	r3, [sp, #12]
 8004d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d12:	443b      	add	r3, r7
 8004d14:	9309      	str	r3, [sp, #36]	; 0x24
 8004d16:	e767      	b.n	8004be8 <_vfiprintf_r+0x94>
 8004d18:	460c      	mov	r4, r1
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d20:	e7a5      	b.n	8004c6e <_vfiprintf_r+0x11a>
 8004d22:	2300      	movs	r3, #0
 8004d24:	f04f 0c0a 	mov.w	ip, #10
 8004d28:	4619      	mov	r1, r3
 8004d2a:	3401      	adds	r4, #1
 8004d2c:	9305      	str	r3, [sp, #20]
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d34:	3a30      	subs	r2, #48	; 0x30
 8004d36:	2a09      	cmp	r2, #9
 8004d38:	d903      	bls.n	8004d42 <_vfiprintf_r+0x1ee>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0c5      	beq.n	8004cca <_vfiprintf_r+0x176>
 8004d3e:	9105      	str	r1, [sp, #20]
 8004d40:	e7c3      	b.n	8004cca <_vfiprintf_r+0x176>
 8004d42:	4604      	mov	r4, r0
 8004d44:	2301      	movs	r3, #1
 8004d46:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d4a:	e7f0      	b.n	8004d2e <_vfiprintf_r+0x1da>
 8004d4c:	ab03      	add	r3, sp, #12
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	462a      	mov	r2, r5
 8004d52:	4630      	mov	r0, r6
 8004d54:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <_vfiprintf_r+0x25c>)
 8004d56:	a904      	add	r1, sp, #16
 8004d58:	f3af 8000 	nop.w
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	1c78      	adds	r0, r7, #1
 8004d60:	d1d6      	bne.n	8004d10 <_vfiprintf_r+0x1bc>
 8004d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d64:	07d9      	lsls	r1, r3, #31
 8004d66:	d405      	bmi.n	8004d74 <_vfiprintf_r+0x220>
 8004d68:	89ab      	ldrh	r3, [r5, #12]
 8004d6a:	059a      	lsls	r2, r3, #22
 8004d6c:	d402      	bmi.n	8004d74 <_vfiprintf_r+0x220>
 8004d6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d70:	f000 fc43 	bl	80055fa <__retarget_lock_release_recursive>
 8004d74:	89ab      	ldrh	r3, [r5, #12]
 8004d76:	065b      	lsls	r3, r3, #25
 8004d78:	f53f af12 	bmi.w	8004ba0 <_vfiprintf_r+0x4c>
 8004d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d7e:	e711      	b.n	8004ba4 <_vfiprintf_r+0x50>
 8004d80:	ab03      	add	r3, sp, #12
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	462a      	mov	r2, r5
 8004d86:	4630      	mov	r0, r6
 8004d88:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <_vfiprintf_r+0x25c>)
 8004d8a:	a904      	add	r1, sp, #16
 8004d8c:	f000 f882 	bl	8004e94 <_printf_i>
 8004d90:	e7e4      	b.n	8004d5c <_vfiprintf_r+0x208>
 8004d92:	bf00      	nop
 8004d94:	0800641c 	.word	0x0800641c
 8004d98:	0800643c 	.word	0x0800643c
 8004d9c:	080063fc 	.word	0x080063fc
 8004da0:	080063c6 	.word	0x080063c6
 8004da4:	080063cc 	.word	0x080063cc
 8004da8:	080063d0 	.word	0x080063d0
 8004dac:	00000000 	.word	0x00000000
 8004db0:	08004b2f 	.word	0x08004b2f

08004db4 <_printf_common>:
 8004db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db8:	4616      	mov	r6, r2
 8004dba:	4699      	mov	r9, r3
 8004dbc:	688a      	ldr	r2, [r1, #8]
 8004dbe:	690b      	ldr	r3, [r1, #16]
 8004dc0:	4607      	mov	r7, r0
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	bfb8      	it	lt
 8004dc6:	4613      	movlt	r3, r2
 8004dc8:	6033      	str	r3, [r6, #0]
 8004dca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dce:	460c      	mov	r4, r1
 8004dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dd4:	b10a      	cbz	r2, 8004dda <_printf_common+0x26>
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	6033      	str	r3, [r6, #0]
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	0699      	lsls	r1, r3, #26
 8004dde:	bf42      	ittt	mi
 8004de0:	6833      	ldrmi	r3, [r6, #0]
 8004de2:	3302      	addmi	r3, #2
 8004de4:	6033      	strmi	r3, [r6, #0]
 8004de6:	6825      	ldr	r5, [r4, #0]
 8004de8:	f015 0506 	ands.w	r5, r5, #6
 8004dec:	d106      	bne.n	8004dfc <_printf_common+0x48>
 8004dee:	f104 0a19 	add.w	sl, r4, #25
 8004df2:	68e3      	ldr	r3, [r4, #12]
 8004df4:	6832      	ldr	r2, [r6, #0]
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	42ab      	cmp	r3, r5
 8004dfa:	dc28      	bgt.n	8004e4e <_printf_common+0x9a>
 8004dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e00:	1e13      	subs	r3, r2, #0
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	bf18      	it	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	0692      	lsls	r2, r2, #26
 8004e0a:	d42d      	bmi.n	8004e68 <_printf_common+0xb4>
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	4638      	mov	r0, r7
 8004e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e14:	47c0      	blx	r8
 8004e16:	3001      	adds	r0, #1
 8004e18:	d020      	beq.n	8004e5c <_printf_common+0xa8>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	68e5      	ldr	r5, [r4, #12]
 8004e1e:	f003 0306 	and.w	r3, r3, #6
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	bf18      	it	ne
 8004e26:	2500      	movne	r5, #0
 8004e28:	6832      	ldr	r2, [r6, #0]
 8004e2a:	f04f 0600 	mov.w	r6, #0
 8004e2e:	68a3      	ldr	r3, [r4, #8]
 8004e30:	bf08      	it	eq
 8004e32:	1aad      	subeq	r5, r5, r2
 8004e34:	6922      	ldr	r2, [r4, #16]
 8004e36:	bf08      	it	eq
 8004e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	bfc4      	itt	gt
 8004e40:	1a9b      	subgt	r3, r3, r2
 8004e42:	18ed      	addgt	r5, r5, r3
 8004e44:	341a      	adds	r4, #26
 8004e46:	42b5      	cmp	r5, r6
 8004e48:	d11a      	bne.n	8004e80 <_printf_common+0xcc>
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	e008      	b.n	8004e60 <_printf_common+0xac>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4652      	mov	r2, sl
 8004e52:	4649      	mov	r1, r9
 8004e54:	4638      	mov	r0, r7
 8004e56:	47c0      	blx	r8
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d103      	bne.n	8004e64 <_printf_common+0xb0>
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e64:	3501      	adds	r5, #1
 8004e66:	e7c4      	b.n	8004df2 <_printf_common+0x3e>
 8004e68:	2030      	movs	r0, #48	; 0x30
 8004e6a:	18e1      	adds	r1, r4, r3
 8004e6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e76:	4422      	add	r2, r4
 8004e78:	3302      	adds	r3, #2
 8004e7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e7e:	e7c5      	b.n	8004e0c <_printf_common+0x58>
 8004e80:	2301      	movs	r3, #1
 8004e82:	4622      	mov	r2, r4
 8004e84:	4649      	mov	r1, r9
 8004e86:	4638      	mov	r0, r7
 8004e88:	47c0      	blx	r8
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d0e6      	beq.n	8004e5c <_printf_common+0xa8>
 8004e8e:	3601      	adds	r6, #1
 8004e90:	e7d9      	b.n	8004e46 <_printf_common+0x92>
	...

08004e94 <_printf_i>:
 8004e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e98:	7e0f      	ldrb	r7, [r1, #24]
 8004e9a:	4691      	mov	r9, r2
 8004e9c:	2f78      	cmp	r7, #120	; 0x78
 8004e9e:	4680      	mov	r8, r0
 8004ea0:	460c      	mov	r4, r1
 8004ea2:	469a      	mov	sl, r3
 8004ea4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004eaa:	d807      	bhi.n	8004ebc <_printf_i+0x28>
 8004eac:	2f62      	cmp	r7, #98	; 0x62
 8004eae:	d80a      	bhi.n	8004ec6 <_printf_i+0x32>
 8004eb0:	2f00      	cmp	r7, #0
 8004eb2:	f000 80d9 	beq.w	8005068 <_printf_i+0x1d4>
 8004eb6:	2f58      	cmp	r7, #88	; 0x58
 8004eb8:	f000 80a4 	beq.w	8005004 <_printf_i+0x170>
 8004ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ec4:	e03a      	b.n	8004f3c <_printf_i+0xa8>
 8004ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004eca:	2b15      	cmp	r3, #21
 8004ecc:	d8f6      	bhi.n	8004ebc <_printf_i+0x28>
 8004ece:	a101      	add	r1, pc, #4	; (adr r1, 8004ed4 <_printf_i+0x40>)
 8004ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ed4:	08004f2d 	.word	0x08004f2d
 8004ed8:	08004f41 	.word	0x08004f41
 8004edc:	08004ebd 	.word	0x08004ebd
 8004ee0:	08004ebd 	.word	0x08004ebd
 8004ee4:	08004ebd 	.word	0x08004ebd
 8004ee8:	08004ebd 	.word	0x08004ebd
 8004eec:	08004f41 	.word	0x08004f41
 8004ef0:	08004ebd 	.word	0x08004ebd
 8004ef4:	08004ebd 	.word	0x08004ebd
 8004ef8:	08004ebd 	.word	0x08004ebd
 8004efc:	08004ebd 	.word	0x08004ebd
 8004f00:	0800504f 	.word	0x0800504f
 8004f04:	08004f71 	.word	0x08004f71
 8004f08:	08005031 	.word	0x08005031
 8004f0c:	08004ebd 	.word	0x08004ebd
 8004f10:	08004ebd 	.word	0x08004ebd
 8004f14:	08005071 	.word	0x08005071
 8004f18:	08004ebd 	.word	0x08004ebd
 8004f1c:	08004f71 	.word	0x08004f71
 8004f20:	08004ebd 	.word	0x08004ebd
 8004f24:	08004ebd 	.word	0x08004ebd
 8004f28:	08005039 	.word	0x08005039
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	1d1a      	adds	r2, r3, #4
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	602a      	str	r2, [r5, #0]
 8004f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0a4      	b.n	800508a <_printf_i+0x1f6>
 8004f40:	6820      	ldr	r0, [r4, #0]
 8004f42:	6829      	ldr	r1, [r5, #0]
 8004f44:	0606      	lsls	r6, r0, #24
 8004f46:	f101 0304 	add.w	r3, r1, #4
 8004f4a:	d50a      	bpl.n	8004f62 <_printf_i+0xce>
 8004f4c:	680e      	ldr	r6, [r1, #0]
 8004f4e:	602b      	str	r3, [r5, #0]
 8004f50:	2e00      	cmp	r6, #0
 8004f52:	da03      	bge.n	8004f5c <_printf_i+0xc8>
 8004f54:	232d      	movs	r3, #45	; 0x2d
 8004f56:	4276      	negs	r6, r6
 8004f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f5c:	230a      	movs	r3, #10
 8004f5e:	485e      	ldr	r0, [pc, #376]	; (80050d8 <_printf_i+0x244>)
 8004f60:	e019      	b.n	8004f96 <_printf_i+0x102>
 8004f62:	680e      	ldr	r6, [r1, #0]
 8004f64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	bf18      	it	ne
 8004f6c:	b236      	sxthne	r6, r6
 8004f6e:	e7ef      	b.n	8004f50 <_printf_i+0xbc>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	1d19      	adds	r1, r3, #4
 8004f76:	6029      	str	r1, [r5, #0]
 8004f78:	0601      	lsls	r1, r0, #24
 8004f7a:	d501      	bpl.n	8004f80 <_printf_i+0xec>
 8004f7c:	681e      	ldr	r6, [r3, #0]
 8004f7e:	e002      	b.n	8004f86 <_printf_i+0xf2>
 8004f80:	0646      	lsls	r6, r0, #25
 8004f82:	d5fb      	bpl.n	8004f7c <_printf_i+0xe8>
 8004f84:	881e      	ldrh	r6, [r3, #0]
 8004f86:	2f6f      	cmp	r7, #111	; 0x6f
 8004f88:	bf0c      	ite	eq
 8004f8a:	2308      	moveq	r3, #8
 8004f8c:	230a      	movne	r3, #10
 8004f8e:	4852      	ldr	r0, [pc, #328]	; (80050d8 <_printf_i+0x244>)
 8004f90:	2100      	movs	r1, #0
 8004f92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f96:	6865      	ldr	r5, [r4, #4]
 8004f98:	2d00      	cmp	r5, #0
 8004f9a:	bfa8      	it	ge
 8004f9c:	6821      	ldrge	r1, [r4, #0]
 8004f9e:	60a5      	str	r5, [r4, #8]
 8004fa0:	bfa4      	itt	ge
 8004fa2:	f021 0104 	bicge.w	r1, r1, #4
 8004fa6:	6021      	strge	r1, [r4, #0]
 8004fa8:	b90e      	cbnz	r6, 8004fae <_printf_i+0x11a>
 8004faa:	2d00      	cmp	r5, #0
 8004fac:	d04d      	beq.n	800504a <_printf_i+0x1b6>
 8004fae:	4615      	mov	r5, r2
 8004fb0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fb4:	fb03 6711 	mls	r7, r3, r1, r6
 8004fb8:	5dc7      	ldrb	r7, [r0, r7]
 8004fba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fbe:	4637      	mov	r7, r6
 8004fc0:	42bb      	cmp	r3, r7
 8004fc2:	460e      	mov	r6, r1
 8004fc4:	d9f4      	bls.n	8004fb0 <_printf_i+0x11c>
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d10b      	bne.n	8004fe2 <_printf_i+0x14e>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	07de      	lsls	r6, r3, #31
 8004fce:	d508      	bpl.n	8004fe2 <_printf_i+0x14e>
 8004fd0:	6923      	ldr	r3, [r4, #16]
 8004fd2:	6861      	ldr	r1, [r4, #4]
 8004fd4:	4299      	cmp	r1, r3
 8004fd6:	bfde      	ittt	le
 8004fd8:	2330      	movle	r3, #48	; 0x30
 8004fda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fde:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fe2:	1b52      	subs	r2, r2, r5
 8004fe4:	6122      	str	r2, [r4, #16]
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	4621      	mov	r1, r4
 8004fea:	4640      	mov	r0, r8
 8004fec:	f8cd a000 	str.w	sl, [sp]
 8004ff0:	aa03      	add	r2, sp, #12
 8004ff2:	f7ff fedf 	bl	8004db4 <_printf_common>
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d14c      	bne.n	8005094 <_printf_i+0x200>
 8004ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffe:	b004      	add	sp, #16
 8005000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005004:	4834      	ldr	r0, [pc, #208]	; (80050d8 <_printf_i+0x244>)
 8005006:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800500a:	6829      	ldr	r1, [r5, #0]
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005012:	6029      	str	r1, [r5, #0]
 8005014:	061d      	lsls	r5, r3, #24
 8005016:	d514      	bpl.n	8005042 <_printf_i+0x1ae>
 8005018:	07df      	lsls	r7, r3, #31
 800501a:	bf44      	itt	mi
 800501c:	f043 0320 	orrmi.w	r3, r3, #32
 8005020:	6023      	strmi	r3, [r4, #0]
 8005022:	b91e      	cbnz	r6, 800502c <_printf_i+0x198>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	f023 0320 	bic.w	r3, r3, #32
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	2310      	movs	r3, #16
 800502e:	e7af      	b.n	8004f90 <_printf_i+0xfc>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	f043 0320 	orr.w	r3, r3, #32
 8005036:	6023      	str	r3, [r4, #0]
 8005038:	2378      	movs	r3, #120	; 0x78
 800503a:	4828      	ldr	r0, [pc, #160]	; (80050dc <_printf_i+0x248>)
 800503c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005040:	e7e3      	b.n	800500a <_printf_i+0x176>
 8005042:	0659      	lsls	r1, r3, #25
 8005044:	bf48      	it	mi
 8005046:	b2b6      	uxthmi	r6, r6
 8005048:	e7e6      	b.n	8005018 <_printf_i+0x184>
 800504a:	4615      	mov	r5, r2
 800504c:	e7bb      	b.n	8004fc6 <_printf_i+0x132>
 800504e:	682b      	ldr	r3, [r5, #0]
 8005050:	6826      	ldr	r6, [r4, #0]
 8005052:	1d18      	adds	r0, r3, #4
 8005054:	6961      	ldr	r1, [r4, #20]
 8005056:	6028      	str	r0, [r5, #0]
 8005058:	0635      	lsls	r5, r6, #24
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	d501      	bpl.n	8005062 <_printf_i+0x1ce>
 800505e:	6019      	str	r1, [r3, #0]
 8005060:	e002      	b.n	8005068 <_printf_i+0x1d4>
 8005062:	0670      	lsls	r0, r6, #25
 8005064:	d5fb      	bpl.n	800505e <_printf_i+0x1ca>
 8005066:	8019      	strh	r1, [r3, #0]
 8005068:	2300      	movs	r3, #0
 800506a:	4615      	mov	r5, r2
 800506c:	6123      	str	r3, [r4, #16]
 800506e:	e7ba      	b.n	8004fe6 <_printf_i+0x152>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	2100      	movs	r1, #0
 8005074:	1d1a      	adds	r2, r3, #4
 8005076:	602a      	str	r2, [r5, #0]
 8005078:	681d      	ldr	r5, [r3, #0]
 800507a:	6862      	ldr	r2, [r4, #4]
 800507c:	4628      	mov	r0, r5
 800507e:	f000 fb23 	bl	80056c8 <memchr>
 8005082:	b108      	cbz	r0, 8005088 <_printf_i+0x1f4>
 8005084:	1b40      	subs	r0, r0, r5
 8005086:	6060      	str	r0, [r4, #4]
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	6123      	str	r3, [r4, #16]
 800508c:	2300      	movs	r3, #0
 800508e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005092:	e7a8      	b.n	8004fe6 <_printf_i+0x152>
 8005094:	462a      	mov	r2, r5
 8005096:	4649      	mov	r1, r9
 8005098:	4640      	mov	r0, r8
 800509a:	6923      	ldr	r3, [r4, #16]
 800509c:	47d0      	blx	sl
 800509e:	3001      	adds	r0, #1
 80050a0:	d0ab      	beq.n	8004ffa <_printf_i+0x166>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	079b      	lsls	r3, r3, #30
 80050a6:	d413      	bmi.n	80050d0 <_printf_i+0x23c>
 80050a8:	68e0      	ldr	r0, [r4, #12]
 80050aa:	9b03      	ldr	r3, [sp, #12]
 80050ac:	4298      	cmp	r0, r3
 80050ae:	bfb8      	it	lt
 80050b0:	4618      	movlt	r0, r3
 80050b2:	e7a4      	b.n	8004ffe <_printf_i+0x16a>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4632      	mov	r2, r6
 80050b8:	4649      	mov	r1, r9
 80050ba:	4640      	mov	r0, r8
 80050bc:	47d0      	blx	sl
 80050be:	3001      	adds	r0, #1
 80050c0:	d09b      	beq.n	8004ffa <_printf_i+0x166>
 80050c2:	3501      	adds	r5, #1
 80050c4:	68e3      	ldr	r3, [r4, #12]
 80050c6:	9903      	ldr	r1, [sp, #12]
 80050c8:	1a5b      	subs	r3, r3, r1
 80050ca:	42ab      	cmp	r3, r5
 80050cc:	dcf2      	bgt.n	80050b4 <_printf_i+0x220>
 80050ce:	e7eb      	b.n	80050a8 <_printf_i+0x214>
 80050d0:	2500      	movs	r5, #0
 80050d2:	f104 0619 	add.w	r6, r4, #25
 80050d6:	e7f5      	b.n	80050c4 <_printf_i+0x230>
 80050d8:	080063d7 	.word	0x080063d7
 80050dc:	080063e8 	.word	0x080063e8

080050e0 <_sbrk_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	2300      	movs	r3, #0
 80050e4:	4d05      	ldr	r5, [pc, #20]	; (80050fc <_sbrk_r+0x1c>)
 80050e6:	4604      	mov	r4, r0
 80050e8:	4608      	mov	r0, r1
 80050ea:	602b      	str	r3, [r5, #0]
 80050ec:	f7fd f9aa 	bl	8002444 <_sbrk>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d102      	bne.n	80050fa <_sbrk_r+0x1a>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b103      	cbz	r3, 80050fa <_sbrk_r+0x1a>
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	200001fc 	.word	0x200001fc

08005100 <__swbuf_r>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	460e      	mov	r6, r1
 8005104:	4614      	mov	r4, r2
 8005106:	4605      	mov	r5, r0
 8005108:	b118      	cbz	r0, 8005112 <__swbuf_r+0x12>
 800510a:	6983      	ldr	r3, [r0, #24]
 800510c:	b90b      	cbnz	r3, 8005112 <__swbuf_r+0x12>
 800510e:	f000 f9d5 	bl	80054bc <__sinit>
 8005112:	4b21      	ldr	r3, [pc, #132]	; (8005198 <__swbuf_r+0x98>)
 8005114:	429c      	cmp	r4, r3
 8005116:	d12b      	bne.n	8005170 <__swbuf_r+0x70>
 8005118:	686c      	ldr	r4, [r5, #4]
 800511a:	69a3      	ldr	r3, [r4, #24]
 800511c:	60a3      	str	r3, [r4, #8]
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	071a      	lsls	r2, r3, #28
 8005122:	d52f      	bpl.n	8005184 <__swbuf_r+0x84>
 8005124:	6923      	ldr	r3, [r4, #16]
 8005126:	b36b      	cbz	r3, 8005184 <__swbuf_r+0x84>
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	6820      	ldr	r0, [r4, #0]
 800512c:	b2f6      	uxtb	r6, r6
 800512e:	1ac0      	subs	r0, r0, r3
 8005130:	6963      	ldr	r3, [r4, #20]
 8005132:	4637      	mov	r7, r6
 8005134:	4283      	cmp	r3, r0
 8005136:	dc04      	bgt.n	8005142 <__swbuf_r+0x42>
 8005138:	4621      	mov	r1, r4
 800513a:	4628      	mov	r0, r5
 800513c:	f000 f92a 	bl	8005394 <_fflush_r>
 8005140:	bb30      	cbnz	r0, 8005190 <__swbuf_r+0x90>
 8005142:	68a3      	ldr	r3, [r4, #8]
 8005144:	3001      	adds	r0, #1
 8005146:	3b01      	subs	r3, #1
 8005148:	60a3      	str	r3, [r4, #8]
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	6022      	str	r2, [r4, #0]
 8005150:	701e      	strb	r6, [r3, #0]
 8005152:	6963      	ldr	r3, [r4, #20]
 8005154:	4283      	cmp	r3, r0
 8005156:	d004      	beq.n	8005162 <__swbuf_r+0x62>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	07db      	lsls	r3, r3, #31
 800515c:	d506      	bpl.n	800516c <__swbuf_r+0x6c>
 800515e:	2e0a      	cmp	r6, #10
 8005160:	d104      	bne.n	800516c <__swbuf_r+0x6c>
 8005162:	4621      	mov	r1, r4
 8005164:	4628      	mov	r0, r5
 8005166:	f000 f915 	bl	8005394 <_fflush_r>
 800516a:	b988      	cbnz	r0, 8005190 <__swbuf_r+0x90>
 800516c:	4638      	mov	r0, r7
 800516e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005170:	4b0a      	ldr	r3, [pc, #40]	; (800519c <__swbuf_r+0x9c>)
 8005172:	429c      	cmp	r4, r3
 8005174:	d101      	bne.n	800517a <__swbuf_r+0x7a>
 8005176:	68ac      	ldr	r4, [r5, #8]
 8005178:	e7cf      	b.n	800511a <__swbuf_r+0x1a>
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <__swbuf_r+0xa0>)
 800517c:	429c      	cmp	r4, r3
 800517e:	bf08      	it	eq
 8005180:	68ec      	ldreq	r4, [r5, #12]
 8005182:	e7ca      	b.n	800511a <__swbuf_r+0x1a>
 8005184:	4621      	mov	r1, r4
 8005186:	4628      	mov	r0, r5
 8005188:	f000 f80c 	bl	80051a4 <__swsetup_r>
 800518c:	2800      	cmp	r0, #0
 800518e:	d0cb      	beq.n	8005128 <__swbuf_r+0x28>
 8005190:	f04f 37ff 	mov.w	r7, #4294967295
 8005194:	e7ea      	b.n	800516c <__swbuf_r+0x6c>
 8005196:	bf00      	nop
 8005198:	0800641c 	.word	0x0800641c
 800519c:	0800643c 	.word	0x0800643c
 80051a0:	080063fc 	.word	0x080063fc

080051a4 <__swsetup_r>:
 80051a4:	4b32      	ldr	r3, [pc, #200]	; (8005270 <__swsetup_r+0xcc>)
 80051a6:	b570      	push	{r4, r5, r6, lr}
 80051a8:	681d      	ldr	r5, [r3, #0]
 80051aa:	4606      	mov	r6, r0
 80051ac:	460c      	mov	r4, r1
 80051ae:	b125      	cbz	r5, 80051ba <__swsetup_r+0x16>
 80051b0:	69ab      	ldr	r3, [r5, #24]
 80051b2:	b913      	cbnz	r3, 80051ba <__swsetup_r+0x16>
 80051b4:	4628      	mov	r0, r5
 80051b6:	f000 f981 	bl	80054bc <__sinit>
 80051ba:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <__swsetup_r+0xd0>)
 80051bc:	429c      	cmp	r4, r3
 80051be:	d10f      	bne.n	80051e0 <__swsetup_r+0x3c>
 80051c0:	686c      	ldr	r4, [r5, #4]
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051c8:	0719      	lsls	r1, r3, #28
 80051ca:	d42c      	bmi.n	8005226 <__swsetup_r+0x82>
 80051cc:	06dd      	lsls	r5, r3, #27
 80051ce:	d411      	bmi.n	80051f4 <__swsetup_r+0x50>
 80051d0:	2309      	movs	r3, #9
 80051d2:	6033      	str	r3, [r6, #0]
 80051d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	e03e      	b.n	800525e <__swsetup_r+0xba>
 80051e0:	4b25      	ldr	r3, [pc, #148]	; (8005278 <__swsetup_r+0xd4>)
 80051e2:	429c      	cmp	r4, r3
 80051e4:	d101      	bne.n	80051ea <__swsetup_r+0x46>
 80051e6:	68ac      	ldr	r4, [r5, #8]
 80051e8:	e7eb      	b.n	80051c2 <__swsetup_r+0x1e>
 80051ea:	4b24      	ldr	r3, [pc, #144]	; (800527c <__swsetup_r+0xd8>)
 80051ec:	429c      	cmp	r4, r3
 80051ee:	bf08      	it	eq
 80051f0:	68ec      	ldreq	r4, [r5, #12]
 80051f2:	e7e6      	b.n	80051c2 <__swsetup_r+0x1e>
 80051f4:	0758      	lsls	r0, r3, #29
 80051f6:	d512      	bpl.n	800521e <__swsetup_r+0x7a>
 80051f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051fa:	b141      	cbz	r1, 800520e <__swsetup_r+0x6a>
 80051fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005200:	4299      	cmp	r1, r3
 8005202:	d002      	beq.n	800520a <__swsetup_r+0x66>
 8005204:	4630      	mov	r0, r6
 8005206:	f7ff fa45 	bl	8004694 <_free_r>
 800520a:	2300      	movs	r3, #0
 800520c:	6363      	str	r3, [r4, #52]	; 0x34
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005214:	81a3      	strh	r3, [r4, #12]
 8005216:	2300      	movs	r3, #0
 8005218:	6063      	str	r3, [r4, #4]
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	89a3      	ldrh	r3, [r4, #12]
 8005220:	f043 0308 	orr.w	r3, r3, #8
 8005224:	81a3      	strh	r3, [r4, #12]
 8005226:	6923      	ldr	r3, [r4, #16]
 8005228:	b94b      	cbnz	r3, 800523e <__swsetup_r+0x9a>
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005234:	d003      	beq.n	800523e <__swsetup_r+0x9a>
 8005236:	4621      	mov	r1, r4
 8005238:	4630      	mov	r0, r6
 800523a:	f000 fa05 	bl	8005648 <__smakebuf_r>
 800523e:	89a0      	ldrh	r0, [r4, #12]
 8005240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005244:	f010 0301 	ands.w	r3, r0, #1
 8005248:	d00a      	beq.n	8005260 <__swsetup_r+0xbc>
 800524a:	2300      	movs	r3, #0
 800524c:	60a3      	str	r3, [r4, #8]
 800524e:	6963      	ldr	r3, [r4, #20]
 8005250:	425b      	negs	r3, r3
 8005252:	61a3      	str	r3, [r4, #24]
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	b943      	cbnz	r3, 800526a <__swsetup_r+0xc6>
 8005258:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800525c:	d1ba      	bne.n	80051d4 <__swsetup_r+0x30>
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	0781      	lsls	r1, r0, #30
 8005262:	bf58      	it	pl
 8005264:	6963      	ldrpl	r3, [r4, #20]
 8005266:	60a3      	str	r3, [r4, #8]
 8005268:	e7f4      	b.n	8005254 <__swsetup_r+0xb0>
 800526a:	2000      	movs	r0, #0
 800526c:	e7f7      	b.n	800525e <__swsetup_r+0xba>
 800526e:	bf00      	nop
 8005270:	20000010 	.word	0x20000010
 8005274:	0800641c 	.word	0x0800641c
 8005278:	0800643c 	.word	0x0800643c
 800527c:	080063fc 	.word	0x080063fc

08005280 <abort>:
 8005280:	2006      	movs	r0, #6
 8005282:	b508      	push	{r3, lr}
 8005284:	f000 faba 	bl	80057fc <raise>
 8005288:	2001      	movs	r0, #1
 800528a:	f7fd f85c 	bl	8002346 <_exit>
	...

08005290 <__sflush_r>:
 8005290:	898a      	ldrh	r2, [r1, #12]
 8005292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005294:	4605      	mov	r5, r0
 8005296:	0710      	lsls	r0, r2, #28
 8005298:	460c      	mov	r4, r1
 800529a:	d457      	bmi.n	800534c <__sflush_r+0xbc>
 800529c:	684b      	ldr	r3, [r1, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	dc04      	bgt.n	80052ac <__sflush_r+0x1c>
 80052a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	dc01      	bgt.n	80052ac <__sflush_r+0x1c>
 80052a8:	2000      	movs	r0, #0
 80052aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ae:	2e00      	cmp	r6, #0
 80052b0:	d0fa      	beq.n	80052a8 <__sflush_r+0x18>
 80052b2:	2300      	movs	r3, #0
 80052b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052b8:	682f      	ldr	r7, [r5, #0]
 80052ba:	602b      	str	r3, [r5, #0]
 80052bc:	d032      	beq.n	8005324 <__sflush_r+0x94>
 80052be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	075a      	lsls	r2, r3, #29
 80052c4:	d505      	bpl.n	80052d2 <__sflush_r+0x42>
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	1ac0      	subs	r0, r0, r3
 80052ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052cc:	b10b      	cbz	r3, 80052d2 <__sflush_r+0x42>
 80052ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052d0:	1ac0      	subs	r0, r0, r3
 80052d2:	2300      	movs	r3, #0
 80052d4:	4602      	mov	r2, r0
 80052d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052d8:	4628      	mov	r0, r5
 80052da:	6a21      	ldr	r1, [r4, #32]
 80052dc:	47b0      	blx	r6
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	d106      	bne.n	80052f2 <__sflush_r+0x62>
 80052e4:	6829      	ldr	r1, [r5, #0]
 80052e6:	291d      	cmp	r1, #29
 80052e8:	d82c      	bhi.n	8005344 <__sflush_r+0xb4>
 80052ea:	4a29      	ldr	r2, [pc, #164]	; (8005390 <__sflush_r+0x100>)
 80052ec:	40ca      	lsrs	r2, r1
 80052ee:	07d6      	lsls	r6, r2, #31
 80052f0:	d528      	bpl.n	8005344 <__sflush_r+0xb4>
 80052f2:	2200      	movs	r2, #0
 80052f4:	6062      	str	r2, [r4, #4]
 80052f6:	6922      	ldr	r2, [r4, #16]
 80052f8:	04d9      	lsls	r1, r3, #19
 80052fa:	6022      	str	r2, [r4, #0]
 80052fc:	d504      	bpl.n	8005308 <__sflush_r+0x78>
 80052fe:	1c42      	adds	r2, r0, #1
 8005300:	d101      	bne.n	8005306 <__sflush_r+0x76>
 8005302:	682b      	ldr	r3, [r5, #0]
 8005304:	b903      	cbnz	r3, 8005308 <__sflush_r+0x78>
 8005306:	6560      	str	r0, [r4, #84]	; 0x54
 8005308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800530a:	602f      	str	r7, [r5, #0]
 800530c:	2900      	cmp	r1, #0
 800530e:	d0cb      	beq.n	80052a8 <__sflush_r+0x18>
 8005310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005314:	4299      	cmp	r1, r3
 8005316:	d002      	beq.n	800531e <__sflush_r+0x8e>
 8005318:	4628      	mov	r0, r5
 800531a:	f7ff f9bb 	bl	8004694 <_free_r>
 800531e:	2000      	movs	r0, #0
 8005320:	6360      	str	r0, [r4, #52]	; 0x34
 8005322:	e7c2      	b.n	80052aa <__sflush_r+0x1a>
 8005324:	6a21      	ldr	r1, [r4, #32]
 8005326:	2301      	movs	r3, #1
 8005328:	4628      	mov	r0, r5
 800532a:	47b0      	blx	r6
 800532c:	1c41      	adds	r1, r0, #1
 800532e:	d1c7      	bne.n	80052c0 <__sflush_r+0x30>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0c4      	beq.n	80052c0 <__sflush_r+0x30>
 8005336:	2b1d      	cmp	r3, #29
 8005338:	d001      	beq.n	800533e <__sflush_r+0xae>
 800533a:	2b16      	cmp	r3, #22
 800533c:	d101      	bne.n	8005342 <__sflush_r+0xb2>
 800533e:	602f      	str	r7, [r5, #0]
 8005340:	e7b2      	b.n	80052a8 <__sflush_r+0x18>
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005348:	81a3      	strh	r3, [r4, #12]
 800534a:	e7ae      	b.n	80052aa <__sflush_r+0x1a>
 800534c:	690f      	ldr	r7, [r1, #16]
 800534e:	2f00      	cmp	r7, #0
 8005350:	d0aa      	beq.n	80052a8 <__sflush_r+0x18>
 8005352:	0793      	lsls	r3, r2, #30
 8005354:	bf18      	it	ne
 8005356:	2300      	movne	r3, #0
 8005358:	680e      	ldr	r6, [r1, #0]
 800535a:	bf08      	it	eq
 800535c:	694b      	ldreq	r3, [r1, #20]
 800535e:	1bf6      	subs	r6, r6, r7
 8005360:	600f      	str	r7, [r1, #0]
 8005362:	608b      	str	r3, [r1, #8]
 8005364:	2e00      	cmp	r6, #0
 8005366:	dd9f      	ble.n	80052a8 <__sflush_r+0x18>
 8005368:	4633      	mov	r3, r6
 800536a:	463a      	mov	r2, r7
 800536c:	4628      	mov	r0, r5
 800536e:	6a21      	ldr	r1, [r4, #32]
 8005370:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005374:	47e0      	blx	ip
 8005376:	2800      	cmp	r0, #0
 8005378:	dc06      	bgt.n	8005388 <__sflush_r+0xf8>
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	e790      	b.n	80052aa <__sflush_r+0x1a>
 8005388:	4407      	add	r7, r0
 800538a:	1a36      	subs	r6, r6, r0
 800538c:	e7ea      	b.n	8005364 <__sflush_r+0xd4>
 800538e:	bf00      	nop
 8005390:	20400001 	.word	0x20400001

08005394 <_fflush_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	690b      	ldr	r3, [r1, #16]
 8005398:	4605      	mov	r5, r0
 800539a:	460c      	mov	r4, r1
 800539c:	b913      	cbnz	r3, 80053a4 <_fflush_r+0x10>
 800539e:	2500      	movs	r5, #0
 80053a0:	4628      	mov	r0, r5
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	b118      	cbz	r0, 80053ae <_fflush_r+0x1a>
 80053a6:	6983      	ldr	r3, [r0, #24]
 80053a8:	b90b      	cbnz	r3, 80053ae <_fflush_r+0x1a>
 80053aa:	f000 f887 	bl	80054bc <__sinit>
 80053ae:	4b14      	ldr	r3, [pc, #80]	; (8005400 <_fflush_r+0x6c>)
 80053b0:	429c      	cmp	r4, r3
 80053b2:	d11b      	bne.n	80053ec <_fflush_r+0x58>
 80053b4:	686c      	ldr	r4, [r5, #4]
 80053b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0ef      	beq.n	800539e <_fflush_r+0xa>
 80053be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053c0:	07d0      	lsls	r0, r2, #31
 80053c2:	d404      	bmi.n	80053ce <_fflush_r+0x3a>
 80053c4:	0599      	lsls	r1, r3, #22
 80053c6:	d402      	bmi.n	80053ce <_fflush_r+0x3a>
 80053c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ca:	f000 f915 	bl	80055f8 <__retarget_lock_acquire_recursive>
 80053ce:	4628      	mov	r0, r5
 80053d0:	4621      	mov	r1, r4
 80053d2:	f7ff ff5d 	bl	8005290 <__sflush_r>
 80053d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053d8:	4605      	mov	r5, r0
 80053da:	07da      	lsls	r2, r3, #31
 80053dc:	d4e0      	bmi.n	80053a0 <_fflush_r+0xc>
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	059b      	lsls	r3, r3, #22
 80053e2:	d4dd      	bmi.n	80053a0 <_fflush_r+0xc>
 80053e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053e6:	f000 f908 	bl	80055fa <__retarget_lock_release_recursive>
 80053ea:	e7d9      	b.n	80053a0 <_fflush_r+0xc>
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <_fflush_r+0x70>)
 80053ee:	429c      	cmp	r4, r3
 80053f0:	d101      	bne.n	80053f6 <_fflush_r+0x62>
 80053f2:	68ac      	ldr	r4, [r5, #8]
 80053f4:	e7df      	b.n	80053b6 <_fflush_r+0x22>
 80053f6:	4b04      	ldr	r3, [pc, #16]	; (8005408 <_fflush_r+0x74>)
 80053f8:	429c      	cmp	r4, r3
 80053fa:	bf08      	it	eq
 80053fc:	68ec      	ldreq	r4, [r5, #12]
 80053fe:	e7da      	b.n	80053b6 <_fflush_r+0x22>
 8005400:	0800641c 	.word	0x0800641c
 8005404:	0800643c 	.word	0x0800643c
 8005408:	080063fc 	.word	0x080063fc

0800540c <std>:
 800540c:	2300      	movs	r3, #0
 800540e:	b510      	push	{r4, lr}
 8005410:	4604      	mov	r4, r0
 8005412:	e9c0 3300 	strd	r3, r3, [r0]
 8005416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800541a:	6083      	str	r3, [r0, #8]
 800541c:	8181      	strh	r1, [r0, #12]
 800541e:	6643      	str	r3, [r0, #100]	; 0x64
 8005420:	81c2      	strh	r2, [r0, #14]
 8005422:	6183      	str	r3, [r0, #24]
 8005424:	4619      	mov	r1, r3
 8005426:	2208      	movs	r2, #8
 8005428:	305c      	adds	r0, #92	; 0x5c
 800542a:	f7ff f863 	bl	80044f4 <memset>
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <std+0x38>)
 8005430:	6224      	str	r4, [r4, #32]
 8005432:	6263      	str	r3, [r4, #36]	; 0x24
 8005434:	4b04      	ldr	r3, [pc, #16]	; (8005448 <std+0x3c>)
 8005436:	62a3      	str	r3, [r4, #40]	; 0x28
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <std+0x40>)
 800543a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <std+0x44>)
 800543e:	6323      	str	r3, [r4, #48]	; 0x30
 8005440:	bd10      	pop	{r4, pc}
 8005442:	bf00      	nop
 8005444:	08005835 	.word	0x08005835
 8005448:	08005857 	.word	0x08005857
 800544c:	0800588f 	.word	0x0800588f
 8005450:	080058b3 	.word	0x080058b3

08005454 <_cleanup_r>:
 8005454:	4901      	ldr	r1, [pc, #4]	; (800545c <_cleanup_r+0x8>)
 8005456:	f000 b8af 	b.w	80055b8 <_fwalk_reent>
 800545a:	bf00      	nop
 800545c:	08005395 	.word	0x08005395

08005460 <__sfmoreglue>:
 8005460:	2268      	movs	r2, #104	; 0x68
 8005462:	b570      	push	{r4, r5, r6, lr}
 8005464:	1e4d      	subs	r5, r1, #1
 8005466:	4355      	muls	r5, r2
 8005468:	460e      	mov	r6, r1
 800546a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800546e:	f7ff f979 	bl	8004764 <_malloc_r>
 8005472:	4604      	mov	r4, r0
 8005474:	b140      	cbz	r0, 8005488 <__sfmoreglue+0x28>
 8005476:	2100      	movs	r1, #0
 8005478:	e9c0 1600 	strd	r1, r6, [r0]
 800547c:	300c      	adds	r0, #12
 800547e:	60a0      	str	r0, [r4, #8]
 8005480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005484:	f7ff f836 	bl	80044f4 <memset>
 8005488:	4620      	mov	r0, r4
 800548a:	bd70      	pop	{r4, r5, r6, pc}

0800548c <__sfp_lock_acquire>:
 800548c:	4801      	ldr	r0, [pc, #4]	; (8005494 <__sfp_lock_acquire+0x8>)
 800548e:	f000 b8b3 	b.w	80055f8 <__retarget_lock_acquire_recursive>
 8005492:	bf00      	nop
 8005494:	200001f9 	.word	0x200001f9

08005498 <__sfp_lock_release>:
 8005498:	4801      	ldr	r0, [pc, #4]	; (80054a0 <__sfp_lock_release+0x8>)
 800549a:	f000 b8ae 	b.w	80055fa <__retarget_lock_release_recursive>
 800549e:	bf00      	nop
 80054a0:	200001f9 	.word	0x200001f9

080054a4 <__sinit_lock_acquire>:
 80054a4:	4801      	ldr	r0, [pc, #4]	; (80054ac <__sinit_lock_acquire+0x8>)
 80054a6:	f000 b8a7 	b.w	80055f8 <__retarget_lock_acquire_recursive>
 80054aa:	bf00      	nop
 80054ac:	200001fa 	.word	0x200001fa

080054b0 <__sinit_lock_release>:
 80054b0:	4801      	ldr	r0, [pc, #4]	; (80054b8 <__sinit_lock_release+0x8>)
 80054b2:	f000 b8a2 	b.w	80055fa <__retarget_lock_release_recursive>
 80054b6:	bf00      	nop
 80054b8:	200001fa 	.word	0x200001fa

080054bc <__sinit>:
 80054bc:	b510      	push	{r4, lr}
 80054be:	4604      	mov	r4, r0
 80054c0:	f7ff fff0 	bl	80054a4 <__sinit_lock_acquire>
 80054c4:	69a3      	ldr	r3, [r4, #24]
 80054c6:	b11b      	cbz	r3, 80054d0 <__sinit+0x14>
 80054c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054cc:	f7ff bff0 	b.w	80054b0 <__sinit_lock_release>
 80054d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054d4:	6523      	str	r3, [r4, #80]	; 0x50
 80054d6:	4b13      	ldr	r3, [pc, #76]	; (8005524 <__sinit+0x68>)
 80054d8:	4a13      	ldr	r2, [pc, #76]	; (8005528 <__sinit+0x6c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80054de:	42a3      	cmp	r3, r4
 80054e0:	bf08      	it	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	4620      	mov	r0, r4
 80054e6:	bf08      	it	eq
 80054e8:	61a3      	streq	r3, [r4, #24]
 80054ea:	f000 f81f 	bl	800552c <__sfp>
 80054ee:	6060      	str	r0, [r4, #4]
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 f81b 	bl	800552c <__sfp>
 80054f6:	60a0      	str	r0, [r4, #8]
 80054f8:	4620      	mov	r0, r4
 80054fa:	f000 f817 	bl	800552c <__sfp>
 80054fe:	2200      	movs	r2, #0
 8005500:	2104      	movs	r1, #4
 8005502:	60e0      	str	r0, [r4, #12]
 8005504:	6860      	ldr	r0, [r4, #4]
 8005506:	f7ff ff81 	bl	800540c <std>
 800550a:	2201      	movs	r2, #1
 800550c:	2109      	movs	r1, #9
 800550e:	68a0      	ldr	r0, [r4, #8]
 8005510:	f7ff ff7c 	bl	800540c <std>
 8005514:	2202      	movs	r2, #2
 8005516:	2112      	movs	r1, #18
 8005518:	68e0      	ldr	r0, [r4, #12]
 800551a:	f7ff ff77 	bl	800540c <std>
 800551e:	2301      	movs	r3, #1
 8005520:	61a3      	str	r3, [r4, #24]
 8005522:	e7d1      	b.n	80054c8 <__sinit+0xc>
 8005524:	08006314 	.word	0x08006314
 8005528:	08005455 	.word	0x08005455

0800552c <__sfp>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	4607      	mov	r7, r0
 8005530:	f7ff ffac 	bl	800548c <__sfp_lock_acquire>
 8005534:	4b1e      	ldr	r3, [pc, #120]	; (80055b0 <__sfp+0x84>)
 8005536:	681e      	ldr	r6, [r3, #0]
 8005538:	69b3      	ldr	r3, [r6, #24]
 800553a:	b913      	cbnz	r3, 8005542 <__sfp+0x16>
 800553c:	4630      	mov	r0, r6
 800553e:	f7ff ffbd 	bl	80054bc <__sinit>
 8005542:	3648      	adds	r6, #72	; 0x48
 8005544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005548:	3b01      	subs	r3, #1
 800554a:	d503      	bpl.n	8005554 <__sfp+0x28>
 800554c:	6833      	ldr	r3, [r6, #0]
 800554e:	b30b      	cbz	r3, 8005594 <__sfp+0x68>
 8005550:	6836      	ldr	r6, [r6, #0]
 8005552:	e7f7      	b.n	8005544 <__sfp+0x18>
 8005554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005558:	b9d5      	cbnz	r5, 8005590 <__sfp+0x64>
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <__sfp+0x88>)
 800555c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005560:	60e3      	str	r3, [r4, #12]
 8005562:	6665      	str	r5, [r4, #100]	; 0x64
 8005564:	f000 f847 	bl	80055f6 <__retarget_lock_init_recursive>
 8005568:	f7ff ff96 	bl	8005498 <__sfp_lock_release>
 800556c:	2208      	movs	r2, #8
 800556e:	4629      	mov	r1, r5
 8005570:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005574:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005578:	6025      	str	r5, [r4, #0]
 800557a:	61a5      	str	r5, [r4, #24]
 800557c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005580:	f7fe ffb8 	bl	80044f4 <memset>
 8005584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800558c:	4620      	mov	r0, r4
 800558e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005590:	3468      	adds	r4, #104	; 0x68
 8005592:	e7d9      	b.n	8005548 <__sfp+0x1c>
 8005594:	2104      	movs	r1, #4
 8005596:	4638      	mov	r0, r7
 8005598:	f7ff ff62 	bl	8005460 <__sfmoreglue>
 800559c:	4604      	mov	r4, r0
 800559e:	6030      	str	r0, [r6, #0]
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d1d5      	bne.n	8005550 <__sfp+0x24>
 80055a4:	f7ff ff78 	bl	8005498 <__sfp_lock_release>
 80055a8:	230c      	movs	r3, #12
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	e7ee      	b.n	800558c <__sfp+0x60>
 80055ae:	bf00      	nop
 80055b0:	08006314 	.word	0x08006314
 80055b4:	ffff0001 	.word	0xffff0001

080055b8 <_fwalk_reent>:
 80055b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055bc:	4606      	mov	r6, r0
 80055be:	4688      	mov	r8, r1
 80055c0:	2700      	movs	r7, #0
 80055c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055ca:	f1b9 0901 	subs.w	r9, r9, #1
 80055ce:	d505      	bpl.n	80055dc <_fwalk_reent+0x24>
 80055d0:	6824      	ldr	r4, [r4, #0]
 80055d2:	2c00      	cmp	r4, #0
 80055d4:	d1f7      	bne.n	80055c6 <_fwalk_reent+0xe>
 80055d6:	4638      	mov	r0, r7
 80055d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055dc:	89ab      	ldrh	r3, [r5, #12]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d907      	bls.n	80055f2 <_fwalk_reent+0x3a>
 80055e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055e6:	3301      	adds	r3, #1
 80055e8:	d003      	beq.n	80055f2 <_fwalk_reent+0x3a>
 80055ea:	4629      	mov	r1, r5
 80055ec:	4630      	mov	r0, r6
 80055ee:	47c0      	blx	r8
 80055f0:	4307      	orrs	r7, r0
 80055f2:	3568      	adds	r5, #104	; 0x68
 80055f4:	e7e9      	b.n	80055ca <_fwalk_reent+0x12>

080055f6 <__retarget_lock_init_recursive>:
 80055f6:	4770      	bx	lr

080055f8 <__retarget_lock_acquire_recursive>:
 80055f8:	4770      	bx	lr

080055fa <__retarget_lock_release_recursive>:
 80055fa:	4770      	bx	lr

080055fc <__swhatbuf_r>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	460e      	mov	r6, r1
 8005600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005604:	4614      	mov	r4, r2
 8005606:	2900      	cmp	r1, #0
 8005608:	461d      	mov	r5, r3
 800560a:	b096      	sub	sp, #88	; 0x58
 800560c:	da08      	bge.n	8005620 <__swhatbuf_r+0x24>
 800560e:	2200      	movs	r2, #0
 8005610:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005614:	602a      	str	r2, [r5, #0]
 8005616:	061a      	lsls	r2, r3, #24
 8005618:	d410      	bmi.n	800563c <__swhatbuf_r+0x40>
 800561a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800561e:	e00e      	b.n	800563e <__swhatbuf_r+0x42>
 8005620:	466a      	mov	r2, sp
 8005622:	f000 f96d 	bl	8005900 <_fstat_r>
 8005626:	2800      	cmp	r0, #0
 8005628:	dbf1      	blt.n	800560e <__swhatbuf_r+0x12>
 800562a:	9a01      	ldr	r2, [sp, #4]
 800562c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005630:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005634:	425a      	negs	r2, r3
 8005636:	415a      	adcs	r2, r3
 8005638:	602a      	str	r2, [r5, #0]
 800563a:	e7ee      	b.n	800561a <__swhatbuf_r+0x1e>
 800563c:	2340      	movs	r3, #64	; 0x40
 800563e:	2000      	movs	r0, #0
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	b016      	add	sp, #88	; 0x58
 8005644:	bd70      	pop	{r4, r5, r6, pc}
	...

08005648 <__smakebuf_r>:
 8005648:	898b      	ldrh	r3, [r1, #12]
 800564a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800564c:	079d      	lsls	r5, r3, #30
 800564e:	4606      	mov	r6, r0
 8005650:	460c      	mov	r4, r1
 8005652:	d507      	bpl.n	8005664 <__smakebuf_r+0x1c>
 8005654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	2301      	movs	r3, #1
 800565e:	6163      	str	r3, [r4, #20]
 8005660:	b002      	add	sp, #8
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	466a      	mov	r2, sp
 8005666:	ab01      	add	r3, sp, #4
 8005668:	f7ff ffc8 	bl	80055fc <__swhatbuf_r>
 800566c:	9900      	ldr	r1, [sp, #0]
 800566e:	4605      	mov	r5, r0
 8005670:	4630      	mov	r0, r6
 8005672:	f7ff f877 	bl	8004764 <_malloc_r>
 8005676:	b948      	cbnz	r0, 800568c <__smakebuf_r+0x44>
 8005678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800567c:	059a      	lsls	r2, r3, #22
 800567e:	d4ef      	bmi.n	8005660 <__smakebuf_r+0x18>
 8005680:	f023 0303 	bic.w	r3, r3, #3
 8005684:	f043 0302 	orr.w	r3, r3, #2
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	e7e3      	b.n	8005654 <__smakebuf_r+0xc>
 800568c:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <__smakebuf_r+0x7c>)
 800568e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	6020      	str	r0, [r4, #0]
 8005694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	9b00      	ldr	r3, [sp, #0]
 800569c:	6120      	str	r0, [r4, #16]
 800569e:	6163      	str	r3, [r4, #20]
 80056a0:	9b01      	ldr	r3, [sp, #4]
 80056a2:	b15b      	cbz	r3, 80056bc <__smakebuf_r+0x74>
 80056a4:	4630      	mov	r0, r6
 80056a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056aa:	f000 f93b 	bl	8005924 <_isatty_r>
 80056ae:	b128      	cbz	r0, 80056bc <__smakebuf_r+0x74>
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	89a0      	ldrh	r0, [r4, #12]
 80056be:	4305      	orrs	r5, r0
 80056c0:	81a5      	strh	r5, [r4, #12]
 80056c2:	e7cd      	b.n	8005660 <__smakebuf_r+0x18>
 80056c4:	08005455 	.word	0x08005455

080056c8 <memchr>:
 80056c8:	4603      	mov	r3, r0
 80056ca:	b510      	push	{r4, lr}
 80056cc:	b2c9      	uxtb	r1, r1
 80056ce:	4402      	add	r2, r0
 80056d0:	4293      	cmp	r3, r2
 80056d2:	4618      	mov	r0, r3
 80056d4:	d101      	bne.n	80056da <memchr+0x12>
 80056d6:	2000      	movs	r0, #0
 80056d8:	e003      	b.n	80056e2 <memchr+0x1a>
 80056da:	7804      	ldrb	r4, [r0, #0]
 80056dc:	3301      	adds	r3, #1
 80056de:	428c      	cmp	r4, r1
 80056e0:	d1f6      	bne.n	80056d0 <memchr+0x8>
 80056e2:	bd10      	pop	{r4, pc}

080056e4 <memcpy>:
 80056e4:	440a      	add	r2, r1
 80056e6:	4291      	cmp	r1, r2
 80056e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056ec:	d100      	bne.n	80056f0 <memcpy+0xc>
 80056ee:	4770      	bx	lr
 80056f0:	b510      	push	{r4, lr}
 80056f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056f6:	4291      	cmp	r1, r2
 80056f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056fc:	d1f9      	bne.n	80056f2 <memcpy+0xe>
 80056fe:	bd10      	pop	{r4, pc}

08005700 <memmove>:
 8005700:	4288      	cmp	r0, r1
 8005702:	b510      	push	{r4, lr}
 8005704:	eb01 0402 	add.w	r4, r1, r2
 8005708:	d902      	bls.n	8005710 <memmove+0x10>
 800570a:	4284      	cmp	r4, r0
 800570c:	4623      	mov	r3, r4
 800570e:	d807      	bhi.n	8005720 <memmove+0x20>
 8005710:	1e43      	subs	r3, r0, #1
 8005712:	42a1      	cmp	r1, r4
 8005714:	d008      	beq.n	8005728 <memmove+0x28>
 8005716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800571a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800571e:	e7f8      	b.n	8005712 <memmove+0x12>
 8005720:	4601      	mov	r1, r0
 8005722:	4402      	add	r2, r0
 8005724:	428a      	cmp	r2, r1
 8005726:	d100      	bne.n	800572a <memmove+0x2a>
 8005728:	bd10      	pop	{r4, pc}
 800572a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800572e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005732:	e7f7      	b.n	8005724 <memmove+0x24>

08005734 <__malloc_lock>:
 8005734:	4801      	ldr	r0, [pc, #4]	; (800573c <__malloc_lock+0x8>)
 8005736:	f7ff bf5f 	b.w	80055f8 <__retarget_lock_acquire_recursive>
 800573a:	bf00      	nop
 800573c:	200001f8 	.word	0x200001f8

08005740 <__malloc_unlock>:
 8005740:	4801      	ldr	r0, [pc, #4]	; (8005748 <__malloc_unlock+0x8>)
 8005742:	f7ff bf5a 	b.w	80055fa <__retarget_lock_release_recursive>
 8005746:	bf00      	nop
 8005748:	200001f8 	.word	0x200001f8

0800574c <_realloc_r>:
 800574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005750:	4680      	mov	r8, r0
 8005752:	4614      	mov	r4, r2
 8005754:	460e      	mov	r6, r1
 8005756:	b921      	cbnz	r1, 8005762 <_realloc_r+0x16>
 8005758:	4611      	mov	r1, r2
 800575a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800575e:	f7ff b801 	b.w	8004764 <_malloc_r>
 8005762:	b92a      	cbnz	r2, 8005770 <_realloc_r+0x24>
 8005764:	f7fe ff96 	bl	8004694 <_free_r>
 8005768:	4625      	mov	r5, r4
 800576a:	4628      	mov	r0, r5
 800576c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005770:	f000 f8fa 	bl	8005968 <_malloc_usable_size_r>
 8005774:	4284      	cmp	r4, r0
 8005776:	4607      	mov	r7, r0
 8005778:	d802      	bhi.n	8005780 <_realloc_r+0x34>
 800577a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800577e:	d812      	bhi.n	80057a6 <_realloc_r+0x5a>
 8005780:	4621      	mov	r1, r4
 8005782:	4640      	mov	r0, r8
 8005784:	f7fe ffee 	bl	8004764 <_malloc_r>
 8005788:	4605      	mov	r5, r0
 800578a:	2800      	cmp	r0, #0
 800578c:	d0ed      	beq.n	800576a <_realloc_r+0x1e>
 800578e:	42bc      	cmp	r4, r7
 8005790:	4622      	mov	r2, r4
 8005792:	4631      	mov	r1, r6
 8005794:	bf28      	it	cs
 8005796:	463a      	movcs	r2, r7
 8005798:	f7ff ffa4 	bl	80056e4 <memcpy>
 800579c:	4631      	mov	r1, r6
 800579e:	4640      	mov	r0, r8
 80057a0:	f7fe ff78 	bl	8004694 <_free_r>
 80057a4:	e7e1      	b.n	800576a <_realloc_r+0x1e>
 80057a6:	4635      	mov	r5, r6
 80057a8:	e7df      	b.n	800576a <_realloc_r+0x1e>

080057aa <_raise_r>:
 80057aa:	291f      	cmp	r1, #31
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4604      	mov	r4, r0
 80057b0:	460d      	mov	r5, r1
 80057b2:	d904      	bls.n	80057be <_raise_r+0x14>
 80057b4:	2316      	movs	r3, #22
 80057b6:	6003      	str	r3, [r0, #0]
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295
 80057bc:	bd38      	pop	{r3, r4, r5, pc}
 80057be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80057c0:	b112      	cbz	r2, 80057c8 <_raise_r+0x1e>
 80057c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057c6:	b94b      	cbnz	r3, 80057dc <_raise_r+0x32>
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 f831 	bl	8005830 <_getpid_r>
 80057ce:	462a      	mov	r2, r5
 80057d0:	4601      	mov	r1, r0
 80057d2:	4620      	mov	r0, r4
 80057d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057d8:	f000 b818 	b.w	800580c <_kill_r>
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d00a      	beq.n	80057f6 <_raise_r+0x4c>
 80057e0:	1c59      	adds	r1, r3, #1
 80057e2:	d103      	bne.n	80057ec <_raise_r+0x42>
 80057e4:	2316      	movs	r3, #22
 80057e6:	6003      	str	r3, [r0, #0]
 80057e8:	2001      	movs	r0, #1
 80057ea:	e7e7      	b.n	80057bc <_raise_r+0x12>
 80057ec:	2400      	movs	r4, #0
 80057ee:	4628      	mov	r0, r5
 80057f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057f4:	4798      	blx	r3
 80057f6:	2000      	movs	r0, #0
 80057f8:	e7e0      	b.n	80057bc <_raise_r+0x12>
	...

080057fc <raise>:
 80057fc:	4b02      	ldr	r3, [pc, #8]	; (8005808 <raise+0xc>)
 80057fe:	4601      	mov	r1, r0
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	f7ff bfd2 	b.w	80057aa <_raise_r>
 8005806:	bf00      	nop
 8005808:	20000010 	.word	0x20000010

0800580c <_kill_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	2300      	movs	r3, #0
 8005810:	4d06      	ldr	r5, [pc, #24]	; (800582c <_kill_r+0x20>)
 8005812:	4604      	mov	r4, r0
 8005814:	4608      	mov	r0, r1
 8005816:	4611      	mov	r1, r2
 8005818:	602b      	str	r3, [r5, #0]
 800581a:	f7fc fd84 	bl	8002326 <_kill>
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	d102      	bne.n	8005828 <_kill_r+0x1c>
 8005822:	682b      	ldr	r3, [r5, #0]
 8005824:	b103      	cbz	r3, 8005828 <_kill_r+0x1c>
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	bd38      	pop	{r3, r4, r5, pc}
 800582a:	bf00      	nop
 800582c:	200001fc 	.word	0x200001fc

08005830 <_getpid_r>:
 8005830:	f7fc bd72 	b.w	8002318 <_getpid>

08005834 <__sread>:
 8005834:	b510      	push	{r4, lr}
 8005836:	460c      	mov	r4, r1
 8005838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583c:	f000 f89c 	bl	8005978 <_read_r>
 8005840:	2800      	cmp	r0, #0
 8005842:	bfab      	itete	ge
 8005844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005846:	89a3      	ldrhlt	r3, [r4, #12]
 8005848:	181b      	addge	r3, r3, r0
 800584a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800584e:	bfac      	ite	ge
 8005850:	6563      	strge	r3, [r4, #84]	; 0x54
 8005852:	81a3      	strhlt	r3, [r4, #12]
 8005854:	bd10      	pop	{r4, pc}

08005856 <__swrite>:
 8005856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585a:	461f      	mov	r7, r3
 800585c:	898b      	ldrh	r3, [r1, #12]
 800585e:	4605      	mov	r5, r0
 8005860:	05db      	lsls	r3, r3, #23
 8005862:	460c      	mov	r4, r1
 8005864:	4616      	mov	r6, r2
 8005866:	d505      	bpl.n	8005874 <__swrite+0x1e>
 8005868:	2302      	movs	r3, #2
 800586a:	2200      	movs	r2, #0
 800586c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005870:	f000 f868 	bl	8005944 <_lseek_r>
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	4632      	mov	r2, r6
 8005878:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800587c:	81a3      	strh	r3, [r4, #12]
 800587e:	4628      	mov	r0, r5
 8005880:	463b      	mov	r3, r7
 8005882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800588a:	f000 b817 	b.w	80058bc <_write_r>

0800588e <__sseek>:
 800588e:	b510      	push	{r4, lr}
 8005890:	460c      	mov	r4, r1
 8005892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005896:	f000 f855 	bl	8005944 <_lseek_r>
 800589a:	1c43      	adds	r3, r0, #1
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	bf15      	itete	ne
 80058a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80058a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058aa:	81a3      	strheq	r3, [r4, #12]
 80058ac:	bf18      	it	ne
 80058ae:	81a3      	strhne	r3, [r4, #12]
 80058b0:	bd10      	pop	{r4, pc}

080058b2 <__sclose>:
 80058b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b6:	f000 b813 	b.w	80058e0 <_close_r>
	...

080058bc <_write_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4604      	mov	r4, r0
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	2200      	movs	r2, #0
 80058c6:	4d05      	ldr	r5, [pc, #20]	; (80058dc <_write_r+0x20>)
 80058c8:	602a      	str	r2, [r5, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f7fc fd62 	bl	8002394 <_write>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_write_r+0x1e>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_write_r+0x1e>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	200001fc 	.word	0x200001fc

080058e0 <_close_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	2300      	movs	r3, #0
 80058e4:	4d05      	ldr	r5, [pc, #20]	; (80058fc <_close_r+0x1c>)
 80058e6:	4604      	mov	r4, r0
 80058e8:	4608      	mov	r0, r1
 80058ea:	602b      	str	r3, [r5, #0]
 80058ec:	f7fc fd6e 	bl	80023cc <_close>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d102      	bne.n	80058fa <_close_r+0x1a>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	b103      	cbz	r3, 80058fa <_close_r+0x1a>
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	200001fc 	.word	0x200001fc

08005900 <_fstat_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	2300      	movs	r3, #0
 8005904:	4d06      	ldr	r5, [pc, #24]	; (8005920 <_fstat_r+0x20>)
 8005906:	4604      	mov	r4, r0
 8005908:	4608      	mov	r0, r1
 800590a:	4611      	mov	r1, r2
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	f7fc fd68 	bl	80023e2 <_fstat>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d102      	bne.n	800591c <_fstat_r+0x1c>
 8005916:	682b      	ldr	r3, [r5, #0]
 8005918:	b103      	cbz	r3, 800591c <_fstat_r+0x1c>
 800591a:	6023      	str	r3, [r4, #0]
 800591c:	bd38      	pop	{r3, r4, r5, pc}
 800591e:	bf00      	nop
 8005920:	200001fc 	.word	0x200001fc

08005924 <_isatty_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	2300      	movs	r3, #0
 8005928:	4d05      	ldr	r5, [pc, #20]	; (8005940 <_isatty_r+0x1c>)
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	f7fc fd66 	bl	8002400 <_isatty>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <_isatty_r+0x1a>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	b103      	cbz	r3, 800593e <_isatty_r+0x1a>
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	200001fc 	.word	0x200001fc

08005944 <_lseek_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	4604      	mov	r4, r0
 8005948:	4608      	mov	r0, r1
 800594a:	4611      	mov	r1, r2
 800594c:	2200      	movs	r2, #0
 800594e:	4d05      	ldr	r5, [pc, #20]	; (8005964 <_lseek_r+0x20>)
 8005950:	602a      	str	r2, [r5, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	f7fc fd5e 	bl	8002414 <_lseek>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_lseek_r+0x1e>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b103      	cbz	r3, 8005962 <_lseek_r+0x1e>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	200001fc 	.word	0x200001fc

08005968 <_malloc_usable_size_r>:
 8005968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800596c:	1f18      	subs	r0, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	bfbc      	itt	lt
 8005972:	580b      	ldrlt	r3, [r1, r0]
 8005974:	18c0      	addlt	r0, r0, r3
 8005976:	4770      	bx	lr

08005978 <_read_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4604      	mov	r4, r0
 800597c:	4608      	mov	r0, r1
 800597e:	4611      	mov	r1, r2
 8005980:	2200      	movs	r2, #0
 8005982:	4d05      	ldr	r5, [pc, #20]	; (8005998 <_read_r+0x20>)
 8005984:	602a      	str	r2, [r5, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f7fc fce7 	bl	800235a <_read>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_read_r+0x1e>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_read_r+0x1e>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	200001fc 	.word	0x200001fc

0800599c <_init>:
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	bf00      	nop
 80059a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a2:	bc08      	pop	{r3}
 80059a4:	469e      	mov	lr, r3
 80059a6:	4770      	bx	lr

080059a8 <_fini>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr
